<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Nez</name>
  </assembly>
  <members>
    <member name="T:Nez.AI.BehaviorTrees.BehaviorTreeReference`1">
      <summary>
   runs an entire BehaviorTree as a child and returns success
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeReference`1.#ctor(BehaviorTree{`0})">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.BehaviorTrees.BehaviorTreeReference`1" /> class.
   </summary>
      <param name="tree">The tree.</param>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeReference`1.Update(`0)">
      <summary>
   Updates the specified context.
   </summary>
      <param name="context">The context.</param>
      <returns>TaskStatus.</returns>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.ExecuteAction`1">
      <summary>
   wraps a Func so that you can avoid having to subclass to create new actions
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.ExecuteAction`1.#ctor(Func{`0, TaskStatus})">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.BehaviorTrees.ExecuteAction`1" /> class.
   </summary>
      <param name="action">The action.</param>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.ExecuteAction`1.Update(`0)">
      <summary>
   Updates the specified context.
   </summary>
      <param name="context">The context.</param>
      <returns>TaskStatus.</returns>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.LogAction`1">
      <summary>
   simple task which will output the specified text and return success. It can be used for debugging.
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="F:Nez.AI.BehaviorTrees.LogAction`1.Text">
      <summary>
   text to log
   </summary>
    </member>
    <member name="F:Nez.AI.BehaviorTrees.LogAction`1.IsError">
      <summary>
   is this text an error
   </summary>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.LogAction`1.#ctor(System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.BehaviorTrees.LogAction`1" /> class.
   </summary>
      <param name="text">The text.</param>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.LogAction`1.Update(`0)">
      <summary>
   Updates the specified context.
   </summary>
      <param name="context">The context.</param>
      <returns>TaskStatus.</returns>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.WaitAction`1">
      <summary>
   Wait a specified amount of time. The task will return running until the task is done waiting. It will return success after the wait
   time has elapsed.
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="F:Nez.AI.BehaviorTrees.WaitAction`1.WaitTime">
      <summary>
   the amount of time to wait
   </summary>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.WaitAction`1.#ctor(System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.BehaviorTrees.WaitAction`1" /> class.
   </summary>
      <param name="waitTime">The wait time.</param>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.WaitAction`1.OnStart">
      <summary>
   called immediately before execution. It is used to setup any variables that need to be reset from the previous run
   </summary>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.WaitAction`1.Update(`0)">
      <summary>
   Updates the specified context.
   </summary>
      <param name="context">The context.</param>
      <returns>TaskStatus.</returns>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.AbortTypes">
      <summary>
   Enum AbortTypes
   </summary>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.AbortTypesExt">
      <summary>
   Class AbortTypesExt.
   </summary>
    </member>
    <member name="F:Nez.AI.BehaviorTrees.AbortTypes.None">
      <summary>
   no abort type. the current action will always run even if other conditionals change state
   </summary>
    </member>
    <member name="F:Nez.AI.BehaviorTrees.AbortTypes.LowerPriority">
      <summary>
   If a more important conditional task changes status it can issue an abort that will stop the lower priority tasks from running
   and shift control back to the higher priority branch. This type should be set on Composites that are children of the evaulating
   Composite. The parent Composite will check it's children to see if they have a LowerPriority abort.
   </summary>
    </member>
    <member name="F:Nez.AI.BehaviorTrees.AbortTypes.Self">
      <summary>
   The Conditional task can only abort an Action task if they are both children of the Composite. This AbortType only affects the
   actual Composite that it is set on unlike LowerPriority which affects its parent Composite.
   </summary>
    </member>
    <member name="F:Nez.AI.BehaviorTrees.AbortTypes.Both">
      <summary>
   both LowerPriority and Self aborts are checked
   </summary>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.AbortTypesExt.Has(AbortTypes,AbortTypes)">
      <summary>
   Determines whether [has] [the specified check].
   </summary>
      <param name="self">The self.</param>
      <param name="check">The check.</param>
      <returns>
        <c>true</c> if [has] [the specified check]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.Composite`1">
      <summary>
   any Composite nodes must subclass this. Provides storage for children and helpers to deal with AbortTypes
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="F:Nez.AI.BehaviorTrees.Composite`1.AbortType">
      <summary>
   The abort type
   </summary>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.Composite`1.Invalidate">
      <summary>
   invalidate the status of the node. Composites can override this and invalidate all of their children.
   </summary>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.Composite`1.OnStart">
      <summary>
   called immediately before execution. It is used to setup any variables that need to be reset from the previous run
   </summary>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.Composite`1.OnEnd">
      <summary>
   called when a task changes state to something other than running
   </summary>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.Composite`1.AddChild(Behavior{`0})">
      <summary>
   adds a child to this Composite
   </summary>
      <param name="child">Child.</param>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.Composite`1.IsFirstChildConditional">
      <summary>
   returns true if the first child of a Composite is a Conditional. Usef for dealing with conditional aborts.
   </summary>
      <returns>
        <c>true</c>, if first child conditional was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.Parallel`1">
      <summary>
   the parallel task will run each child task until a child task returns failure. The difference is that the parallel task will run all of
   its children tasks simultaneously versus running each task one at a time. Like the sequence class, the parallel task will return
   success once all of its children tasks have returned success. If one tasks returns failure the parallel task will end all of the child
   tasks and return failure.
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.Parallel`1.Update(`0)">
      <summary>
   Updates the specified context.
   </summary>
      <param name="context">The context.</param>
      <returns>TaskStatus.</returns>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.ParallelSelector`1">
      <summary>
   Similar to the selector task, the ParallelSelector task will return success as soon as a child task returns success. The difference
   is that the parallel task will run all of its children tasks simultaneously versus running each task one at a time. If one tasks returns
   success the parallel selector task will end all of the child tasks and return success. If every child task returns failure then the
   ParallelSelector task will return failure.
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.ParallelSelector`1.Update(`0)">
      <summary>
   Updates the specified context.
   </summary>
      <param name="context">The context.</param>
      <returns>TaskStatus.</returns>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.RandomSelector`1">
      <summary>
   Same as Selector except it shuffles the children when started
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.RandomSelector`1.OnStart">
      <summary>
   called immediately before execution. It is used to setup any variables that need to be reset from the previous run
   </summary>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.RandomSequence`1">
      <summary>
   Same as Sequence except it shuffles the children when started
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.RandomSequence`1.OnStart">
      <summary>
   called immediately before execution. It is used to setup any variables that need to be reset from the previous run
   </summary>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.Selector`1">
      <summary>
   The selector task is similar to an "or" operation. It will return success as soon as one of its child tasks return success. If a
   child task returns failure then it will sequentially run the next task. If no child task returns success then it will return failure.
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.Selector`1.#ctor(AbortTypes)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.BehaviorTrees.Selector`1" /> class.
   </summary>
      <param name="abortType">Type of the abort.</param>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.Selector`1.Update(`0)">
      <summary>
   Updates the specified context.
   </summary>
      <param name="context">The context.</param>
      <returns>TaskStatus.</returns>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.Sequence`1">
      <summary>
   The sequence task is similar to an "and" operation. It will return failure as soon as one of its child tasks return failure. If a
   child task returns success then it will sequentially run the next task. If all child tasks return success then it will return success.
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.Sequence`1.#ctor(AbortTypes)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.BehaviorTrees.Sequence`1" /> class.
   </summary>
      <param name="abortType">Type of the abort.</param>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.Sequence`1.Update(`0)">
      <summary>
   Updates the specified context.
   </summary>
      <param name="context">The context.</param>
      <returns>TaskStatus.</returns>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.ExecuteActionConditional`1">
      <summary>
   wraps an ExecuteAction so that it can be used as a Conditional
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.ExecuteActionConditional`1.#ctor(Func{`0, TaskStatus})">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.BehaviorTrees.ExecuteActionConditional`1" /> class.
   </summary>
      <param name="action">The action.</param>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.IConditional`1">
      <summary>
   interface used just to identify if a Behavior is a conditional. it will always be applied to a Behavior which already has the update method.
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.IConditional`1.Update(`0)">
      <summary>
   Updates the specified context.
   </summary>
      <param name="context">The context.</param>
      <returns>TaskStatus.</returns>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.RandomProbability`1">
      <summary>
   returns success when the random probability is above the successProbability probability. It will otherwise return failure.
   successProbability should be between 0 and 1.
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.RandomProbability`1.#ctor(System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.BehaviorTrees.RandomProbability`1" /> class.
   </summary>
      <param name="successProbability">The success probability.</param>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.RandomProbability`1.Update(`0)">
      <summary>
   Updates the specified context.
   </summary>
      <param name="context">The context.</param>
      <returns>TaskStatus.</returns>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.AlwaysFail`1">
      <summary>
   will always return failure except when the child task is running
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.AlwaysFail`1.Update(`0)">
      <summary>
   Updates the specified context.
   </summary>
      <param name="context">The context.</param>
      <returns>TaskStatus.</returns>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.AlwaysSucceed`1">
      <summary>
   will always return success except when the child task is running
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.AlwaysSucceed`1.Update(`0)">
      <summary>
   Updates the specified context.
   </summary>
      <param name="context">The context.</param>
      <returns>TaskStatus.</returns>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.ConditionalDecorator`1">
      <summary>
   decorator that will only run its child if a condition is met. By default, the condition will be reevaluated every tick.
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.ConditionalDecorator`1.#ctor(IConditional{`0},System.Boolean)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.BehaviorTrees.ConditionalDecorator`1" /> class.
   </summary>
      <param name="conditional">The conditional.</param>
      <param name="shouldReevalute">if set to <c>true</c> [should reevalute].</param>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.ConditionalDecorator`1.#ctor(IConditional{`0})">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.BehaviorTrees.ConditionalDecorator`1" /> class.
   </summary>
      <param name="conditional">The conditional.</param>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.ConditionalDecorator`1.Invalidate">
      <summary>
   Invalidates this instance.
   </summary>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.ConditionalDecorator`1.OnStart">
      <summary>
   called immediately before execution. It is used to setup any variables that need to be reset from the previous run
   </summary>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.ConditionalDecorator`1.Update(`0)">
      <summary>
   Updates the specified context.
   </summary>
      <param name="context">The context.</param>
      <returns>TaskStatus.</returns>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.Decorator`1">
      <summary>
   Class Decorator.
   Implements the <see cref="T:Nez.AI.BehaviorTrees.Behavior`1" /></summary>
      <typeparam name="T">
      </typeparam>
      <seealso cref="T:Nez.AI.BehaviorTrees.Behavior`1" />
    </member>
    <member name="F:Nez.AI.BehaviorTrees.Decorator`1.Child">
      <summary>
   The child
   </summary>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.Decorator`1.Invalidate">
      <summary>
   invalidate the status of the node. Composites can override this and invalidate all of their children.
   </summary>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.Inverter`1">
      <summary>
   inverts the result of the child node
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.Inverter`1.Update(`0)">
      <summary>
   Updates the specified context.
   </summary>
      <param name="context">The context.</param>
      <returns>TaskStatus.</returns>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.Repeater`1">
      <summary>
   will repeat execution of its child task until the child task has been run a specified number of times. It has the option of
   continuing to execute the child task even if the child task returns a failure.
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="F:Nez.AI.BehaviorTrees.Repeater`1.Count">
      <summary>
   The number of times to repeat the execution of its child task
   </summary>
    </member>
    <member name="F:Nez.AI.BehaviorTrees.Repeater`1.RepeatForever">
      <summary>
   Allows the repeater to repeat forever
   </summary>
    </member>
    <member name="F:Nez.AI.BehaviorTrees.Repeater`1.EndOnFailure">
      <summary>
   Should the task return if the child task returns a failure
   </summary>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.Repeater`1.#ctor(System.Int32,System.Boolean)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.BehaviorTrees.Repeater`1" /> class.
   </summary>
      <param name="count">The count.</param>
      <param name="endOnFailure">if set to <c>true</c> [end on failure].</param>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.Repeater`1.#ctor(System.Boolean,System.Boolean)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.BehaviorTrees.Repeater`1" /> class.
   </summary>
      <param name="repeatForever">if set to <c>true</c> [repeat forever].</param>
      <param name="endOnFailure">if set to <c>true</c> [end on failure].</param>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.Repeater`1.OnStart">
      <summary>
   called immediately before execution. It is used to setup any variables that need to be reset from the previous run
   </summary>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.Repeater`1.Update(`0)">
      <summary>
   Updates the specified context.
   </summary>
      <param name="context">The context.</param>
      <returns>TaskStatus.</returns>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.UntilFail`1">
      <summary>
   will keep executing its child task until the child task returns failure
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.UntilFail`1.Update(`0)">
      <summary>
   Updates the specified context.
   </summary>
      <param name="context">The context.</param>
      <returns>TaskStatus.</returns>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.UntilSuccess`1">
      <summary>
   will keep executing its child task until the child task returns success
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.UntilSuccess`1.Update(`0)">
      <summary>
   Updates the specified context.
   </summary>
      <param name="context">The context.</param>
      <returns>TaskStatus.</returns>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.Behavior`1">
      <summary>
   root class for all nodes
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="F:Nez.AI.BehaviorTrees.Behavior`1.Status">
      <summary>
   The status
   </summary>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.Behavior`1.Update(`0)">
      <summary>
   Updates the specified context.
   </summary>
      <param name="context">The context.</param>
      <returns>TaskStatus.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.Behavior`1.Invalidate">
      <summary>
   invalidate the status of the node. Composites can override this and invalidate all of their children.
   </summary>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.Behavior`1.OnStart">
      <summary>
   called immediately before execution. It is used to setup any variables that need to be reset from the previous run
   </summary>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.Behavior`1.OnEnd">
      <summary>
   called when a task changes state to something other than running
   </summary>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.BehaviorTree`1">
      <summary>
   root class used to control a BehaviorTree. Handles storing the context
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="F:Nez.AI.BehaviorTrees.BehaviorTree`1.UpdatePeriod">
      <summary>
   how often the behavior tree should update. An updatePeriod of 0.2 will make the tree update 5 times a second.
   </summary>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTree`1.#ctor(`0,Behavior{`0},System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.BehaviorTrees.BehaviorTree`1" /> class.
   </summary>
      <param name="context">The context.</param>
      <param name="rootNode">The root node.</param>
      <param name="updatePeriod">The update period.</param>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTree`1.Tick">
      <summary>
   Ticks this instance.
   </summary>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1">
      <summary>
   helper for building a BehaviorTree using a fluent API. Leaf nodes need to first have a parent added. Parents can be Composites or
   Decorators. Decorators are automatically closed when a leaf node is added. Composites must have endComposite called to close them.
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.#ctor(`0)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1" /> class.
   </summary>
      <param name="context">The context.</param>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.Begin(`0)">
      <summary>
   Begins the specified context.
   </summary>
      <param name="context">The context.</param>
      <returns>BehaviorTreeBuilder&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.Action(Func{`0, TaskStatus})">
      <summary>
   Actions the specified function.
   </summary>
      <param name="func">The function.</param>
      <returns>BehaviorTreeBuilder&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.Action(Func{`0, System.Boolean})">
      <summary>
   Like an action node but the function can return true/false and is mapped to success/failure.
   </summary>
      <param name="func">The function.</param>
      <returns>BehaviorTreeBuilder&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.Conditional(Func{`0, TaskStatus})">
      <summary>
   Conditionals the specified function.
   </summary>
      <param name="func">The function.</param>
      <returns>BehaviorTreeBuilder&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.Conditional(Func{`0, System.Boolean})">
      <summary>
   Like a conditional node but the function can return true/false and is mapped to success/failure.
   </summary>
      <param name="func">The function.</param>
      <returns>BehaviorTreeBuilder&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.LogAction(System.String)">
      <summary>
   Logs the action.
   </summary>
      <param name="text">The text.</param>
      <returns>BehaviorTreeBuilder&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.WaitAction(System.Single)">
      <summary>
   Waits the action.
   </summary>
      <param name="waitTime">The wait time.</param>
      <returns>BehaviorTreeBuilder&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.SubTree(BehaviorTree{`0})">
      <summary>
   Splice a sub tree into the parent tree.
   </summary>
      <param name="subTree">The sub tree.</param>
      <returns>BehaviorTreeBuilder&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.ConditionalDecorator(Func{`0, TaskStatus},System.Boolean)">
      <summary>
   Conditionals the decorator.
   </summary>
      <param name="func">The function.</param>
      <param name="shouldReevaluate">if set to <c>true</c> [should reevaluate].</param>
      <returns>BehaviorTreeBuilder&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.ConditionalDecorator(Func{`0, System.Boolean},System.Boolean)">
      <summary>
   Like a conditional decorator node but the function can return true/false and is mapped to success/failure.
   </summary>
      <param name="func">The function.</param>
      <param name="shouldReevaluate">if set to <c>true</c> [should reevaluate].</param>
      <returns>BehaviorTreeBuilder&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.AlwaysFail">
      <summary>
   Alwayses the fail.
   </summary>
      <returns>BehaviorTreeBuilder&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.AlwaysSucceed">
      <summary>
   Alwayses the succeed.
   </summary>
      <returns>BehaviorTreeBuilder&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.Inverter">
      <summary>
   Inverters this instance.
   </summary>
      <returns>BehaviorTreeBuilder&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.Repeater(System.Int32)">
      <summary>
   Repeaters the specified count.
   </summary>
      <param name="count">The count.</param>
      <returns>BehaviorTreeBuilder&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.UntilFail">
      <summary>
   Untils the fail.
   </summary>
      <returns>BehaviorTreeBuilder&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.UntilSuccess">
      <summary>
   Untils the success.
   </summary>
      <returns>BehaviorTreeBuilder&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.Parallel">
      <summary>
   Parallels this instance.
   </summary>
      <returns>BehaviorTreeBuilder&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.ParallelSelector">
      <summary>
   Parallels the selector.
   </summary>
      <returns>BehaviorTreeBuilder&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.Selector(AbortTypes)">
      <summary>
   Selectors the specified abort type.
   </summary>
      <param name="abortType">Type of the abort.</param>
      <returns>BehaviorTreeBuilder&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.RandomSelector">
      <summary>
   Randoms the selector.
   </summary>
      <returns>BehaviorTreeBuilder&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.Sequence(AbortTypes)">
      <summary>
   Sequences the specified abort type.
   </summary>
      <param name="abortType">Type of the abort.</param>
      <returns>BehaviorTreeBuilder&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.RandomSequence">
      <summary>
   Randoms the sequence.
   </summary>
      <returns>BehaviorTreeBuilder&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.EndComposite">
      <summary>
   Ends the composite.
   </summary>
      <returns>BehaviorTreeBuilder&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.BehaviorTrees.BehaviorTreeBuilder`1.Build(System.Single)">
      <summary>
   Builds the specified update period.
   </summary>
      <param name="updatePeriod">The update period.</param>
      <returns>BehaviorTree&lt;T&gt;.</returns>
    </member>
    <member name="T:Nez.AI.BehaviorTrees.TaskStatus">
      <summary>
   Enum TaskStatus
   </summary>
    </member>
    <member name="F:Nez.AI.BehaviorTrees.TaskStatus.Invalid">
      <summary>
   The invalid
   </summary>
    </member>
    <member name="F:Nez.AI.BehaviorTrees.TaskStatus.Success">
      <summary>
   The success
   </summary>
    </member>
    <member name="F:Nez.AI.BehaviorTrees.TaskStatus.Failure">
      <summary>
   The failure
   </summary>
    </member>
    <member name="F:Nez.AI.BehaviorTrees.TaskStatus.Running">
      <summary>
   The running
   </summary>
    </member>
    <member name="T:Nez.AI.FSM.SimpleStateMachine`1">
      <summary>
   Simple state machine with an enum constraint. There are some rules you must follow when using this:
   - before update is called initialState must be set (use the constructor or onAddedToEntity)
   - if you implement update in your subclass you must call base.update()
   Note: if you use an enum as the contraint you can avoid allocations/boxing in Mono by doing what the Core
   Emitter does for its enum: pass in a IEqualityComparer to the constructor.
   </summary>
      <typeparam name="TEnum">The type of the t enum.</typeparam>
    </member>
    <member name="M:Nez.AI.FSM.SimpleStateMachine`1.#ctor(IEqualityComparer{`0})">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.FSM.SimpleStateMachine`1" /> class.
   </summary>
      <param name="customComparer">The custom comparer.</param>
    </member>
    <member name="M:Nez.AI.FSM.SimpleStateMachine`1.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="T:Nez.AI.FSM.State`1">
      <summary>
   Class State.
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.FSM.State`1.SetMachineAndContext(StateMachine{`0},`0)">
      <summary>
   Sets the machine and context.
   </summary>
      <param name="machine">The machine.</param>
      <param name="context">The context.</param>
    </member>
    <member name="M:Nez.AI.FSM.State`1.OnInitialized">
      <summary>
   called directly after the machine and context are set allowing the state to do any required setup
   </summary>
    </member>
    <member name="M:Nez.AI.FSM.State`1.Begin">
      <summary>
   called when the state becomes the active state
   </summary>
    </member>
    <member name="M:Nez.AI.FSM.State`1.Reason">
      <summary>
   called before update allowing the state to have one last chance to change state
   </summary>
    </member>
    <member name="M:Nez.AI.FSM.State`1.Update(System.Single)">
      <summary>
   called every frame this state is the active state
   </summary>
      <param name="deltaTime">Delta time.</param>
    </member>
    <member name="M:Nez.AI.FSM.State`1.End">
      <summary>
   called when this state is no longer the active state
   </summary>
    </member>
    <member name="T:Nez.AI.FSM.StateMachine`1">
      <summary>
   Class StateMachine.
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="E:Nez.AI.FSM.StateMachine`1.OnStateChanged">
      <summary>
   Occurs when [on state changed].
   </summary>
    </member>
    <member name="P:Nez.AI.FSM.StateMachine`1.CurrentState">
      <summary>
   Gets the state of the current.
   </summary>
      <value>The state of the current.</value>
    </member>
    <member name="F:Nez.AI.FSM.StateMachine`1.PreviousState">
      <summary>
   The previous state
   </summary>
    </member>
    <member name="F:Nez.AI.FSM.StateMachine`1.ElapsedTimeInState">
      <summary>
   The elapsed time in state
   </summary>
    </member>
    <member name="M:Nez.AI.FSM.StateMachine`1.#ctor(`0,State{`0})">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.FSM.StateMachine`1" /> class.
   </summary>
      <param name="context">The context.</param>
      <param name="initialState">The initial state.</param>
    </member>
    <member name="M:Nez.AI.FSM.StateMachine`1.AddState(State{`0})">
      <summary>
   adds the state to the machine
   </summary>
      <param name="state">The state.</param>
    </member>
    <member name="M:Nez.AI.FSM.StateMachine`1.Update(System.Single)">
      <summary>
   ticks the state machine with the provided delta time
   </summary>
      <param name="deltaTime">The delta time.</param>
    </member>
    <member name="M:Nez.AI.FSM.StateMachine`1.GetState``1">
      <summary>
   Gets a specific state from the machine without having to
   change to it.
   </summary>
      <typeparam name="R">
      </typeparam>
      <returns>R.</returns>
    </member>
    <member name="M:Nez.AI.FSM.StateMachine`1.ChangeState``1">
      <summary>
   changes the current state
   </summary>
      <typeparam name="R">
      </typeparam>
      <returns>R.</returns>
    </member>
    <member name="T:Nez.AI.GOAP.Action">
      <summary>
   Class Action.
   </summary>
    </member>
    <member name="F:Nez.AI.GOAP.Action.Name">
      <summary>
   optional name for the Action. Used for debugging purposes
   </summary>
    </member>
    <member name="F:Nez.AI.GOAP.Action.Cost">
      <summary>
   The cost of performing the action.  Figure out a weight that suits the action.  Changing it will affect what actions are
   chosen during planning
   </summary>
    </member>
    <member name="M:Nez.AI.GOAP.Action.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.GOAP.Action" /> class.
   </summary>
    </member>
    <member name="M:Nez.AI.GOAP.Action.#ctor(System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.GOAP.Action" /> class.
   </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Nez.AI.GOAP.Action.#ctor(System.String,System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.GOAP.Action" /> class.
   </summary>
      <param name="name">The name.</param>
      <param name="cost">The cost.</param>
    </member>
    <member name="M:Nez.AI.GOAP.Action.SetPrecondition(System.String,System.Boolean)">
      <summary>
   Sets the precondition.
   </summary>
      <param name="conditionName">Name of the condition.</param>
      <param name="value">if set to <c>true</c> [value].</param>
    </member>
    <member name="M:Nez.AI.GOAP.Action.SetPostcondition(System.String,System.Boolean)">
      <summary>
   Sets the postcondition.
   </summary>
      <param name="conditionName">Name of the condition.</param>
      <param name="value">if set to <c>true</c> [value].</param>
    </member>
    <member name="M:Nez.AI.GOAP.Action.Validate">
      <summary>
   called before the Planner does its planning. Gives the Action an opportunity to set its score or to opt out if it isnt of use.
   For example, if the Action is to pick up a gun but there are no guns in the world returning false would keep the Action from being
   considered by the ActionPlanner.
   </summary>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.AI.GOAP.Action.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.AI.GOAP.ActionPlanner">
      <summary>
   GOAP based on https://github.com/stolk/GPGOAP
   </summary>
    </member>
    <member name="F:Nez.AI.GOAP.ActionPlanner.MAX_CONDITIONS">
      <summary>
   The maximum conditions
   </summary>
    </member>
    <member name="F:Nez.AI.GOAP.ActionPlanner.ConditionNames">
      <summary>
   Names associated with all world state atoms
   </summary>
    </member>
    <member name="M:Nez.AI.GOAP.ActionPlanner.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.GOAP.ActionPlanner" /> class.
   </summary>
    </member>
    <member name="M:Nez.AI.GOAP.ActionPlanner.CreateWorldState">
      <summary>
   convenince method for fetching a WorldState object
   </summary>
      <returns>The world state.</returns>
    </member>
    <member name="M:Nez.AI.GOAP.ActionPlanner.AddAction(Action)">
      <summary>
   Adds the action.
   </summary>
      <param name="action">The action.</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">could not find or create Action</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">could not find or create conditionName</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">could not find conditionName</exception>
    </member>
    <member name="M:Nez.AI.GOAP.ActionPlanner.Plan(WorldState,WorldState,List{AStarNode})">
      <summary>
   Plans the specified start state.
   </summary>
      <param name="startState">The start state.</param>
      <param name="goalState">State of the goal.</param>
      <param name="selectedNodes">The selected nodes.</param>
      <returns>Stack&lt;Action&gt;.</returns>
    </member>
    <member name="M:Nez.AI.GOAP.ActionPlanner.Describe">
      <summary>
   Describe the action planner by listing all actions with pre and post conditions. For debugging purpose.
   </summary>
      <returns>System.String.</returns>
    </member>
    <member name="T:Nez.AI.GOAP.Action`1">
      <summary>
   convenince Action subclass with a typed context. This is useful when an Action requires validation so that it has some way to get
   the data it needs to do the validation.
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.GOAP.Action`1.#ctor(`0,System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.GOAP.Action`1" /> class.
   </summary>
      <param name="context">The context.</param>
      <param name="name">The name.</param>
    </member>
    <member name="M:Nez.AI.GOAP.Action`1.#ctor(`0,System.String,System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.GOAP.Action`1" /> class.
   </summary>
      <param name="context">The context.</param>
      <param name="name">The name.</param>
      <param name="cost">The cost.</param>
    </member>
    <member name="M:Nez.AI.GOAP.Action`1.Execute">
      <summary>
   Executes this instance.
   </summary>
    </member>
    <member name="T:Nez.AI.GOAP.Agent">
      <summary>
   Agent provides a simple and concise way to use the planner. It is not necessary to use at all since it is just a convenince wrapper
   around the ActionPlanner making it easier to get plans and store the results.
   </summary>
    </member>
    <member name="F:Nez.AI.GOAP.Agent.Actions">
      <summary>
   The actions
   </summary>
    </member>
    <member name="M:Nez.AI.GOAP.Agent.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.GOAP.Agent" /> class.
   </summary>
    </member>
    <member name="M:Nez.AI.GOAP.Agent.Plan(System.Boolean)">
      <summary>
   Plans the specified debug plan.
   </summary>
      <param name="debugPlan">if set to <c>true</c> [debug plan].</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.AI.GOAP.Agent.HasActionPlan">
      <summary>
   Determines whether [has action plan].
   </summary>
      <returns>
        <c>true</c> if [has action plan]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.AI.GOAP.Agent.GetWorldState">
      <summary>
   current WorldState
   </summary>
      <returns>The world state.</returns>
    </member>
    <member name="M:Nez.AI.GOAP.Agent.GetGoalState">
      <summary>
   the goal state that the agent wants to achieve
   </summary>
      <returns>The goal state.</returns>
    </member>
    <member name="T:Nez.AI.GOAP.AStarNode">
      <summary>
   Class AStarNode.
   Implements the <see cref="T:System.IComparable`1" />
   Implements the <see cref="T:System.IEquatable`1" />
   Implements the <see cref="T:Nez.IPoolable" /></summary>
      <seealso cref="T:System.IComparable`1" />
      <seealso cref="T:System.IEquatable`1" />
      <seealso cref="T:Nez.IPoolable" />
    </member>
    <member name="T:Nez.AI.GOAP.AStar">
      <summary>
   Class AStar.
   </summary>
    </member>
    <member name="F:Nez.AI.GOAP.AStarNode.WorldState">
      <summary>
   The state of the world at this node.
   </summary>
    </member>
    <member name="F:Nez.AI.GOAP.AStarNode.CostSoFar">
      <summary>
   The cost so far.
   </summary>
    </member>
    <member name="F:Nez.AI.GOAP.AStarNode.HeuristicCost">
      <summary>
   The heuristic for remaining cost (don't overestimate!)
   </summary>
    </member>
    <member name="F:Nez.AI.GOAP.AStarNode.CostSoFarAndHeuristicCost">
      <summary>
   costSoFar + heuristicCost (g+h) combined.
   </summary>
    </member>
    <member name="F:Nez.AI.GOAP.AStarNode.Action">
      <summary>
   the Action associated with this node
   </summary>
    </member>
    <member name="F:Nez.AI.GOAP.AStarNode.Parent">
      <summary>
   The parent
   </summary>
    </member>
    <member name="F:Nez.AI.GOAP.AStarNode.ParentWorldState">
      <summary>
   The parent world state
   </summary>
    </member>
    <member name="F:Nez.AI.GOAP.AStarNode.Depth">
      <summary>
   The depth
   </summary>
    </member>
    <member name="M:Nez.AI.GOAP.AStarNode.Equals(AStarNode)">
      <summary>
   Indicates whether the current object is equal to another object of the same type.
   </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Nez.AI.GOAP.AStarNode.CompareTo(AStarNode)">
      <summary>
   Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
   </summary>
      <param name="other">An object to compare with this instance.</param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
   Value
   Meaning
   Less than zero
   This instance precedes <paramref name="other" /> in the sort order.
   Zero
   This instance occurs in the same position in the sort order as <paramref name="other" />.
   Greater than zero
   This instance follows <paramref name="other" /> in the sort order.</returns>
    </member>
    <member name="M:Nez.AI.GOAP.AStarNode.Reset">
      <summary>
   Resets the object for reuse. Object references should be nulled and fields may be set to default values
   </summary>
    </member>
    <member name="M:Nez.AI.GOAP.AStarNode.Clone">
      <summary>
   Clones this instance.
   </summary>
      <returns>AStarNode.</returns>
    </member>
    <member name="M:Nez.AI.GOAP.AStarNode.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="M:Nez.AI.GOAP.AStar.Plan(ActionPlanner,WorldState,WorldState,List{AStarNode})">
      <summary>
   Make a plan of actions that will reach desired world state
   </summary>
      <param name="ap">Ap.</param>
      <param name="start">Start.</param>
      <param name="goal">Goal.</param>
      <param name="selectedNodes">The selected nodes.</param>
      <returns>Stack&lt;Action&gt;.</returns>
    </member>
    <member name="T:Nez.AI.GOAP.AStarStorage">
      <summary>
   Class AStarStorage.
   </summary>
    </member>
    <member name="M:Nez.AI.GOAP.AStarStorage.Clear">
      <summary>
   Clears this instance.
   </summary>
    </member>
    <member name="M:Nez.AI.GOAP.AStarStorage.FindOpened(AStarNode)">
      <summary>
   Finds the opened.
   </summary>
      <param name="node">The node.</param>
      <returns>AStarNode.</returns>
    </member>
    <member name="M:Nez.AI.GOAP.AStarStorage.FindClosed(AStarNode)">
      <summary>
   Finds the closed.
   </summary>
      <param name="node">The node.</param>
      <returns>AStarNode.</returns>
    </member>
    <member name="M:Nez.AI.GOAP.AStarStorage.HasOpened">
      <summary>
   Determines whether this instance has opened.
   </summary>
      <returns>
        <c>true</c> if this instance has opened; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.AI.GOAP.AStarStorage.RemoveOpened(AStarNode)">
      <summary>
   Removes the opened.
   </summary>
      <param name="node">The node.</param>
    </member>
    <member name="M:Nez.AI.GOAP.AStarStorage.RemoveClosed(AStarNode)">
      <summary>
   Removes the closed.
   </summary>
      <param name="node">The node.</param>
    </member>
    <member name="M:Nez.AI.GOAP.AStarStorage.IsOpen(AStarNode)">
      <summary>
   Determines whether the specified node is open.
   </summary>
      <param name="node">The node.</param>
      <returns>
        <c>true</c> if the specified node is open; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.AI.GOAP.AStarStorage.IsClosed(AStarNode)">
      <summary>
   Determines whether the specified node is closed.
   </summary>
      <param name="node">The node.</param>
      <returns>
        <c>true</c> if the specified node is closed; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.AI.GOAP.AStarStorage.AddToOpenList(AStarNode)">
      <summary>
   Adds to open list.
   </summary>
      <param name="node">The node.</param>
    </member>
    <member name="M:Nez.AI.GOAP.AStarStorage.AddToClosedList(AStarNode)">
      <summary>
   Adds to closed list.
   </summary>
      <param name="node">The node.</param>
    </member>
    <member name="M:Nez.AI.GOAP.AStarStorage.RemoveCheapestOpenNode">
      <summary>
   Removes the cheapest open node.
   </summary>
      <returns>AStarNode.</returns>
    </member>
    <member name="T:Nez.AI.GOAP.WorldState">
      <summary>
   Struct WorldState
   Implements the <see cref="T:System.IEquatable`1" /></summary>
      <seealso cref="T:System.IEquatable`1" />
    </member>
    <member name="F:Nez.AI.GOAP.WorldState.Values">
      <summary>
   we use a bitmask shifting on the condition index to flip bits
   </summary>
    </member>
    <member name="F:Nez.AI.GOAP.WorldState.DontCare">
      <summary>
   bitmask used to explicitly state false. We need a separate store for negatives because the absense of a value doesnt necessarily mean
   it is false.
   </summary>
    </member>
    <member name="M:Nez.AI.GOAP.WorldState.Create(ActionPlanner)">
      <summary>
   Creates the specified planner.
   </summary>
      <param name="planner">The planner.</param>
      <returns>WorldState.</returns>
    </member>
    <member name="M:Nez.AI.GOAP.WorldState.#ctor(ActionPlanner,System.Int64,System.Int64)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.GOAP.WorldState" /> struct.
   </summary>
      <param name="planner">The planner.</param>
      <param name="values">The values.</param>
      <param name="dontcare">The dontcare.</param>
    </member>
    <member name="M:Nez.AI.GOAP.WorldState.Set(System.String,System.Boolean)">
      <summary>
   Sets the specified condition name.
   </summary>
      <param name="conditionName">Name of the condition.</param>
      <param name="value">if set to <c>true</c> [value].</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.AI.GOAP.WorldState.Equals(WorldState)">
      <summary>
   Indicates whether the current object is equal to another object of the same type.
   </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Nez.AI.GOAP.WorldState.Describe(ActionPlanner)">
      <summary>
   for debugging purposes. Provides a human readable string of all the preconditions.
   </summary>
      <param name="planner">Planner.</param>
      <returns>System.String.</returns>
    </member>
    <member name="T:Nez.AI.Pathfinding.AstarGridGraph">
      <summary>
   basic static grid graph for use with A*. Add walls to the walls HashSet and weighted nodes to the weightedNodes HashSet. This provides
   a very simple grid graph for A* with just two weights: defaultWeight and weightedNodeWeight.
   </summary>
    </member>
    <member name="F:Nez.AI.Pathfinding.AstarGridGraph.Dirs">
      <summary>
   The dirs
   </summary>
    </member>
    <member name="F:Nez.AI.Pathfinding.AstarGridGraph.Walls">
      <summary>
   The walls
   </summary>
    </member>
    <member name="F:Nez.AI.Pathfinding.AstarGridGraph.WeightedNodes">
      <summary>
   The weighted nodes
   </summary>
    </member>
    <member name="F:Nez.AI.Pathfinding.AstarGridGraph.DefaultWeight">
      <summary>
   The default weight
   </summary>
    </member>
    <member name="F:Nez.AI.Pathfinding.AstarGridGraph.WeightedNodeWeight">
      <summary>
   The weighted node weight
   </summary>
    </member>
    <member name="M:Nez.AI.Pathfinding.AstarGridGraph.#ctor(System.Int32,System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.Pathfinding.AstarGridGraph" /> class.
   </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
    </member>
    <member name="M:Nez.AI.Pathfinding.AstarGridGraph.#ctor(TmxLayer)">
      <summary>
   creates a WeightedGridGraph from a TiledTileLayer. Present tile are walls and empty tiles are passable.
   </summary>
      <param name="tiledLayer">Tiled layer.</param>
    </member>
    <member name="M:Nez.AI.Pathfinding.AstarGridGraph.Search(Point,Point)">
      <summary>
   convenience shortcut for calling AStarPathfinder.search
   </summary>
      <param name="start">The start.</param>
      <param name="goal">The goal.</param>
      <returns>List&lt;Point&gt;.</returns>
    </member>
    <member name="T:Nez.AI.Pathfinding.AStarPathfinder">
      <summary>
   calculates paths given an IAstarGraph and start/goal positions
   </summary>
    </member>
    <member name="M:Nez.AI.Pathfinding.AStarPathfinder.Search``1(IAstarGraph{``0},``0,``0,Dictionary{``0, ``0}@)">
      <summary>
   Searches the specified graph.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="graph">The graph.</param>
      <param name="start">The start.</param>
      <param name="goal">The goal.</param>
      <param name="cameFrom">The came from.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.AI.Pathfinding.AStarPathfinder.Search``1(IAstarGraph{``0},``0,``0)">
      <summary>
   gets a path from start to goal if possible. If no path is found null is returned.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="graph">Graph.</param>
      <param name="start">Start.</param>
      <param name="goal">Goal.</param>
      <returns>List&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.Pathfinding.AStarPathfinder.RecontructPath``1(Dictionary{``0, ``0},``0,``0)">
      <summary>
   reconstructs a path from the cameFrom Dictionary
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="cameFrom">Came from.</param>
      <param name="start">Start.</param>
      <param name="goal">Goal.</param>
      <returns>The path.</returns>
    </member>
    <member name="T:Nez.AI.Pathfinding.IAstarGraph`1">
      <summary>
   interface for a graph that can be fed to the AstarPathfinder.search method
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.Pathfinding.IAstarGraph`1.GetNeighbors(`0)">
      <summary>
   The getNeighbors method should return any neighbor nodes that can be reached from the passed in node
   </summary>
      <param name="node">Node.</param>
      <returns>The neighbors.</returns>
    </member>
    <member name="M:Nez.AI.Pathfinding.IAstarGraph`1.Cost(`0,`0)">
      <summary>
   calculates the cost to get from 'from' to 'to'
   </summary>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <returns>System.Int32.</returns>
    </member>
    <member name="M:Nez.AI.Pathfinding.IAstarGraph`1.Heuristic(`0,`0)">
      <summary>
   calculates the heuristic (estimate) to get from 'node' to 'goal'. See WeightedGridGraph for the common Manhatten method.
   </summary>
      <param name="node">Node.</param>
      <param name="goal">Goal.</param>
      <returns>System.Int32.</returns>
    </member>
    <member name="T:Nez.AI.Pathfinding.BreadthFirstPathfinder">
      <summary>
   calculates paths given an IUnweightedGraph and start/goal positions
   </summary>
    </member>
    <member name="M:Nez.AI.Pathfinding.BreadthFirstPathfinder.Search``1(IUnweightedGraph{``0},``0,``0,Dictionary{``0, ``0}@)">
      <summary>
   Searches the specified graph.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="graph">The graph.</param>
      <param name="start">The start.</param>
      <param name="goal">The goal.</param>
      <param name="cameFrom">The came from.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.AI.Pathfinding.BreadthFirstPathfinder.Search``1(IUnweightedGraph{``0},``0,``0)">
      <summary>
   Searches the specified graph.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="graph">The graph.</param>
      <param name="start">The start.</param>
      <param name="goal">The goal.</param>
      <returns>List&lt;T&gt;.</returns>
    </member>
    <member name="T:Nez.AI.Pathfinding.IUnweightedGraph`1">
      <summary>
   interface for a graph that can be fed to the BreadthFirstPathfinder.search method
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.Pathfinding.IUnweightedGraph`1.GetNeighbors(`0)">
      <summary>
   The getNeighbors method should return any neighbor nodes that can be reached from the passed in node.
   </summary>
      <param name="node">Node.</param>
      <returns>The neighbors.</returns>
    </member>
    <member name="T:Nez.AI.Pathfinding.UnweightedGraph`1">
      <summary>
   basic implementation of an UnweightedGraph. All edges are cached. This type of graph is best suited for non-grid based graphs.
   Any nodes added as edges must also have an entry as the key in the edges Dictionary.
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="F:Nez.AI.Pathfinding.UnweightedGraph`1.Edges">
      <summary>
   The edges
   </summary>
    </member>
    <member name="M:Nez.AI.Pathfinding.UnweightedGraph`1.AddEdgesForNode(`0,`0[])">
      <summary>
   Adds the edges for node.
   </summary>
      <param name="node">The node.</param>
      <param name="edges">The edges.</param>
      <returns>UnweightedGraph&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.Pathfinding.UnweightedGraph`1.GetNeighbors(`0)">
      <summary>
   Gets the neighbors.
   </summary>
      <param name="node">The node.</param>
      <returns>IEnumerable&lt;T&gt;.</returns>
    </member>
    <member name="T:Nez.AI.Pathfinding.UnweightedGridGraph">
      <summary>
   basic unweighted grid graph for use with the BreadthFirstPathfinder
   </summary>
    </member>
    <member name="F:Nez.AI.Pathfinding.UnweightedGridGraph.Walls">
      <summary>
   The walls
   </summary>
    </member>
    <member name="M:Nez.AI.Pathfinding.UnweightedGridGraph.#ctor(System.Int32,System.Int32,System.Boolean)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.Pathfinding.UnweightedGridGraph" /> class.
   </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="allowDiagonalSearch">if set to <c>true</c> [allow diagonal search].</param>
    </member>
    <member name="M:Nez.AI.Pathfinding.UnweightedGridGraph.#ctor(TmxLayer)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.Pathfinding.UnweightedGridGraph" /> class.
   </summary>
      <param name="tiledLayer">The tiled layer.</param>
    </member>
    <member name="M:Nez.AI.Pathfinding.UnweightedGridGraph.IsNodeInBounds(Point)">
      <summary>
   Determines whether [is node in bounds] [the specified node].
   </summary>
      <param name="node">The node.</param>
      <returns>
        <c>true</c> if [is node in bounds] [the specified node]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.AI.Pathfinding.UnweightedGridGraph.IsNodePassable(Point)">
      <summary>
   Determines whether [is node passable] [the specified node].
   </summary>
      <param name="node">The node.</param>
      <returns>
        <c>true</c> if [is node passable] [the specified node]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.AI.Pathfinding.UnweightedGridGraph.Search(Point,Point)">
      <summary>
   convenience shortcut for calling BreadthFirstPathfinder.search
   </summary>
      <param name="start">The start.</param>
      <param name="goal">The goal.</param>
      <returns>List&lt;Point&gt;.</returns>
    </member>
    <member name="T:Nez.AI.Pathfinding.IWeightedGraph`1">
      <summary>
   interface for a graph that can be fed to the DijkstraPathfinder.search method
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.Pathfinding.IWeightedGraph`1.GetNeighbors(`0)">
      <summary>
   The getNeighbors method should return any neighbor nodes that can be reached from the passed in node
   </summary>
      <param name="node">Node.</param>
      <returns>The neighbors.</returns>
    </member>
    <member name="M:Nez.AI.Pathfinding.IWeightedGraph`1.Cost(`0,`0)">
      <summary>
   calculates the cost to get from 'from' to 'to'
   </summary>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <returns>System.Int32.</returns>
    </member>
    <member name="T:Nez.AI.Pathfinding.WeightedGridGraph">
      <summary>
   basic grid graph with support for one type of weighted node
   </summary>
    </member>
    <member name="F:Nez.AI.Pathfinding.WeightedGridGraph.CARDINAL_DIRS">
      <summary>
   The cardinal dirs
   </summary>
    </member>
    <member name="F:Nez.AI.Pathfinding.WeightedGridGraph.Walls">
      <summary>
   The walls
   </summary>
    </member>
    <member name="F:Nez.AI.Pathfinding.WeightedGridGraph.WeightedNodes">
      <summary>
   The weighted nodes
   </summary>
    </member>
    <member name="F:Nez.AI.Pathfinding.WeightedGridGraph.DefaultWeight">
      <summary>
   The default weight
   </summary>
    </member>
    <member name="F:Nez.AI.Pathfinding.WeightedGridGraph.WeightedNodeWeight">
      <summary>
   The weighted node weight
   </summary>
    </member>
    <member name="M:Nez.AI.Pathfinding.WeightedGridGraph.#ctor(System.Int32,System.Int32,System.Boolean)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.Pathfinding.WeightedGridGraph" /> class.
   </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="allowDiagonalSearch">if set to <c>true</c> [allow diagonal search].</param>
    </member>
    <member name="M:Nez.AI.Pathfinding.WeightedGridGraph.#ctor(TmxLayer)">
      <summary>
   creates a WeightedGridGraph from a TiledTileLayer. Present tile are walls and empty tiles are passable.
   </summary>
      <param name="tiledLayer">Tiled layer.</param>
    </member>
    <member name="M:Nez.AI.Pathfinding.WeightedGridGraph.IsNodePassable(Point)">
      <summary>
   checks if the node is passable. Walls are impassable.
   </summary>
      <param name="node">The node.</param>
      <returns>
        <c>true</c>, if node passable was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.AI.Pathfinding.WeightedGridGraph.Search(Point,Point)">
      <summary>
   convenience shortcut for calling AStarPathfinder.search
   </summary>
      <param name="start">The start.</param>
      <param name="goal">The goal.</param>
      <returns>List&lt;Point&gt;.</returns>
    </member>
    <member name="T:Nez.AI.Pathfinding.WeightedPathfinder">
      <summary>
   calculates paths given an IWeightedGraph and start/goal positions
   </summary>
    </member>
    <member name="M:Nez.AI.Pathfinding.WeightedPathfinder.Search``1(IWeightedGraph{``0},``0,``0,Dictionary{``0, ``0}@)">
      <summary>
   Searches the specified graph.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="graph">The graph.</param>
      <param name="start">The start.</param>
      <param name="goal">The goal.</param>
      <param name="cameFrom">The came from.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.AI.Pathfinding.WeightedPathfinder.Search``1(IWeightedGraph{``0},``0,``0)">
      <summary>
   gets a path from start to goal if possible. If no path is found null is returned.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="graph">Graph.</param>
      <param name="start">Start.</param>
      <param name="goal">Goal.</param>
      <returns>List&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.Pathfinding.WeightedPathfinder.RecontructPath``1(Dictionary{``0, ``0},``0,``0)">
      <summary>
   reconstructs a path from the cameFrom Dictionary
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="cameFrom">Came from.</param>
      <param name="start">Start.</param>
      <param name="goal">Goal.</param>
      <returns>The path.</returns>
    </member>
    <member name="T:Nez.AI.UtilityAI.ActionExecutor`1">
      <summary>
   wraps an Action for use as an IAction without having to create a new class
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.UtilityAI.ActionExecutor`1.#ctor(Action{`0})">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.UtilityAI.ActionExecutor`1" /> class.
   </summary>
      <param name="action">The action.</param>
    </member>
    <member name="T:Nez.AI.UtilityAI.ActionWithOptions`2">
      <summary>
   Action that encompasses a List of options. The options are passed to Appraisals which score and locate the best option.
   </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="U">
      </typeparam>
    </member>
    <member name="M:Nez.AI.UtilityAI.ActionWithOptions`2.GetBestOption(`0,List{`1})">
      <summary>
   Gets the best option.
   </summary>
      <param name="context">The context.</param>
      <param name="options">The options.</param>
      <returns>U.</returns>
    </member>
    <member name="M:Nez.AI.UtilityAI.ActionWithOptions`2.Execute(`0)">
      <summary>
   Executes the specified context.
   </summary>
      <param name="context">The context.</param>
    </member>
    <member name="M:Nez.AI.UtilityAI.ActionWithOptions`2.AddScorer(IActionOptionAppraisal{`0, `1})">
      <summary>
   Adds the scorer.
   </summary>
      <param name="scorer">The scorer.</param>
      <returns>ActionWithOptions&lt;T, U&gt;.</returns>
    </member>
    <member name="T:Nez.AI.UtilityAI.CompositeAction`1">
      <summary>
   Action that contains a List of Actions that it will execute sequentially
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.UtilityAI.CompositeAction`1.AddAction(IAction{`0})">
      <summary>
   Adds the action.
   </summary>
      <param name="action">The action.</param>
      <returns>CompositeAction&lt;T&gt;.</returns>
    </member>
    <member name="T:Nez.AI.UtilityAI.IAction`1">
      <summary>
   Interface IAction
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.UtilityAI.IAction`1.Execute(`0)">
      <summary>
   Executes the specified context.
   </summary>
      <param name="context">The context.</param>
    </member>
    <member name="T:Nez.AI.UtilityAI.IActionOptionAppraisal`2">
      <summary>
   Appraisal for use with an ActionWithOptions
   </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="U">
      </typeparam>
    </member>
    <member name="M:Nez.AI.UtilityAI.IActionOptionAppraisal`2.GetScore(`0,`1)">
      <summary>
   Gets the score.
   </summary>
      <param name="context">The context.</param>
      <param name="option">The option.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="T:Nez.AI.UtilityAI.LogAction`1">
      <summary>
   Action that logs text
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.UtilityAI.LogAction`1.#ctor(System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.UtilityAI.LogAction`1" /> class.
   </summary>
      <param name="text">The text.</param>
    </member>
    <member name="T:Nez.AI.UtilityAI.ReasonerAction`1">
      <summary>
   Action that calls through to another Reasoner
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.UtilityAI.ReasonerAction`1.#ctor(Reasoner{`0})">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.UtilityAI.ReasonerAction`1" /> class.
   </summary>
      <param name="reasoner">The reasoner.</param>
    </member>
    <member name="T:Nez.AI.UtilityAI.ActionAppraisal`1">
      <summary>
   wraps a Func for use as an Appraisal without having to create a subclass
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.UtilityAI.ActionAppraisal`1.#ctor(Func{`0, System.Single})">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.UtilityAI.ActionAppraisal`1" /> class.
   </summary>
      <param name="appraisalAction">The appraisal action.</param>
    </member>
    <member name="T:Nez.AI.UtilityAI.IAppraisal`1">
      <summary>
   scorer for use with a Consideration
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.AI.UtilityAI.IAppraisal`1.GetScore(`0)">
      <summary>
   Gets the score.
   </summary>
      <param name="context">The context.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="T:Nez.AI.UtilityAI.AllOrNothingConsideration`1">
      <summary>
   Only scores if all child Appraisals score above the threshold
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="F:Nez.AI.UtilityAI.AllOrNothingConsideration`1.Threshold">
      <summary>
   The threshold
   </summary>
    </member>
    <member name="P:Nez.AI.UtilityAI.AllOrNothingConsideration`1.Action">
      <summary>
   Gets or sets the action.
   </summary>
      <value>The action.</value>
    </member>
    <member name="M:Nez.AI.UtilityAI.AllOrNothingConsideration`1.#ctor(System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.UtilityAI.AllOrNothingConsideration`1" /> class.
   </summary>
      <param name="threshold">The threshold.</param>
    </member>
    <member name="M:Nez.AI.UtilityAI.AllOrNothingConsideration`1.AddAppraisal(IAppraisal{`0})">
      <summary>
   Adds the appraisal.
   </summary>
      <param name="appraisal">The appraisal.</param>
      <returns>AllOrNothingConsideration&lt;T&gt;.</returns>
    </member>
    <member name="T:Nez.AI.UtilityAI.FixedScoreConsideration`1">
      <summary>
   always returns a fixed score. Serves double duty as a default Consideration.
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="F:Nez.AI.UtilityAI.FixedScoreConsideration`1.Score">
      <summary>
   The score
   </summary>
    </member>
    <member name="P:Nez.AI.UtilityAI.FixedScoreConsideration`1.Action">
      <summary>
   Gets or sets the action.
   </summary>
      <value>The action.</value>
    </member>
    <member name="M:Nez.AI.UtilityAI.FixedScoreConsideration`1.#ctor(System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.UtilityAI.FixedScoreConsideration`1" /> class.
   </summary>
      <param name="score">The score.</param>
    </member>
    <member name="T:Nez.AI.UtilityAI.IConsideration`1">
      <summary>
   encapsulates an Action and generates a score that a Reasoner can use to decide which Consideration to use
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="P:Nez.AI.UtilityAI.IConsideration`1.Action">
      <summary>
   Gets or sets the action.
   </summary>
      <value>The action.</value>
    </member>
    <member name="M:Nez.AI.UtilityAI.IConsideration`1.GetScore(`0)">
      <summary>
   Gets the score.
   </summary>
      <param name="context">The context.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="T:Nez.AI.UtilityAI.SumOfChildrenConsideration`1">
      <summary>
   Scores by summing the score of all child Appraisals
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="P:Nez.AI.UtilityAI.SumOfChildrenConsideration`1.Action">
      <summary>
   Gets or sets the action.
   </summary>
      <value>The action.</value>
    </member>
    <member name="T:Nez.AI.UtilityAI.ThresholdConsideration`1">
      <summary>
   Scores by summing child Appraisals until a child scores below the threshold
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="F:Nez.AI.UtilityAI.ThresholdConsideration`1.Threshold">
      <summary>
   The threshold
   </summary>
    </member>
    <member name="P:Nez.AI.UtilityAI.ThresholdConsideration`1.Action">
      <summary>
   Gets or sets the action.
   </summary>
      <value>The action.</value>
    </member>
    <member name="M:Nez.AI.UtilityAI.ThresholdConsideration`1.#ctor(System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.UtilityAI.ThresholdConsideration`1" /> class.
   </summary>
      <param name="threshold">The threshold.</param>
    </member>
    <member name="T:Nez.AI.UtilityAI.FirstScoreReasoner`1">
      <summary>
   The first Consideration to score above the score of the Default Consideration is selected
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:Nez.AI.UtilityAI.HighestScoreReasoner`1">
      <summary>
   The Consideration with the highest score is selected
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:Nez.AI.UtilityAI.Reasoner`1">
      <summary>
   the root of UtilityAI.
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="F:Nez.AI.UtilityAI.Reasoner`1.DefaultConsideration">
      <summary>
   The default consideration
   </summary>
    </member>
    <member name="M:Nez.AI.UtilityAI.Reasoner`1.Select(`0)">
      <summary>
   Selects the specified context.
   </summary>
      <param name="context">The context.</param>
      <returns>IAction&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.UtilityAI.Reasoner`1.AddConsideration(IConsideration{`0})">
      <summary>
   Adds the consideration.
   </summary>
      <param name="consideration">The consideration.</param>
      <returns>Reasoner&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.AI.UtilityAI.Reasoner`1.SetDefaultConsideration(IConsideration{`0})">
      <summary>
   Sets the default consideration.
   </summary>
      <param name="defaultConsideration">The default consideration.</param>
      <returns>Reasoner&lt;T&gt;.</returns>
    </member>
    <member name="T:Nez.AI.UtilityAI.UtilityAI`1">
      <summary>
   Class UtilityAI.
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="F:Nez.AI.UtilityAI.UtilityAI`1.UpdatePeriod">
      <summary>
   how often the behavior tree should update. An updatePeriod of 0.2 will make the tree update 5 times a second.
   </summary>
    </member>
    <member name="M:Nez.AI.UtilityAI.UtilityAI`1.#ctor(`0,Reasoner{`0},System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.AI.UtilityAI.UtilityAI`1" /> class.
   </summary>
      <param name="context">The context.</param>
      <param name="rootSelector">The root selector.</param>
      <param name="updatePeriod">The update period.</param>
    </member>
    <member name="M:Nez.AI.UtilityAI.UtilityAI`1.Tick">
      <summary>
   Ticks this instance.
   </summary>
    </member>
    <member name="T:Nez.BitmapFonts.BatcherBitmapFontExt">
      <summary>
   provides the full SpriteFont assortment of drawString methods
   </summary>
    </member>
    <member name="M:Nez.BitmapFonts.BatcherBitmapFontExt.DrawString(Batcher,BitmapFont,System.String,Vector2,Color)">
      <summary>
   Submit a text string of sprites for drawing in the current batch.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="bitmapFont">A font.</param>
      <param name="text">The text which will be drawn.</param>
      <param name="position">The drawing location on screen.</param>
      <param name="color">A color mask.</param>
    </member>
    <member name="M:Nez.BitmapFonts.BatcherBitmapFontExt.DrawString(Batcher,BitmapFont,System.String,Vector2,Color,System.Single,Vector2,System.Single,SpriteEffects,System.Single)">
      <summary>
   Submit a text string of sprites for drawing in the current batch.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="bitmapFont">A font.</param>
      <param name="text">The text which will be drawn.</param>
      <param name="position">The drawing location on screen.</param>
      <param name="color">A color mask.</param>
      <param name="rotation">A rotation of this string.</param>
      <param name="origin">Center of the rotation. 0,0 by default.</param>
      <param name="scale">A scaling of this string.</param>
      <param name="effects">Modificators for drawing. Can be combined.</param>
      <param name="layerDepth">A depth of the layer of this string.</param>
    </member>
    <member name="M:Nez.BitmapFonts.BatcherBitmapFontExt.DrawString(Batcher,BitmapFont,System.String,Vector2,Color,System.Single,Vector2,Vector2,SpriteEffects,System.Single)">
      <summary>
   Submit a text string of sprites for drawing in the current batch.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="bitmapFont">A font.</param>
      <param name="text">The text which will be drawn.</param>
      <param name="position">The drawing location on screen.</param>
      <param name="color">A color mask.</param>
      <param name="rotation">A rotation of this string.</param>
      <param name="origin">Center of the rotation. 0,0 by default.</param>
      <param name="scale">A scaling of this string.</param>
      <param name="effects">Modificators for drawing. Can be combined.</param>
      <param name="layerDepth">A depth of the layer of this string.</param>
    </member>
    <member name="M:Nez.BitmapFonts.BatcherBitmapFontExt.DrawString(Batcher,BitmapFont,StringBuilder,Vector2,Color)">
      <summary>
   Submit a text string of sprites for drawing in the current batch.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="bitmapFont">A font.</param>
      <param name="text">The text which will be drawn.</param>
      <param name="position">The drawing location on screen.</param>
      <param name="color">A color mask.</param>
    </member>
    <member name="M:Nez.BitmapFonts.BatcherBitmapFontExt.DrawString(Batcher,BitmapFont,StringBuilder,Vector2,Color,System.Single,Vector2,System.Single,SpriteEffects,System.Single)">
      <summary>
   Submit a text string of sprites for drawing in the current batch.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="bitmapFont">A font.</param>
      <param name="text">The text which will be drawn.</param>
      <param name="position">The drawing location on screen.</param>
      <param name="color">A color mask.</param>
      <param name="rotation">A rotation of this string.</param>
      <param name="origin">Center of the rotation. 0,0 by default.</param>
      <param name="scale">A scaling of this string.</param>
      <param name="effects">Modificators for drawing. Can be combined.</param>
      <param name="layerDepth">A depth of the layer of this string.</param>
    </member>
    <member name="M:Nez.BitmapFonts.BatcherBitmapFontExt.DrawString(Batcher,BitmapFont,StringBuilder,Vector2,Color,System.Single,Vector2,Vector2,SpriteEffects,System.Single)">
      <summary>
   Submit a text string of sprites for drawing in the current batch.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="bitmapFont">A font.</param>
      <param name="text">The text which will be drawn.</param>
      <param name="position">The drawing location on screen.</param>
      <param name="color">A color mask.</param>
      <param name="rotation">A rotation of this string.</param>
      <param name="origin">Center of the rotation. 0,0 by default.</param>
      <param name="scale">A scaling of this string.</param>
      <param name="effects">Modificators for drawing. Can be combined.</param>
      <param name="layerDepth">A depth of the layer of this string.</param>
    </member>
    <member name="M:Nez.BitmapFonts.BatcherBitmapFontExt.DrawGlyphs(Batcher,BitmapFontEnumerator,Vector2,Color,System.Single,Vector2,Vector2,System.Single)">
      <summary>
   Draws the glyphs.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="glyphs">The glyphs.</param>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
      <param name="rotation">The rotation.</param>
      <param name="origin">The origin.</param>
      <param name="scale">The scale.</param>
      <param name="layerDepth">The layer depth.</param>
    </member>
    <member name="T:Nez.BitmapFonts.BitmapFont">
      <summary> Class BitmapFont. Implements the <see cref="T:System.IDisposable" /> Implements the <see cref="T:Nez.IFont" /></summary>
      <seealso cref="T:System.IDisposable" />
      <seealso cref="T:Nez.IFont" />
      <summary> Class BitmapFont. Implements the <see cref="T:System.IDisposable" /> Implements the <see cref="T:Nez.IFont" /></summary>
      <seealso cref="T:System.IDisposable" />
      <seealso cref="T:Nez.IFont" />
      <summary> Class BitmapFont. Implements the <see cref="T:System.IDisposable" /> Implements the <see cref="T:Nez.IFont" /></summary>
      <seealso cref="T:System.IDisposable" />
      <seealso cref="T:Nez.IFont" />
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.AlphaChannel">
      <summary>
   alpha channel.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.BaseHeight">
      <summary>
   number of pixels from the absolute top of the line to the base of the characters.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.BlueChannel">
      <summary>
   blue channel.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.Bold">
      <summary>
   The bold
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.Characters">
      <summary>
   characters that comprise the font.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.Charset">
      <summary>
   name of the OEM charset used.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.FamilyName">
      <summary>
   name of the true type font.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.FontSize">
      <summary>
   size of the font.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.GreenChannel">
      <summary>
   green channel.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.Italic">
      <summary>
   The italic
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.Kernings">
      <summary>
   character kernings for the font.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.LineHeight">
      <summary>
   distance in pixels between each line of text.
   </summary>
    </member>
    <member name="P:Nez.BitmapFonts.BitmapFont.LineSpacing">
      <summary>
   line height of the font
   </summary>
      <value>The height of the line.</value>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.OutlineSize">
      <summary>
   outline thickness for the characters.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.Packed">
      <summary>
   Gets or sets a value indicating whether the monochrome charaters have been packed into each of the texture channels.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.Padding">
      <summary>
   padding for each character.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.Pages">
      <summary>
   texture pages for the font.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.Textures">
      <summary>
   houses the Textures for each Page, with the same index as the Page.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.RedChannel">
      <summary>
   red channel.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.Smoothed">
      <summary>
   Gets or sets a value indicating whether the font is smoothed.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.Spacing">
      <summary>
   spacing for each character.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.StretchedHeight">
      <summary>
   font height stretch.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.SuperSampling">
      <summary>
   level of super sampling used by the font.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.TextureSize">
      <summary>
   size of the texture images used by the font.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.Unicode">
      <summary>
   The unicode
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFont.DefaultCharacter">
      <summary>
   The default character
   </summary>
    </member>
    <member name="P:Nez.BitmapFonts.BitmapFont.Item(System.Char)">
      <summary>
   Index to get items within thsi collection using array index syntax.
   </summary>
      <param name="character">The character.</param>
      <returns>Character.</returns>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.Initialize(System.Boolean)">
      <summary>
   Initializes the specified premultiply alpha.
   </summary>
      <param name="premultiplyAlpha">if set to <c>true</c> [premultiply alpha].</param>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.GetKerning(System.Char,System.Char)">
      <summary>
   Gets the kerning for the specified character combination.
   </summary>
      <param name="previous">The previous character.</param>
      <param name="current">The current character.</param>
      <returns>The spacing between the specified characters.</returns>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.ContainsCharacter(System.Char)">
      <summary>
   Determines whether the specified character contains character.
   </summary>
      <param name="character">The character.</param>
      <returns>
        <c>true</c> if the specified character contains character; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.HasCharacter(System.Char)">
      <summary>
   returns true if the character exists in the font or false if it does not
   </summary>
      <param name="character">The character.</param>
      <returns>
        <c>true</c>, if character was hased, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.WrapText(System.String,System.Single)">
      <summary>
   Wraps the text.
   </summary>
      <param name="text">The text.</param>
      <param name="maxLineWidth">Maximum width of the line.</param>
      <returns>System.String.</returns>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.TruncateText(System.String,System.String,System.Single)">
      <summary>
   truncates text and returns a new string with ellipsis appended if necessary. This method ignores all
   line breaks.
   </summary>
      <param name="text">Text.</param>
      <param name="ellipsis">Ellipsis.</param>
      <param name="maxLineWidth">Max line width.</param>
      <returns>The text.</returns>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.MeasureString(System.String)">
      <summary>
   returns the size in pixels of text when rendered in this font
   </summary>
      <param name="text">Text.</param>
      <returns>The string.</returns>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.MeasureString(StringBuilder)">
      <summary>
   returns the size in pixels of text when rendered in this font
   </summary>
      <param name="text">Text.</param>
      <returns>The string.</returns>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.MeasureString(System.String,System.Single)">
      <summary>
   Measures the string.
   </summary>
      <param name="text">The text.</param>
      <param name="maxWidth">The maximum width.</param>
      <returns>Point.</returns>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.MeasureString(StringBuilder,System.Single)">
      <summary>
   Measures the string.
   </summary>
      <param name="text">The text.</param>
      <param name="maxWidth">The maximum width.</param>
      <returns>Point.</returns>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.MeasureString(FontCharacterSource@,System.Single)">
      <summary>
   Provides the size, in pixels, of the specified text when drawn with this font, automatically wrapping to keep within the specified with.
   </summary>
      <param name="text">The text to measure.</param>
      <param name="maxWidth">The maximum width.</param>
      <returns>The size, in pixels, of <paramref name="text" /> drawn with this font.</returns>
      <remarks>The MeasureString method uses the <paramref name="maxWidth" /> parameter to automatically wrap when determining text size.</remarks>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.Dispose">
      <summary>
   Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
   </summary>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.GetGlyphs(System.String)">
      <summary>
   Gets the glyphs.
   </summary>
      <param name="text">The text.</param>
      <returns>BitmapFontEnumerator.</returns>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.GetGlyphs(StringBuilder)">
      <summary>
   Gets the glyphs.
   </summary>
      <param name="text">The text.</param>
      <returns>BitmapFontEnumerator.</returns>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.GetGlyphs(FontCharacterSource@)">
      <summary>
   Gets the glyphs.
   </summary>
      <param name="text">The text.</param>
      <returns>BitmapFontEnumerator.</returns>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.DrawInto(Batcher,System.String,Vector2,Color,System.Single,Vector2,Vector2,SpriteEffects,System.Single)">
      <summary>
   Draws the into.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="text">The text.</param>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
      <param name="rotation">The rotation.</param>
      <param name="origin">The origin.</param>
      <param name="scale">The scale.</param>
      <param name="effect">The effect.</param>
      <param name="depth">The depth.</param>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.DrawInto(Batcher,StringBuilder,Vector2,Color,System.Single,Vector2,Vector2,SpriteEffects,System.Single)">
      <summary>
   Draws the into.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="text">The text.</param>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
      <param name="rotation">The rotation.</param>
      <param name="origin">The origin.</param>
      <param name="scale">The scale.</param>
      <param name="effect">The effect.</param>
      <param name="depth">The depth.</param>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.DrawInto(Batcher,FontCharacterSource@,Vector2,Color,System.Single,Vector2,Vector2,SpriteEffects,System.Single)">
      <summary>
   Draws the into.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="text">The text.</param>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
      <param name="rotation">The rotation.</param>
      <param name="origin">The origin.</param>
      <param name="scale">The scale.</param>
      <param name="effect">The effect.</param>
      <param name="depth">The depth.</param>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.Load(Stream)">
      <summary>
   Load font information from the specified <see cref="T:System.IO.Stream" />.
   </summary>
      <param name="stream">The stream to load.</param>
      <exception cref="T:System.ArgumentNullException">stream</exception>
      <exception cref="T:System.ArgumentException">Stream must be seekable in order to determine file format. - stream</exception>
      <exception cref="T:System.IO.InvalidDataException">Unknown file format.</exception>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.Load(System.String)">
      <summary>
   Load font information from the specified file.
   </summary>
      <param name="filename">The file name to load.</param>
      <exception cref="T:System.ArgumentNullException">filename</exception>
      <exception cref="T:System.IO.FileNotFoundException">
      </exception>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.LoadText(System.String)">
      <summary>
   Loads font information from the specified string.
   </summary>
      <param name="text">String containing the font to load.</param>
      <remarks>The source data must be in BMFont text format.</remarks>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.LoadText(Stream)">
      <summary>
   Loads font information from the specified stream.
   </summary>
      <param name="stream">The stream containing the font to load.</param>
      <exception cref="T:System.ArgumentNullException">stream</exception>
      <remarks>The source data must be in BMFont text format.</remarks>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.LoadText(TextReader)">
      <summary>
   Loads font information from the specified <see cref="T:System.IO.TextReader" />.
   </summary>
      <param name="reader">The <strong>TextReader</strong> used to feed the data into the font.</param>
      <exception cref="T:System.ArgumentNullException">reader</exception>
      <remarks>The source data must be in BMFont text format.</remarks>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.LoadXml(System.String)">
      <summary>
   Loads font information from the specified string.
   </summary>
      <param name="xml">String containing the font to load.</param>
      <remarks>The source data must be in BMFont XML format.</remarks>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.LoadXml(Stream)">
      <summary>
   Loads font information from the specified stream. The source data must be in BMFont XML format.
   </summary>
      <param name="stream">The stream.</param>
      <exception cref="T:System.ArgumentNullException">stream</exception>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFont.LoadXml(TextReader)">
      <summary>
   Loads font information from the specified <see cref="T:System.IO.TextReader" />.
   </summary>
      <param name="reader">The reader.</param>
      <exception cref="T:System.ArgumentNullException">reader</exception>
    </member>
    <member name="T:Nez.BitmapFonts.BitmapFontGlyph">
      <summary>
   Struct BitmapFontGlyph
   </summary>
    </member>
    <member name="T:Nez.BitmapFonts.BitmapFontEnumerator">
      <summary>
   returned by <seealso cref="M:Nez.BitmapFonts.BitmapFont.GetGlyphs(System.String)" />, providing a way to iterate over a string. Can be drawn with
   <seealso cref="T:Nez.BitmapFonts.BatcherBitmapFontExt" /> or by iterating and drawing each glyph.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFontGlyph.Position">
      <summary>
   The position
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFontGlyph.Character">
      <summary>
   The character
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFontGlyph.Texture">
      <summary>
   The texture
   </summary>
    </member>
    <member name="P:Nez.BitmapFonts.BitmapFontEnumerator.Current">
      <summary>
   Gets the current.
   </summary>
      <value>The current.</value>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFontEnumerator.#ctor(BitmapFont,FontCharacterSource@)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.BitmapFonts.BitmapFontEnumerator" /> struct.
   </summary>
      <param name="font">The font.</param>
      <param name="text">The text.</param>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFontEnumerator.Reset">
      <summary>
   Sets the enumerator to its initial position, which is before the first element in the collection.
   </summary>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFontEnumerator.Dispose">
      <summary>
   Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
   </summary>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFontEnumerator.MoveNext">
      <summary>
   Advances the enumerator to the next element of the collection.
   </summary>
      <returns>
        <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFontEnumerator.GetEnumerator">
      <summary>
   Gets the enumerator.
   </summary>
      <returns>BitmapFontEnumerator.</returns>
    </member>
    <member name="T:Nez.BitmapFonts.BitmapFontLoader">
      <summary>
   Parsing class for bitmap fonts generated by AngelCode BMFont
   </summary>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFontLoader.LoadFontFromFile(System.String,System.Boolean)">
      <summary>
   Loads a bitmap font from a file, attempting nto auto detect the file type
   </summary>
      <param name="filename">Name of the file to load.</param>
      <param name="premultiplyAlpha">if set to <c>true</c> [premultiply alpha].</param>
      <returns>A <see cref="T:Nez.BitmapFonts.BitmapFont" /> containing the loaded data.</returns>
      <exception cref="T:System.IO.InvalidDataException">Unknown file format.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Thrown when the requested file is not present.</exception>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFontLoader.LoadFontFromTextFile(System.String,System.Boolean)">
      <summary>
   Loads a bitmap font from a file containing font data in text format.
   </summary>
      <param name="filename">Name of the file to load.</param>
      <param name="premultiplyAlpha">if set to <c>true</c> [premultiply alpha].</param>
      <returns>A <see cref="T:Nez.BitmapFonts.BitmapFont" /> containing the loaded data.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Thrown when the requested file is not present.</exception>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFontLoader.LoadFontFromXmlFile(System.String,System.Boolean)">
      <summary>
   Loads a bitmap font from a file containing font data in XML format.
   </summary>
      <param name="filename">Name of the file to load.</param>
      <param name="premultiplyAlpha">if set to <c>true</c> [premultiply alpha].</param>
      <returns>A <see cref="T:Nez.BitmapFonts.BitmapFont" /> containing the loaded data.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Thrown when the requested file is not present.</exception>
    </member>
    <member name="T:Nez.BitmapFonts.BitmapFontReader">
      <summary>
   Legacy MonoGame Pipeline reader. This exists as legacy support to load the embedded Nez default font into the
   new runtime BitmapFont class
   </summary>
    </member>
    <member name="T:Nez.BitmapFonts.BitmapFontRegion">
      <summary>
   Class BitmapFontRegion.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFontRegion.Character">
      <summary>
   The character
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFontRegion.Sprite">
      <summary>
   The sprite
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFontRegion.XOffset">
      <summary>
   The x offset
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFontRegion.YOffset">
      <summary>
   The y offset
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.BitmapFontRegion.XAdvance">
      <summary>
   The x advance
   </summary>
    </member>
    <member name="P:Nez.BitmapFonts.BitmapFontRegion.Width">
      <summary>
   Gets the width.
   </summary>
      <value>The width.</value>
    </member>
    <member name="P:Nez.BitmapFonts.BitmapFontRegion.Height">
      <summary>
   Gets the height.
   </summary>
      <value>The height.</value>
    </member>
    <member name="M:Nez.BitmapFonts.BitmapFontRegion.#ctor(Sprite,System.Char,System.Int32,System.Int32,System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.BitmapFonts.BitmapFontRegion" /> class.
   </summary>
      <param name="textureRegion">The texture region.</param>
      <param name="character">The character.</param>
      <param name="xOffset">The x offset.</param>
      <param name="yOffset">The y offset.</param>
      <param name="xAdvance">The x advance.</param>
    </member>
    <member name="T:Nez.BitmapFonts.BMFontConverter">
      <summary>
   Class BMFontConverter.
   </summary>
    </member>
    <member name="M:Nez.BitmapFonts.BMFontConverter.LoadSpriteFontFromBitmapFont(System.String)">
      <summary>
   Converts a BitmapFont to a SpriteFont
   </summary>
      <param name="filename">The filename.</param>
      <returns>SpriteFont.</returns>
      <exception cref="T:System.Exception">Found multiple textures in font file {filename}. Only single texture fonts are supported.</exception>
    </member>
    <member name="M:Nez.BitmapFonts.BMFontConverter.LoadSpriteFontFromBitmapFont(BitmapFont,Texture2D)">
      <summary>
   converts a BitmapFont to a SpriteFont
   </summary>
      <param name="font">The font.</param>
      <param name="texture">The texture.</param>
      <returns>SpriteFont.</returns>
    </member>
    <member name="T:Nez.BitmapFonts.Character">
      <summary>
   Represents the definition of a single character in a <see cref="T:Nez.BitmapFonts.BitmapFont" /></summary>
    </member>
    <member name="F:Nez.BitmapFonts.Character.Bounds">
      <summary>
   bounds of the character image in the source texture.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.Character.Channel">
      <summary>
   texture channel where the character image is found.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.Character.Char">
      <summary>
   character.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.Character.Offset">
      <summary>
   offset when copying the image from the texture to the screen.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.Character.TexturePage">
      <summary>
   texture page where the character image is found.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.Character.XAdvance">
      <summary>
   value used to advance the current position after drawing the character.
   </summary>
    </member>
    <member name="M:Nez.BitmapFonts.Character.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.BitmapFonts.Kerning">
      <summary>
   Represents the font kerning between two characters.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.Kerning.Amount">
      <summary>
   Gets or sets how much the x position should be adjusted when drawing the second character immediately following the first.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.Kerning.FirstCharacter">
      <summary>
   The first character
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.Kerning.SecondCharacter">
      <summary>
   The second character
   </summary>
    </member>
    <member name="M:Nez.BitmapFonts.Kerning.#ctor(System.Char,System.Char,System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.BitmapFonts.Kerning" /> struct.
   </summary>
      <param name="firstCharacter">The first character.</param>
      <param name="secondCharacter">The second character.</param>
      <param name="amount">The amount.</param>
    </member>
    <member name="M:Nez.BitmapFonts.Kerning.Equals(System.Object)">
      <summary>
   Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
   </summary>
      <param name="obj">The object to compare with the current instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.BitmapFonts.Kerning.Equals(Kerning)">
      <summary>
   Indicates whether the current object is equal to another object of the same type.
   </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Nez.BitmapFonts.Kerning.GetHashCode">
      <summary>
   Returns a hash code for this instance.
   </summary>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="M:Nez.BitmapFonts.Kerning.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.BitmapFonts.Padding">
      <summary>
   Represents padding or margin information associated with an element.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.Padding.Bottom">
      <summary>
   The bottom
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.Padding.Left">
      <summary>
   The left
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.Padding.Right">
      <summary>
   The right
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.Padding.Top">
      <summary>
   The top
   </summary>
    </member>
    <member name="M:Nez.BitmapFonts.Padding.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.BitmapFonts.Padding" /> struct.
   </summary>
      <param name="left">The left.</param>
      <param name="top">The top.</param>
      <param name="right">The right.</param>
      <param name="bottom">The bottom.</param>
    </member>
    <member name="M:Nez.BitmapFonts.Padding.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.BitmapFonts.Page">
      <summary>
   Represents a texture page.
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.Page.Filename">
      <summary>
   The filename
   </summary>
    </member>
    <member name="F:Nez.BitmapFonts.Page.Id">
      <summary>
   The identifier
   </summary>
    </member>
    <member name="M:Nez.BitmapFonts.Page.#ctor(System.Int32,System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.BitmapFonts.Page" /> struct.
   </summary>
      <param name="id">The identifier.</param>
      <param name="filename">The filename.</param>
    </member>
    <member name="M:Nez.BitmapFonts.Page.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.ParticleDesigner.ParticleEmitterConfigLoader">
      <summary>
   Class ParticleEmitterConfigLoader.
   </summary>
    </member>
    <member name="M:Nez.ParticleDesigner.ParticleEmitterConfigLoader.Load(System.String)">
      <summary>
   parses a ParticleDesigner pex file or one exported from the Nez.Samples exporter or from Particle Editor:
   http://onebyonedesign.com/flash/particleeditor/
   </summary>
      <param name="name">The name.</param>
      <returns>ParticleEmitterConfig.</returns>
    </member>
    <member name="T:Nez.Sprites.SpriteAtlasLoader">
      <summary>
   Class SpriteAtlasLoader.
   </summary>
    </member>
    <member name="M:Nez.Sprites.SpriteAtlasLoader.ParseSpriteAtlas(System.String,System.Boolean)">
      <summary>
   parses a .atlas file and loads up a SpriteAtlas with it's associated Texture
   </summary>
      <param name="dataFile">The data file.</param>
      <param name="premultiplyAlpha">if set to <c>true</c> [premultiply alpha].</param>
      <returns>SpriteAtlas.</returns>
    </member>
    <member name="T:Nez.Sprites.SpriteAnimation">
      <summary>
   Class SpriteAnimation.
   </summary>
    </member>
    <member name="F:Nez.Sprites.SpriteAnimation.Sprites">
      <summary>
   The sprites
   </summary>
    </member>
    <member name="F:Nez.Sprites.SpriteAnimation.FrameRate">
      <summary>
   The frame rate
   </summary>
    </member>
    <member name="M:Nez.Sprites.SpriteAnimation.#ctor(Sprite[],System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Sprites.SpriteAnimation" /> class.
   </summary>
      <param name="sprites">The sprites.</param>
      <param name="frameRate">The frame rate.</param>
    </member>
    <member name="T:Nez.Sprites.SpriteAtlas">
      <summary>
   Class SpriteAtlas.
   Implements the <see cref="T:System.IDisposable" /></summary>
      <seealso cref="T:System.IDisposable" />
    </member>
    <member name="F:Nez.Sprites.SpriteAtlas.Names">
      <summary>
   The names
   </summary>
    </member>
    <member name="F:Nez.Sprites.SpriteAtlas.Sprites">
      <summary>
   The sprites
   </summary>
    </member>
    <member name="F:Nez.Sprites.SpriteAtlas.AnimationNames">
      <summary>
   The animation names
   </summary>
    </member>
    <member name="F:Nez.Sprites.SpriteAtlas.SpriteAnimations">
      <summary>
   The sprite animations
   </summary>
    </member>
    <member name="M:Nez.Sprites.SpriteAtlas.GetSprite(System.String)">
      <summary>
   Gets the sprite.
   </summary>
      <param name="name">The name.</param>
      <returns>Sprite.</returns>
    </member>
    <member name="M:Nez.Sprites.SpriteAtlas.GetAnimation(System.String)">
      <summary>
   Gets the animation.
   </summary>
      <param name="name">The name.</param>
      <returns>SpriteAnimation.</returns>
    </member>
    <member name="T:Nez.Tiled.TmxLayer">
      <summary> Class TmxLayer. Implements the <see cref="T:Nez.Tiled.ITmxLayer" /></summary>
      <seealso cref="T:Nez.Tiled.ITmxLayer" />
    </member>
    <member name="M:Nez.Tiled.TmxLayer.GetTile(System.Int32,System.Int32)">
      <summary>
   gets the TmxLayerTile at the x/y coordinates. Note that these are tile coordinates not world coordinates!
   </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
      <returns>The tile.</returns>
    </member>
    <member name="M:Nez.Tiled.TmxLayer.GetTileAtWorldPosition(Vector2)">
      <summary>
   gets the TmxLayerTile at the given world position
   </summary>
      <param name="pos">The position.</param>
      <returns>TmxLayerTile.</returns>
    </member>
    <member name="M:Nez.Tiled.TmxLayer.GetCollisionRectangles">
      <summary>
   Returns a list of rectangles in tile space, where any non-null tile is combined into bounding regions
   </summary>
      <returns>List&lt;Rectangle&gt;.</returns>
    </member>
    <member name="M:Nez.Tiled.TmxLayer.FindBoundsRect(System.Int32,System.Int32,System.Int32,System.Nullable{System.Boolean}[])">
      <summary>
   Finds the largest bounding rect around tiles between startX and endX, starting at startY and going
   down as far as possible
   </summary>
      <param name="startX">The start x.</param>
      <param name="endX">The end x.</param>
      <param name="startY">The start y.</param>
      <param name="checkedIndexes">The checked indexes.</param>
      <returns>Rectangle.</returns>
    </member>
    <member name="M:Nez.Tiled.TmxLayer.GetTilesIntersectingBounds(Rectangle)">
      <summary>
   gets a List of all the TiledTiles that intersect the passed in Rectangle. The returned List can be put back in the pool via ListPool.free.
   </summary>
      <param name="bounds">The bounds.</param>
      <returns>List&lt;TmxLayerTile&gt;.</returns>
    </member>
    <member name="M:Nez.Tiled.TmxLayer.SetTile(TmxLayerTile)">
      <summary>
   sets the tile and updates its tileset. If you change a tiles gid to one in a different Tileset you must
   call this method or update the TmxLayerTile.tileset manually!
   </summary>
      <param name="tile">Tile.</param>
      <returns>The tile.</returns>
    </member>
    <member name="M:Nez.Tiled.TmxLayer.RemoveTile(System.Int32,System.Int32)">
      <summary>
   nulls out the tile at the x/y coordinates
   </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
    </member>
    <member name="T:Nez.Tiled.TmxMap">
      <summary> contains runtime querying and other helper methods seperate from the tmx parsing in the other partial </summary>
      <summary> Class TmxMap. Implements the <see cref="T:Nez.Tiled.TmxDocument" /> Implements the <see cref="T:System.IDisposable" /></summary>
      <seealso cref="T:Nez.Tiled.TmxDocument" />
      <seealso cref="T:System.IDisposable" />
    </member>
    <member name="M:Nez.Tiled.TmxMap.GetTilesetForTileGid(System.Int32)">
      <summary>
   gets the TiledTileset for the given tileId
   </summary>
      <param name="gid">Identifier.</param>
      <returns>The tileset for tile identifier.</returns>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:Nez.Tiled.TmxMap.GetTilesetTile(System.Int32)">
      <summary>
   returns the TmxTilesetTile for the given id or null if none exists. TmxTilesetTiles exist only for animated tiles
   and tiles with properties set.
   </summary>
      <param name="gid">Identifier.</param>
      <returns>The tileset tile.</returns>
    </member>
    <member name="M:Nez.Tiled.TmxMap.GetLayer(System.String)">
      <summary>
   gets the TiledLayer by name
   </summary>
      <param name="name">Name.</param>
      <returns>The layer.</returns>
    </member>
    <member name="M:Nez.Tiled.TmxMap.GetLayer``1(System.Int32)">
      <summary>
   gets the ITmxLayer by index
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="index">Index.</param>
      <returns>The layer.</returns>
    </member>
    <member name="M:Nez.Tiled.TmxMap.GetLayer``1(System.String)">
      <summary>
   gets the ITmxLayer by name
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="name">Name.</param>
      <returns>The layer.</returns>
    </member>
    <member name="M:Nez.Tiled.TmxMap.GetObjectGroup(System.String)">
      <summary>
   gets the TmxObjectGroup with the given name
   </summary>
      <param name="name">Name.</param>
      <returns>The object group.</returns>
    </member>
    <member name="M:Nez.Tiled.TmxMap.WorldToTilePosition(Vector2,System.Boolean)">
      <summary>
   converts from world to tile position clamping to the tilemap bounds
   </summary>
      <param name="pos">Position.</param>
      <param name="clampToTilemapBounds">if set to <c>true</c> [clamp to tilemap bounds].</param>
      <returns>The to tile position.</returns>
    </member>
    <member name="M:Nez.Tiled.TmxMap.WorldToTilePositionX(System.Single,System.Boolean)">
      <summary>
   converts from world to tile position clamping to the tilemap bounds
   </summary>
      <param name="x">The x coordinate.</param>
      <param name="clampToTilemapBounds">if set to <c>true</c> [clamp to tilemap bounds].</param>
      <returns>The to tile position x.</returns>
    </member>
    <member name="M:Nez.Tiled.TmxMap.WorldToTilePositionY(System.Single,System.Boolean)">
      <summary>
   converts from world to tile position clamping to the tilemap bounds
   </summary>
      <param name="y">The y coordinate.</param>
      <param name="clampToTilemapBounds">if set to <c>true</c> [clamp to tilemap bounds].</param>
      <returns>The to tile position y.</returns>
    </member>
    <member name="M:Nez.Tiled.TmxMap.TileToWorldPosition(Point)">
      <summary>
   converts from tile to world position
   </summary>
      <param name="pos">Position.</param>
      <returns>The to world position.</returns>
    </member>
    <member name="M:Nez.Tiled.TmxMap.TileToWorldPositionX(System.Int32)">
      <summary>
   converts from tile to world position
   </summary>
      <param name="x">The x coordinate.</param>
      <returns>The to world position x.</returns>
      <exception cref="T:System.InvalidOperationException">Cannot convert tile position to world position for isometric or hexagonal maps with just an X coordinate.</exception>
    </member>
    <member name="M:Nez.Tiled.TmxMap.TileToWorldPositionY(System.Int32)">
      <summary>
   converts from tile to world position
   </summary>
      <param name="y">The y coordinate.</param>
      <returns>The to world position y.</returns>
      <exception cref="T:System.InvalidOperationException">Cannot convert tile position to world position for isometric or hexagonal maps with just an Y coordinate.</exception>
    </member>
    <member name="M:Nez.Tiled.TmxMap.ToWorldPosition(Vector2)">
      <summary>
   Converts a position to world position with respect to the Map's projection. Useful for placing Tiled Objects accurately.
   </summary>
      <param name="pos">The position.</param>
      <returns>The world position.</returns>
      <exception cref="T:System.NotImplementedException">Hexagonal map orientation not yet supported for conversion of position to world coordinates.</exception>
      <exception cref="T:System.NotImplementedException">Map orientation not supported for conversion of position to world coordinates.</exception>
    </member>
    <member name="T:Nez.Tiled.TiledMapLoader">
      <summary>
   Class TiledMapLoader.
   </summary>
    </member>
    <member name="M:Nez.Tiled.TiledMapLoader.LoadTmxMap(TmxMap,System.String)">
      <summary>
   Loads the TMX map.
   </summary>
      <param name="map">The map.</param>
      <param name="filepath">The filepath.</param>
      <returns>TmxMap.</returns>
    </member>
    <member name="M:Nez.Tiled.TiledMapLoader.LoadTmxMap(TmxMap,XDocument)">
      <summary>
   Loads the TMX map.
   </summary>
      <param name="map">The map.</param>
      <param name="xDoc">The x document.</param>
      <returns>TmxMap.</returns>
    </member>
    <member name="M:Nez.Tiled.TiledMapLoader.ParseTmxTileset(TmxMap,XElement,System.String)">
      <summary>
   Parses the TMX tileset.
   </summary>
      <param name="map">The map.</param>
      <param name="xTileset">The x tileset.</param>
      <param name="tmxDir">The TMX dir.</param>
      <returns>TmxTileset.</returns>
    </member>
    <member name="M:Nez.Tiled.TiledMapLoader.ParsePropertyDict(XContainer)">
      <summary>
   Parses the property dictionary.
   </summary>
      <param name="xmlProp">The XML property.</param>
      <returns>Dictionary&lt;System.String, System.String&gt;.</returns>
    </member>
    <member name="M:Nez.Tiled.TiledMapLoader.ParseColor(XAttribute)">
      <summary>
   Parses the color.
   </summary>
      <param name="xColor">Color of the x.</param>
      <returns>Color.</returns>
    </member>
    <member name="M:Nez.Tiled.TiledMapLoader.ParsePoint(System.String)">
      <summary>
   Parses the point.
   </summary>
      <param name="s">The s.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.Tiled.TiledMapLoader.ParsePoints(XElement)">
      <summary>
   Parses the points.
   </summary>
      <param name="xPoints">The x points.</param>
      <returns>Vector2[].</returns>
    </member>
    <member name="M:Nez.Tiled.TiledMapLoader.ParseTmxTileOffset(XElement)">
      <summary>
   Parses the TMX tile offset.
   </summary>
      <param name="xTileOffset">The x tile offset.</param>
      <returns>TmxTileOffset.</returns>
    </member>
    <member name="M:Nez.Tiled.TiledMapLoader.ParseTmxTerrain(XElement)">
      <summary>
   Parses the TMX terrain.
   </summary>
      <param name="xTerrain">The x terrain.</param>
      <returns>TmxTerrain.</returns>
    </member>
    <member name="M:Nez.Tiled.TiledMapLoader.ParseLayers(System.Object,XElement,TmxMap,System.Int32,System.Int32,System.String)">
      <summary>
   parses all the layers in xEle putting them in the container
   </summary>
      <param name="container">The container.</param>
      <param name="xEle">The x ele.</param>
      <param name="map">The map.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="tmxDirectory">The TMX directory.</param>
      <exception cref="T:System.InvalidOperationException">
      </exception>
    </member>
    <member name="M:Nez.Tiled.TiledMapLoader.LoadTmxLayer(TmxLayer,TmxMap,XElement,System.Int32,System.Int32)">
      <summary>
   Loads the TMX layer.
   </summary>
      <param name="layer">The layer.</param>
      <param name="map">The map.</param>
      <param name="xLayer">The x layer.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <returns>TmxLayer.</returns>
      <exception cref="T:System.Exception">TmxLayer: Unknown encoding.</exception>
    </member>
    <member name="M:Nez.Tiled.TiledMapLoader.LoadTmxObjectGroup(TmxObjectGroup,TmxMap,XElement)">
      <summary>
   Loads the TMX object group.
   </summary>
      <param name="group">The group.</param>
      <param name="map">The map.</param>
      <param name="xObjectGroup">The x object group.</param>
      <returns>TmxObjectGroup.</returns>
    </member>
    <member name="M:Nez.Tiled.TiledMapLoader.LoadTmxObject(TmxObject,TmxMap,XElement)">
      <summary>
   Loads the TMX object.
   </summary>
      <param name="obj">The object.</param>
      <param name="map">The map.</param>
      <param name="xObject">The x object.</param>
      <returns>TmxObject.</returns>
    </member>
    <member name="M:Nez.Tiled.TiledMapLoader.LoadTmxText(TmxText,XElement)">
      <summary>
   Loads the TMX text.
   </summary>
      <param name="text">The text.</param>
      <param name="xText">The x text.</param>
      <returns>TmxText.</returns>
    </member>
    <member name="M:Nez.Tiled.TiledMapLoader.LoadTmxAlignment(TmxAlignment,XElement)">
      <summary>
   Loads the TMX alignment.
   </summary>
      <param name="alignment">The alignment.</param>
      <param name="xText">The x text.</param>
      <returns>TmxAlignment.</returns>
    </member>
    <member name="M:Nez.Tiled.TiledMapLoader.LoadTmxImageLayer(TmxImageLayer,TmxMap,XElement,System.String)">
      <summary>
   Loads the TMX image layer.
   </summary>
      <param name="layer">The layer.</param>
      <param name="map">The map.</param>
      <param name="xImageLayer">The x image layer.</param>
      <param name="tmxDir">The TMX dir.</param>
      <returns>TmxImageLayer.</returns>
    </member>
    <member name="M:Nez.Tiled.TiledMapLoader.LoadTmxGroup(TmxGroup,TmxMap,XElement,System.Int32,System.Int32,System.String)">
      <summary>
   Loads the TMX group.
   </summary>
      <param name="group">The group.</param>
      <param name="map">The map.</param>
      <param name="xGroup">The x group.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="tmxDirectory">The TMX directory.</param>
      <returns>TmxGroup.</returns>
    </member>
    <member name="M:Nez.Tiled.TiledMapLoader.LoadTmxTileset(TmxTileset,TmxMap,XElement,System.Int32,System.String)">
      <summary>
   Loads the TMX tileset.
   </summary>
      <param name="tileset">The tileset.</param>
      <param name="map">The map.</param>
      <param name="xTileset">The x tileset.</param>
      <param name="firstGid">The first gid.</param>
      <param name="tsxDir">The TSX dir.</param>
      <returns>TmxTileset.</returns>
    </member>
    <member name="M:Nez.Tiled.TiledMapLoader.LoadTmxTilesetTile(TmxTilesetTile,TmxTileset,XElement,TmxList{TmxTerrain},System.String)">
      <summary>
   Loads the TMX tileset tile.
   </summary>
      <param name="tile">The tile.</param>
      <param name="tileset">The tileset.</param>
      <param name="xTile">The x tile.</param>
      <param name="Terrains">The terrains.</param>
      <param name="tmxDir">The TMX dir.</param>
      <returns>TmxTilesetTile.</returns>
    </member>
    <member name="M:Nez.Tiled.TiledMapLoader.LoadTmxAnimationFrame(TmxAnimationFrame,XElement)">
      <summary>
   Loads the TMX animation frame.
   </summary>
      <param name="frame">The frame.</param>
      <param name="xFrame">The x frame.</param>
      <returns>TmxAnimationFrame.</returns>
    </member>
    <member name="M:Nez.Tiled.TiledMapLoader.LoadTmxImage(TmxImage,XElement,System.String)">
      <summary>
   Loads the TMX image.
   </summary>
      <param name="image">The image.</param>
      <param name="xImage">The x image.</param>
      <param name="tmxDir">The TMX dir.</param>
      <returns>TmxImage.</returns>
      <exception cref="T:System.NotSupportedException">Stream Data loading is not yet supported</exception>
    </member>
    <member name="T:Nez.Tiled.TiledRendering">
      <summary>
   helper class to deal with rendering Tiled maps
   </summary>
    </member>
    <member name="M:Nez.Tiled.TiledRendering.RenderMap(TmxMap,Batcher,Vector2,Vector2,System.Single,RectangleF)">
      <summary>
   naively renders every layer present in the tilemap
   </summary>
      <param name="map">The map.</param>
      <param name="batcher">The batcher.</param>
      <param name="position">The position.</param>
      <param name="scale">The scale.</param>
      <param name="layerDepth">The layer depth.</param>
      <param name="cameraClipBounds">The camera clip bounds.</param>
    </member>
    <member name="M:Nez.Tiled.TiledRendering.RenderLayer(ITmxLayer,Batcher,Vector2,Vector2,System.Single,RectangleF)">
      <summary>
   renders the ITmxLayer by calling through to the concrete type's render method
   </summary>
      <param name="layer">The layer.</param>
      <param name="batcher">The batcher.</param>
      <param name="position">The position.</param>
      <param name="scale">The scale.</param>
      <param name="layerDepth">The layer depth.</param>
      <param name="cameraClipBounds">The camera clip bounds.</param>
    </member>
    <member name="M:Nez.Tiled.TiledRendering.RenderLayer(TmxLayer,Batcher,Vector2,Vector2,System.Single)">
      <summary>
   renders all tiles with no camera culling performed
   </summary>
      <param name="layer">The layer.</param>
      <param name="batcher">The batcher.</param>
      <param name="position">The position.</param>
      <param name="scale">The scale.</param>
      <param name="layerDepth">The layer depth.</param>
    </member>
    <member name="M:Nez.Tiled.TiledRendering.RenderLayer(TmxLayer,Batcher,Vector2,Vector2,System.Single,RectangleF)">
      <summary>
   renders all tiles that are inside <paramref name="cameraClipBounds" /></summary>
      <param name="layer">The layer.</param>
      <param name="batcher">The batcher.</param>
      <param name="position">The position.</param>
      <param name="scale">The scale.</param>
      <param name="layerDepth">The layer depth.</param>
      <param name="cameraClipBounds">The camera clip bounds.</param>
    </member>
    <member name="M:Nez.Tiled.TiledRendering.RenderTile(TmxLayerTile,Batcher,Vector2,Vector2,System.Single,System.Single,Color,System.Single,OrientationType,System.Int32,System.Int32)">
      <summary>
   Renders the tile.
   </summary>
      <param name="tile">The tile.</param>
      <param name="batcher">The batcher.</param>
      <param name="position">The position.</param>
      <param name="scale">The scale.</param>
      <param name="tileWidth">Width of the tile.</param>
      <param name="tileHeight">Height of the tile.</param>
      <param name="color">The color.</param>
      <param name="layerDepth">The layer depth.</param>
      <param name="orientation">The orientation.</param>
      <param name="mapWidth">Width of the map.</param>
      <param name="mapHeight">Height of the map.</param>
      <exception cref="T:System.NotImplementedException">Staggered Tiled maps are not yet supported.</exception>
    </member>
    <member name="M:Nez.Tiled.TiledRendering.RenderObjectGroup(TmxObjectGroup,Batcher,Vector2,Vector2,System.Single)">
      <summary>
   Renders the object group.
   </summary>
      <param name="objGroup">The object group.</param>
      <param name="batcher">The batcher.</param>
      <param name="position">The position.</param>
      <param name="scale">The scale.</param>
      <param name="layerDepth">The layer depth.</param>
    </member>
    <member name="M:Nez.Tiled.TiledRendering.RenderImageLayer(TmxImageLayer,Batcher,Vector2,Vector2,System.Single)">
      <summary>
   Renders the image layer.
   </summary>
      <param name="layer">The layer.</param>
      <param name="batcher">The batcher.</param>
      <param name="position">The position.</param>
      <param name="scale">The scale.</param>
      <param name="layerDepth">The layer depth.</param>
    </member>
    <member name="M:Nez.Tiled.TiledRendering.RenderGroup(TmxGroup,Batcher,Vector2,Vector2,System.Single)">
      <summary>
   Renders the group.
   </summary>
      <param name="group">The group.</param>
      <param name="batcher">The batcher.</param>
      <param name="position">The position.</param>
      <param name="scale">The scale.</param>
      <param name="layerDepth">The layer depth.</param>
    </member>
    <member name="T:Nez.Tiled.TmxGroup">
      <summary>
   Class TmxGroup.
   Implements the <see cref="T:Nez.Tiled.ITmxLayer" /></summary>
      <seealso cref="T:Nez.Tiled.ITmxLayer" />
    </member>
    <member name="F:Nez.Tiled.TmxGroup.map">
      <summary>
   The map
   </summary>
    </member>
    <member name="P:Nez.Tiled.TmxGroup.Name">
      <summary>
   Gets or sets the name.
   </summary>
      <value>The name.</value>
    </member>
    <member name="P:Nez.Tiled.TmxGroup.Opacity">
      <summary>
   Gets or sets the opacity.
   </summary>
      <value>The opacity.</value>
    </member>
    <member name="P:Nez.Tiled.TmxGroup.Visible">
      <summary>
   Gets or sets a value indicating whether this <see cref="T:Nez.Tiled.TmxGroup" /> is visible.
   </summary>
      <value>
        <c>true</c> if visible; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Tiled.TmxGroup.OffsetX">
      <summary>
   Gets or sets the offset x.
   </summary>
      <value>The offset x.</value>
    </member>
    <member name="P:Nez.Tiled.TmxGroup.OffsetY">
      <summary>
   Gets or sets the offset y.
   </summary>
      <value>The offset y.</value>
    </member>
    <member name="P:Nez.Tiled.TmxGroup.ParallaxFactorX">
      <summary>
   Gets or sets the parallax factor x.
   </summary>
      <value>The parallax factor x.</value>
    </member>
    <member name="P:Nez.Tiled.TmxGroup.ParallaxFactorY">
      <summary>
   Gets or sets the parallax factor y.
   </summary>
      <value>The parallax factor y.</value>
    </member>
    <member name="F:Nez.Tiled.TmxGroup.Layers">
      <summary>
   The layers
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxGroup.TileLayers">
      <summary>
   The tile layers
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxGroup.ObjectGroups">
      <summary>
   The object groups
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxGroup.ImageLayers">
      <summary>
   The image layers
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxGroup.Groups">
      <summary>
   The groups
   </summary>
    </member>
    <member name="P:Nez.Tiled.TmxGroup.Properties">
      <summary>
   Gets or sets the properties.
   </summary>
      <value>The properties.</value>
    </member>
    <member name="T:Nez.Tiled.TmxImageLayer">
      <summary>
   Class TmxImageLayer.
   Implements the <see cref="T:Nez.Tiled.ITmxLayer" /></summary>
      <seealso cref="T:Nez.Tiled.ITmxLayer" />
    </member>
    <member name="F:Nez.Tiled.TmxImageLayer.Map">
      <summary>
   The map
   </summary>
    </member>
    <member name="P:Nez.Tiled.TmxImageLayer.Name">
      <summary>
   Gets or sets the name.
   </summary>
      <value>The name.</value>
    </member>
    <member name="P:Nez.Tiled.TmxImageLayer.Visible">
      <summary>
   Gets or sets a value indicating whether this <see cref="T:Nez.Tiled.TmxImageLayer" /> is visible.
   </summary>
      <value>
        <c>true</c> if visible; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Tiled.TmxImageLayer.Opacity">
      <summary>
   Gets or sets the opacity.
   </summary>
      <value>The opacity.</value>
    </member>
    <member name="P:Nez.Tiled.TmxImageLayer.OffsetX">
      <summary>
   Gets or sets the offset x.
   </summary>
      <value>The offset x.</value>
    </member>
    <member name="P:Nez.Tiled.TmxImageLayer.OffsetY">
      <summary>
   Gets or sets the offset y.
   </summary>
      <value>The offset y.</value>
    </member>
    <member name="P:Nez.Tiled.TmxImageLayer.ParallaxFactorX">
      <summary>
   Gets or sets the parallax factor x.
   </summary>
      <value>The parallax factor x.</value>
    </member>
    <member name="P:Nez.Tiled.TmxImageLayer.ParallaxFactorY">
      <summary>
   Gets or sets the parallax factor y.
   </summary>
      <value>The parallax factor y.</value>
    </member>
    <member name="F:Nez.Tiled.TmxImageLayer.Width">
      <summary>
   The width
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxImageLayer.Height">
      <summary>
   The height
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxImageLayer.Image">
      <summary>
   The image
   </summary>
    </member>
    <member name="P:Nez.Tiled.TmxImageLayer.Properties">
      <summary>
   Gets or sets the properties.
   </summary>
      <value>The properties.</value>
    </member>
    <member name="T:Nez.Tiled.ITmxLayer">
      <summary>
   Interface ITmxLayer
   Extends the <see cref="T:Nez.Tiled.ITmxElement" /></summary>
      <seealso cref="T:Nez.Tiled.ITmxElement" />
    </member>
    <member name="P:Nez.Tiled.ITmxLayer.OffsetX">
      <summary>
   Gets the offset x.
   </summary>
      <value>The offset x.</value>
    </member>
    <member name="P:Nez.Tiled.ITmxLayer.OffsetY">
      <summary>
   Gets the offset y.
   </summary>
      <value>The offset y.</value>
    </member>
    <member name="P:Nez.Tiled.ITmxLayer.Opacity">
      <summary>
   Gets the opacity.
   </summary>
      <value>The opacity.</value>
    </member>
    <member name="P:Nez.Tiled.ITmxLayer.Visible">
      <summary>
   Gets a value indicating whether this <see cref="T:Nez.Tiled.ITmxLayer" /> is visible.
   </summary>
      <value>
        <c>true</c> if visible; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Tiled.ITmxLayer.ParallaxFactorX">
      <summary>
   Gets the parallax factor x.
   </summary>
      <value>The parallax factor x.</value>
    </member>
    <member name="P:Nez.Tiled.ITmxLayer.ParallaxFactorY">
      <summary>
   Gets the parallax factor y.
   </summary>
      <value>The parallax factor y.</value>
    </member>
    <member name="P:Nez.Tiled.ITmxLayer.Properties">
      <summary>
   Gets the properties.
   </summary>
      <value>The properties.</value>
    </member>
    <member name="T:Nez.Tiled.TmxLayerTile">
      <summary>
   Class TmxLayerTile.
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxLayer.Map">
      <summary>
   The map
   </summary>
    </member>
    <member name="P:Nez.Tiled.TmxLayer.Name">
      <summary>
   Gets or sets the name.
   </summary>
      <value>The name.</value>
    </member>
    <member name="P:Nez.Tiled.TmxLayer.Opacity">
      <summary>
   Gets the opacity.
   </summary>
      <value>The opacity.</value>
    </member>
    <member name="P:Nez.Tiled.TmxLayer.Visible">
      <summary>
   Gets a value indicating whether this <see cref="T:Nez.Tiled.ITmxLayer" /> is visible.
   </summary>
      <value>
        <c>true</c> if visible; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Tiled.TmxLayer.OffsetX">
      <summary>
   Gets the offset x.
   </summary>
      <value>The offset x.</value>
    </member>
    <member name="P:Nez.Tiled.TmxLayer.OffsetY">
      <summary>
   Gets the offset y.
   </summary>
      <value>The offset y.</value>
    </member>
    <member name="P:Nez.Tiled.TmxLayer.Offset">
      <summary>
   Gets the offset.
   </summary>
      <value>The offset.</value>
    </member>
    <member name="P:Nez.Tiled.TmxLayer.ParallaxFactorX">
      <summary>
   Gets the parallax factor x.
   </summary>
      <value>The parallax factor x.</value>
    </member>
    <member name="P:Nez.Tiled.TmxLayer.ParallaxFactorY">
      <summary>
   Gets the parallax factor y.
   </summary>
      <value>The parallax factor y.</value>
    </member>
    <member name="P:Nez.Tiled.TmxLayer.ParallaxFactor">
      <summary>
   Gets the parallax factor.
   </summary>
      <value>The parallax factor.</value>
    </member>
    <member name="P:Nez.Tiled.TmxLayer.Properties">
      <summary>
   Gets the properties.
   </summary>
      <value>The properties.</value>
    </member>
    <member name="F:Nez.Tiled.TmxLayer.Width">
      <summary>
   width in tiles for this layer. Always the same as the map width for fixed-size maps.
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxLayer.Height">
      <summary>
   height in tiles for this layer. Always the same as the map height for fixed-size maps.
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxLayer.Tiles">
      <summary>
   The tiles
   </summary>
    </member>
    <member name="M:Nez.Tiled.TmxLayer.GetTileWithGid(System.Int32)">
      <summary>
   returns the TmxLayerTile with gid. This is a slow lookup so cache it!
   </summary>
      <param name="gid">The gid.</param>
      <returns>TmxLayerTile.</returns>
    </member>
    <member name="F:Nez.Tiled.TmxLayerTile.Tileset">
      <summary>
   The tileset
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxLayerTile.Gid">
      <summary>
   The gid
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxLayerTile.X">
      <summary>
   The x
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxLayerTile.Y">
      <summary>
   The y
   </summary>
    </member>
    <member name="P:Nez.Tiled.TmxLayerTile.Position">
      <summary>
   Gets the position.
   </summary>
      <value>The position.</value>
    </member>
    <member name="F:Nez.Tiled.TmxLayerTile.HorizontalFlip">
      <summary>
   The horizontal flip
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxLayerTile.VerticalFlip">
      <summary>
   The vertical flip
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxLayerTile.DiagonalFlip">
      <summary>
   The diagonal flip
   </summary>
    </member>
    <member name="P:Nez.Tiled.TmxLayerTile.TilesetTile">
      <summary>
   gets the TmxTilesetTile for this TmxLayerTile if it exists. TmxTilesetTile only exist for animated tiles and tiles with attached
   properties.
   </summary>
      <value>The tileset tile.</value>
    </member>
    <member name="M:Nez.Tiled.TmxLayerTile.#ctor(TmxMap,System.UInt32,System.Int32,System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Tiled.TmxLayerTile" /> class.
   </summary>
      <param name="map">The map.</param>
      <param name="id">The identifier.</param>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
    </member>
    <member name="T:Nez.Tiled.OrientationType">
      <summary>
   Enum OrientationType
   </summary>
    </member>
    <member name="T:Nez.Tiled.StaggerAxisType">
      <summary>
   Enum StaggerAxisType
   </summary>
    </member>
    <member name="T:Nez.Tiled.StaggerIndexType">
      <summary>
   Enum StaggerIndexType
   </summary>
    </member>
    <member name="T:Nez.Tiled.RenderOrderType">
      <summary>
   Enum RenderOrderType
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxMap.Version">
      <summary>
   The version
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxMap.TiledVersion">
      <summary>
   The tiled version
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxMap.Width">
      <summary>
   The width
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxMap.Height">
      <summary>
   The height
   </summary>
    </member>
    <member name="P:Nez.Tiled.TmxMap.WorldWidth">
      <summary>
   Gets the width of the world.
   </summary>
      <value>The width of the world.</value>
    </member>
    <member name="P:Nez.Tiled.TmxMap.WorldHeight">
      <summary>
   Gets the height of the world.
   </summary>
      <value>The height of the world.</value>
    </member>
    <member name="F:Nez.Tiled.TmxMap.TileWidth">
      <summary>
   The tile width
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxMap.TileHeight">
      <summary>
   The tile height
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxMap.HexSideLength">
      <summary>
   The hexadecimal side length
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxMap.Orientation">
      <summary>
   The orientation
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxMap.StaggerAxis">
      <summary>
   The stagger axis
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxMap.StaggerIndex">
      <summary>
   The stagger index
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxMap.RenderOrder">
      <summary>
   The render order
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxMap.BackgroundColor">
      <summary>
   The background color
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxMap.NextObjectID">
      <summary>
   The next object identifier
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxMap.Layers">
      <summary>
   contains all of the ITmxLayers, regardless of their specific type. Note that layers in a TmxGroup will not
   be in this list. TmxGroup manages its own layers list.
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxMap.Tilesets">
      <summary>
   The tilesets
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxMap.TileLayers">
      <summary>
   The tile layers
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxMap.ObjectGroups">
      <summary>
   The object groups
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxMap.ImageLayers">
      <summary>
   The image layers
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxMap.Groups">
      <summary>
   The groups
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxMap.Properties">
      <summary>
   The properties
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxMap.MaxTileWidth">
      <summary>
   when we have an image tileset, tiles can be any size so we record the max size for culling
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxMap.MaxTileHeight">
      <summary>
   when we have an image tileset, tiles can be any size so we record the max size for culling
   </summary>
    </member>
    <member name="P:Nez.Tiled.TmxMap.RequiresLargeTileCulling">
      <summary>
   does this map have non-default tile sizes that would require special culling?
   </summary>
      <value>
        <c>true</c> if [requires large tile culling]; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:Nez.Tiled.TmxMap.Update">
      <summary>
   currently only used to tick all the Tilesets so they can update their animated tiles
   </summary>
    </member>
    <member name="F:Nez.Tiled.OrientationType.Unknown">
      <summary>
   The unknown
   </summary>
    </member>
    <member name="F:Nez.Tiled.OrientationType.Orthogonal">
      <summary>
   The orthogonal
   </summary>
    </member>
    <member name="F:Nez.Tiled.OrientationType.Isometric">
      <summary>
   The isometric
   </summary>
    </member>
    <member name="F:Nez.Tiled.OrientationType.Staggered">
      <summary>
   The staggered
   </summary>
    </member>
    <member name="F:Nez.Tiled.OrientationType.Hexagonal">
      <summary>
   The hexagonal
   </summary>
    </member>
    <member name="F:Nez.Tiled.StaggerAxisType.X">
      <summary>
   The x
   </summary>
    </member>
    <member name="F:Nez.Tiled.StaggerAxisType.Y">
      <summary>
   The y
   </summary>
    </member>
    <member name="F:Nez.Tiled.StaggerIndexType.Odd">
      <summary>
   The odd
   </summary>
    </member>
    <member name="F:Nez.Tiled.StaggerIndexType.Even">
      <summary>
   The even
   </summary>
    </member>
    <member name="F:Nez.Tiled.RenderOrderType.RightDown">
      <summary>
   The right down
   </summary>
    </member>
    <member name="F:Nez.Tiled.RenderOrderType.RightUp">
      <summary>
   The right up
   </summary>
    </member>
    <member name="F:Nez.Tiled.RenderOrderType.LeftDown">
      <summary>
   The left down
   </summary>
    </member>
    <member name="F:Nez.Tiled.RenderOrderType.LeftUp">
      <summary>
   The left up
   </summary>
    </member>
    <member name="T:Nez.Tiled.TmxObjectGroup">
      <summary>
   Class TmxObjectGroup.
   Implements the <see cref="T:Nez.Tiled.ITmxLayer" /></summary>
      <seealso cref="T:Nez.Tiled.ITmxLayer" />
    </member>
    <member name="T:Nez.Tiled.TmxObject">
      <summary>
   Class TmxObject.
   Implements the <see cref="T:Nez.Tiled.ITmxElement" /></summary>
      <seealso cref="T:Nez.Tiled.ITmxElement" />
    </member>
    <member name="T:Nez.Tiled.TmxText">
      <summary>
   Class TmxText.
   </summary>
    </member>
    <member name="T:Nez.Tiled.TmxAlignment">
      <summary>
   Class TmxAlignment.
   </summary>
    </member>
    <member name="T:Nez.Tiled.TmxObjectType">
      <summary>
   Enum TmxObjectType
   </summary>
    </member>
    <member name="T:Nez.Tiled.DrawOrderType">
      <summary>
   Enum DrawOrderType
   </summary>
    </member>
    <member name="T:Nez.Tiled.TmxHorizontalAlignment">
      <summary>
   Enum TmxHorizontalAlignment
   </summary>
    </member>
    <member name="T:Nez.Tiled.TmxVerticalAlignment">
      <summary>
   Enum TmxVerticalAlignment
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxObjectGroup.Map">
      <summary>
   The map
   </summary>
    </member>
    <member name="P:Nez.Tiled.TmxObjectGroup.Name">
      <summary>
   Gets or sets the name.
   </summary>
      <value>The name.</value>
    </member>
    <member name="P:Nez.Tiled.TmxObjectGroup.Opacity">
      <summary>
   Gets the opacity.
   </summary>
      <value>The opacity.</value>
    </member>
    <member name="P:Nez.Tiled.TmxObjectGroup.Visible">
      <summary>
   Gets a value indicating whether this <see cref="T:Nez.Tiled.ITmxLayer" /> is visible.
   </summary>
      <value>
        <c>true</c> if visible; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Tiled.TmxObjectGroup.OffsetX">
      <summary>
   Gets the offset x.
   </summary>
      <value>The offset x.</value>
    </member>
    <member name="P:Nez.Tiled.TmxObjectGroup.OffsetY">
      <summary>
   Gets the offset y.
   </summary>
      <value>The offset y.</value>
    </member>
    <member name="P:Nez.Tiled.TmxObjectGroup.ParallaxFactorX">
      <summary>
   Gets the parallax factor x.
   </summary>
      <value>The parallax factor x.</value>
    </member>
    <member name="P:Nez.Tiled.TmxObjectGroup.ParallaxFactorY">
      <summary>
   Gets the parallax factor y.
   </summary>
      <value>The parallax factor y.</value>
    </member>
    <member name="F:Nez.Tiled.TmxObjectGroup.Color">
      <summary>
   The color
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxObjectGroup.DrawOrder">
      <summary>
   The draw order
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxObjectGroup.Objects">
      <summary>
   The objects
   </summary>
    </member>
    <member name="P:Nez.Tiled.TmxObjectGroup.Properties">
      <summary>
   Gets the properties.
   </summary>
      <value>The properties.</value>
    </member>
    <member name="F:Nez.Tiled.TmxObject.Id">
      <summary>
   The identifier
   </summary>
    </member>
    <member name="P:Nez.Tiled.TmxObject.Name">
      <summary>
   Gets or sets the name.
   </summary>
      <value>The name.</value>
    </member>
    <member name="F:Nez.Tiled.TmxObject.ObjectType">
      <summary>
   The object type
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxObject.Type">
      <summary>
   The type
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxObject.X">
      <summary>
   The x
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxObject.Y">
      <summary>
   The y
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxObject.Width">
      <summary>
   The width
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxObject.Height">
      <summary>
   The height
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxObject.Rotation">
      <summary>
   The rotation
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxObject.Tile">
      <summary>
   The tile
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxObject.Visible">
      <summary>
   The visible
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxObject.Text">
      <summary>
   The text
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxObject.Points">
      <summary>
   The points
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxObject.Properties">
      <summary>
   The properties
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxText.FontFamily">
      <summary>
   The font family
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxText.PixelSize">
      <summary>
   The pixel size
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxText.Wrap">
      <summary>
   The wrap
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxText.Color">
      <summary>
   The color
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxText.Bold">
      <summary>
   The bold
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxText.Italic">
      <summary>
   The italic
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxText.Underline">
      <summary>
   The underline
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxText.Strikeout">
      <summary>
   The strikeout
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxText.Kerning">
      <summary>
   The kerning
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxText.Alignment">
      <summary>
   The alignment
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxText.Value">
      <summary>
   The value
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxAlignment.Horizontal">
      <summary>
   The horizontal
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxAlignment.Vertical">
      <summary>
   The vertical
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxObjectType.Basic">
      <summary>
   The basic
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxObjectType.Point">
      <summary>
   The point
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxObjectType.Tile">
      <summary>
   The tile
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxObjectType.Ellipse">
      <summary>
   The ellipse
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxObjectType.Polygon">
      <summary>
   The polygon
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxObjectType.Polyline">
      <summary>
   The polyline
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxObjectType.Text">
      <summary>
   The text
   </summary>
    </member>
    <member name="F:Nez.Tiled.DrawOrderType.UnknownOrder">
      <summary>
   The unknown order
   </summary>
    </member>
    <member name="F:Nez.Tiled.DrawOrderType.TopDown">
      <summary>
   The top down
   </summary>
    </member>
    <member name="F:Nez.Tiled.DrawOrderType.IndexOrder">
      <summary>
   The index order
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxHorizontalAlignment.Left">
      <summary>
   The left
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxHorizontalAlignment.Center">
      <summary>
   The center
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxHorizontalAlignment.Right">
      <summary>
   The right
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxHorizontalAlignment.Justify">
      <summary>
   The justify
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxVerticalAlignment.Top">
      <summary>
   The top
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxVerticalAlignment.Center">
      <summary>
   The center
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxVerticalAlignment.Bottom">
      <summary>
   The bottom
   </summary>
    </member>
    <member name="T:Nez.Tiled.TmxDocument">
      <summary>
   Class TmxDocument.
   </summary>
    </member>
    <member name="T:Nez.Tiled.ITmxElement">
      <summary>
   Interface ITmxElement
   </summary>
    </member>
    <member name="T:Nez.Tiled.TmxList`1">
      <summary>
   Class TmxList.
   Implements the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /></summary>
      <typeparam name="T">
      </typeparam>
      <seealso cref="T:System.Collections.ObjectModel.KeyedCollection`2" />
    </member>
    <member name="T:Nez.Tiled.TmxImage">
      <summary>
   Class TmxImage.
   Implements the <see cref="T:System.IDisposable" /></summary>
      <seealso cref="T:System.IDisposable" />
    </member>
    <member name="T:Nez.Tiled.TmxBase64Data">
      <summary>
   Class TmxBase64Data.
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxDocument.TmxDirectory">
      <summary>
   The TMX directory
   </summary>
    </member>
    <member name="M:Nez.Tiled.TmxDocument.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Tiled.TmxDocument" /> class.
   </summary>
    </member>
    <member name="P:Nez.Tiled.ITmxElement.Name">
      <summary>
   Gets the name.
   </summary>
      <value>The name.</value>
    </member>
    <member name="M:Nez.Tiled.TmxList`1.Add(`0)">
      <summary>
   Adds the specified t.
   </summary>
      <param name="t">The t.</param>
    </member>
    <member name="F:Nez.Tiled.TmxImage.Texture">
      <summary>
   The texture
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxImage.Source">
      <summary>
   The source
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxImage.Format">
      <summary>
   The format
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxImage.Data">
      <summary>
   The data
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxImage.Trans">
      <summary>
   The trans
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxImage.Width">
      <summary>
   The width
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxImage.Height">
      <summary>
   The height
   </summary>
    </member>
    <member name="M:Nez.Tiled.TmxImage.Dispose">
      <summary>
   Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
   </summary>
    </member>
    <member name="P:Nez.Tiled.TmxBase64Data.Data">
      <summary>
   Gets the data.
   </summary>
      <value>The data.</value>
    </member>
    <member name="M:Nez.Tiled.TmxBase64Data.#ctor(XElement)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Tiled.TmxBase64Data" /> class.
   </summary>
      <param name="xData">The x data.</param>
      <exception cref="T:System.Exception">TmxBase64Data: Only Base64-encoded data is supported.</exception>
      <exception cref="T:System.Exception">TmxBase64Data: Unknown compression.</exception>
    </member>
    <member name="T:Nez.Tiled.TmxTileset">
      <summary>
   Class TmxTileset.
   Implements the <see cref="T:Nez.Tiled.TmxDocument" />
   Implements the <see cref="T:Nez.Tiled.ITmxElement" /></summary>
      <seealso cref="T:Nez.Tiled.TmxDocument" />
      <seealso cref="T:Nez.Tiled.ITmxElement" />
    </member>
    <member name="T:Nez.Tiled.TmxTileOffset">
      <summary>
   Class TmxTileOffset.
   </summary>
    </member>
    <member name="T:Nez.Tiled.TmxTerrain">
      <summary>
   Class TmxTerrain.
   Implements the <see cref="T:Nez.Tiled.ITmxElement" /></summary>
      <seealso cref="T:Nez.Tiled.ITmxElement" />
    </member>
    <member name="F:Nez.Tiled.TmxTileset.Map">
      <summary>
   The map
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTileset.FirstGid">
      <summary>
   The first gid
   </summary>
    </member>
    <member name="P:Nez.Tiled.TmxTileset.Name">
      <summary>
   Gets the name.
   </summary>
      <value>The name.</value>
    </member>
    <member name="F:Nez.Tiled.TmxTileset.TileWidth">
      <summary>
   The tile width
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTileset.TileHeight">
      <summary>
   The tile height
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTileset.Spacing">
      <summary>
   The spacing
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTileset.Margin">
      <summary>
   The margin
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTileset.Columns">
      <summary>
   The columns
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTileset.TileCount">
      <summary>
   The tile count
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTileset.Tiles">
      <summary>
   The tiles
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTileset.TileOffset">
      <summary>
   The tile offset
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTileset.Properties">
      <summary>
   The properties
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTileset.Image">
      <summary>
   The image
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTileset.Terrains">
      <summary>
   The terrains
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTileset.TileRegions">
      <summary>
   cache of the source rectangles for each tile
   </summary>
    </member>
    <member name="M:Nez.Tiled.TmxTileset.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTileOffset.X">
      <summary>
   The x
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTileOffset.Y">
      <summary>
   The y
   </summary>
    </member>
    <member name="P:Nez.Tiled.TmxTerrain.Name">
      <summary>
   Gets the name.
   </summary>
      <value>The name.</value>
    </member>
    <member name="F:Nez.Tiled.TmxTerrain.Tile">
      <summary>
   The tile
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTerrain.Properties">
      <summary>
   The properties
   </summary>
    </member>
    <member name="T:Nez.Tiled.TmxTilesetTile">
      <summary>
   Class TmxTilesetTile.
   </summary>
    </member>
    <member name="T:Nez.Tiled.TmxAnimationFrame">
      <summary>
   Class TmxAnimationFrame.
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTilesetTile.Tileset">
      <summary>
   The tileset
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTilesetTile.Id">
      <summary>
   The identifier
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTilesetTile.TerrainEdges">
      <summary>
   The terrain edges
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTilesetTile.Probability">
      <summary>
   The probability
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTilesetTile.Type">
      <summary>
   The type
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTilesetTile.Properties">
      <summary>
   The properties
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTilesetTile.Image">
      <summary>
   The image
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTilesetTile.ObjectGroups">
      <summary>
   The object groups
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTilesetTile.AnimationFrames">
      <summary>
   The animation frames
   </summary>
    </member>
    <member name="P:Nez.Tiled.TmxTilesetTile.currentAnimationFrameGid">
      <summary>
   Gets the current animation frame gid.
   </summary>
      <value>The current animation frame gid.</value>
    </member>
    <member name="F:Nez.Tiled.TmxTilesetTile.IsDestructable">
      <summary>
   returns the value of an "nez:isDestructable" property if present in the properties dictionary
   </summary>
      <value>
        <c>true</c> if is destructable; otherwise, <c>false</c>.</value>
    </member>
    <member name="F:Nez.Tiled.TmxTilesetTile.IsSlope">
      <summary>
   returns the value of a "nez:isSlope" property if present in the properties dictionary
   </summary>
      <value>The is slope.</value>
    </member>
    <member name="F:Nez.Tiled.TmxTilesetTile.IsOneWayPlatform">
      <summary>
   returns the value of a "nez:isOneWayPlatform" property if present in the properties dictionary
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxTilesetTile.SlopeTopLeft">
      <summary>
   returns the value of a "nez:slopeTopLeft" property if present in the properties dictionary
   </summary>
      <value>The slope top left.</value>
    </member>
    <member name="F:Nez.Tiled.TmxTilesetTile.SlopeTopRight">
      <summary>
   returns the value of a "nez:slopeTopRight" property if present in the properties dictionary
   </summary>
      <value>The slope top right.</value>
    </member>
    <member name="M:Nez.Tiled.TmxTilesetTile.ProcessProperties">
      <summary>
   Processes the properties.
   </summary>
    </member>
    <member name="M:Nez.Tiled.TmxTilesetTile.UpdateAnimatedTiles">
      <summary>
   Updates the animated tiles.
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxAnimationFrame.Gid">
      <summary>
   The gid
   </summary>
    </member>
    <member name="F:Nez.Tiled.TmxAnimationFrame.Duration">
      <summary>
   The duration
   </summary>
    </member>
    <member name="T:Nez.Tiled.TmxLayerTileExt">
      <summary>
   Class TmxLayerTileExt.
   </summary>
    </member>
    <member name="M:Nez.Tiled.TmxLayerTileExt.IsSlope(TmxLayerTile)">
      <summary>
   passthrough to TilesetTile
   </summary>
      <param name="self">The self.</param>
      <returns>
        <c>true</c> if the specified self is slope; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.Tiled.TmxLayerTileExt.IsOneWayPlatform(TmxLayerTile)">
      <summary>
   passthrough to TilesetTile
   </summary>
      <param name="self">The self.</param>
      <returns>
        <c>true</c> if [is one way platform] [the specified self]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.Tiled.TmxLayerTileExt.GetSlopeTopLeft(TmxLayerTile)">
      <summary>
   returns the slope top left taking flipping into account. Exceptions if the tile is not a slope.
   </summary>
      <param name="self">The self.</param>
      <returns>System.Int32.</returns>
    </member>
    <member name="M:Nez.Tiled.TmxLayerTileExt.GetSlopeTopRight(TmxLayerTile)">
      <summary>
   returns the slope top right taking flipping into account. Exceptions if the tile is not a slope.
   </summary>
      <param name="self">The self.</param>
      <returns>System.Int32.</returns>
    </member>
    <member name="M:Nez.Tiled.TmxLayerTileExt.GetSlope(TmxLayerTile)">
      <summary>
   calculates the slope based on the slope top left/right
   </summary>
      <param name="self">The self.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tiled.TmxLayerTileExt.GetSlopeOffset(TmxLayerTile)">
      <summary>
   returns the slope position on the left side of the tile. b in the y = mx + b equation
   </summary>
      <param name="self">The self.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tiled.TmxLayerTileExt.GetHighestSlopeEdge(TmxLayerTile)">
      <summary>
   returns the edge on the side that has the tallest side
   </summary>
      <param name="self">The self.</param>
      <returns>Edge.</returns>
    </member>
    <member name="M:Nez.Tiled.TmxLayerTileExt.GetNearestEdge(TmxLayerTile,System.Int32)">
      <summary>
   returns the nearest edge to worldPosition
   </summary>
      <param name="self">The self.</param>
      <param name="worldPosition">The world position.</param>
      <returns>Edge.</returns>
    </member>
    <member name="T:Nez.Systems.NezContentManager">
      <summary>
   ContentManager subclass that also manages Effects from ogl files. Adds asynchronous loading of assets as well.
   </summary>
    </member>
    <member name="M:Nez.Systems.NezContentManager.#ctor(IServiceProvider,System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Systems.NezContentManager" /> class.
   </summary>
      <param name="serviceProvider">The service provider.</param>
      <param name="rootDirectory">The root directory.</param>
    </member>
    <member name="M:Nez.Systems.NezContentManager.#ctor(IServiceProvider)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Systems.NezContentManager" /> class.
   </summary>
      <param name="serviceProvider">The service provider.</param>
    </member>
    <member name="M:Nez.Systems.NezContentManager.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Systems.NezContentManager" /> class.
   </summary>
    </member>
    <member name="M:Nez.Systems.NezContentManager.LoadTexture(System.String,System.Boolean)">
      <summary>
   loads a Texture2D either from xnb or directly from a png/jpg. Note that xnb files should not contain the .xnb file
   extension or be preceded by "Content" in the path. png/jpg files should have the file extension and have an absolute
   path or a path starting with "Content".
   </summary>
      <param name="name">The name.</param>
      <param name="premultiplyAlpha">if set to <c>true</c> [premultiply alpha].</param>
      <returns>Texture2D.</returns>
    </member>
    <member name="M:Nez.Systems.NezContentManager.LoadSoundEffect(System.String)">
      <summary>
   loads a SoundEffect either from xnb or directly from a wav. Note that xnb files should not contain the .xnb file
   extension or be preceded by "Content" in the path. wav files should have the file extension and have an absolute
   path or a path starting with "Content".
   </summary>
      <param name="name">The name.</param>
      <returns>SoundEffect.</returns>
    </member>
    <member name="M:Nez.Systems.NezContentManager.LoadTiledMap(System.String)">
      <summary>
   loads a Tiled map
   </summary>
      <param name="name">The name.</param>
      <returns>TmxMap.</returns>
    </member>
    <member name="M:Nez.Systems.NezContentManager.LoadParticleEmitterConfig(System.String)">
      <summary>
   Loads a ParticleDesigner pex file
   </summary>
      <param name="name">The name.</param>
      <returns>Particles.ParticleEmitterConfig.</returns>
    </member>
    <member name="M:Nez.Systems.NezContentManager.LoadSpriteAtlas(System.String,System.Boolean)">
      <summary>
   Loads a SpriteAtlas created with the Sprite Atlas Packer tool
   </summary>
      <param name="name">The name.</param>
      <param name="premultiplyAlpha">if set to <c>true</c> [premultiply alpha].</param>
      <returns>SpriteAtlas.</returns>
    </member>
    <member name="M:Nez.Systems.NezContentManager.LoadBitmapFont(System.String,System.Boolean)">
      <summary>
   Loads a BitmapFont
   </summary>
      <param name="name">The name.</param>
      <param name="premultiplyAlpha">if set to <c>true</c> [premultiply alpha].</param>
      <returns>BitmapFont.</returns>
    </member>
    <member name="M:Nez.Systems.NezContentManager.LoadEffect(System.String)">
      <summary>
   loads an ogl effect directly from file and handles disposing of it when the ContentManager is disposed. Name should be the path
   relative to the Content folder or including the Content folder.
   </summary>
      <param name="name">Name.</param>
      <returns>The effect.</returns>
    </member>
    <member name="M:Nez.Systems.NezContentManager.LoadNezEffect``1">
      <summary>
   loads an embedded Nez effect. These are any of the Effect subclasses in the Nez/Graphics/Effects folder.
   Note that this will return a unique instance if you attempt to load the same Effect twice to avoid Effect duplication.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <returns>The nez effect.</returns>
    </member>
    <member name="M:Nez.Systems.NezContentManager.LoadEffect``1(System.String)">
      <summary>
   loads an ogl effect directly from file and handles disposing of it when the ContentManager is disposed. Name should the the path
   relative to the Content folder or including the Content folder. Effects must have a constructor that accepts GraphicsDevice and
   byte[]. Note that this will return a unique instance if you attempt to load the same Effect twice to avoid Effect duplication.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="name">Name.</param>
      <returns>The effect.</returns>
    </member>
    <member name="M:Nez.Systems.NezContentManager.LoadEffect``1(System.String,System.Byte[])">
      <summary>
   loads an ogl effect directly from its bytes and handles disposing of it when the ContentManager is disposed. Name should the the path
   relative to the Content folder or including the Content folder. Effects must have a constructor that accepts GraphicsDevice and
   byte[]. Note that this will return a unique instance if you attempt to load the same Effect twice to avoid Effect duplication.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="name">Name.</param>
      <param name="effectCode">The effect code.</param>
      <returns>The effect.</returns>
    </member>
    <member name="M:Nez.Systems.NezContentManager.LoadMonoGameEffect``1">
      <summary>
   loads and manages any Effect that is built-in to MonoGame such as BasicEffect, AlphaTestEffect, etc. Note that this will
   return a unique instance if you attempt to load the same Effect twice. If you intend to use the same Effect in multiple locations
   keep a reference to it and use it directly.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <returns>The mono game effect.</returns>
    </member>
    <member name="M:Nez.Systems.NezContentManager.LoadAsync``1(System.String,Action{``0})">
      <summary>
   loads an asset on a background thread with optional callback for when it is loaded. The callback will occur on the main thread.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="assetName">Asset name.</param>
      <param name="onLoaded">On loaded.</param>
    </member>
    <member name="M:Nez.Systems.NezContentManager.LoadAsync``1(System.String,Action{System.Object, ``0},System.Object)">
      <summary>
   loads an asset on a background thread with optional callback that includes a context parameter for when it is loaded.
   The callback will occur on the main thread.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="assetName">Asset name.</param>
      <param name="onLoaded">On loaded.</param>
      <param name="context">Context.</param>
    </member>
    <member name="M:Nez.Systems.NezContentManager.LoadAsync``1(System.String[],Action)">
      <summary>
   loads a group of assets on a background thread with optional callback for when it is loaded
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="assetNames">Asset names.</param>
      <param name="onLoaded">On loaded.</param>
    </member>
    <member name="M:Nez.Systems.NezContentManager.UnloadAsset``1(System.String)">
      <summary>
   removes assetName from LoadedAssets and Disposes of it
   disposeableAssets List.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="assetName">Asset name.</param>
    </member>
    <member name="M:Nez.Systems.NezContentManager.UnloadEffect(System.String)">
      <summary>
   unloads an Effect that was loaded via loadEffect, loadNezEffect or loadMonoGameEffect
   </summary>
      <param name="effectName">Effect.name</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Systems.NezContentManager.UnloadEffect(Effect)">
      <summary>
   unloads an Effect that was loaded via loadEffect, loadNezEffect or loadMonoGameEffect
   </summary>
      <param name="effect">The effect.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Systems.NezContentManager.IsAssetLoaded(System.String)">
      <summary>
   checks to see if an asset with assetName is loaded
   </summary>
      <param name="assetName">Asset name.</param>
      <returns>
        <c>true</c> if this instance is asset loaded the specified assetName; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.Systems.NezContentManager.GetPathForLoadedAsset(System.Object)">
      <summary>
   reverse lookup. Gets the asset path given the asset. This is useful for making editor and non-runtime stuff.
   </summary>
      <param name="asset">The asset.</param>
      <returns>System.String.</returns>
    </member>
    <member name="M:Nez.Systems.NezContentManager.Unload">
      <summary>
   override that disposes of all loaded Effects
   </summary>
    </member>
    <member name="T:Nez.Console.DebugConsole">
      <summary> Class DebugConsole. </summary>
    </member>
    <member name="F:Nez.Console.DebugConsole.Instance">
      <summary>
   The instance
   </summary>
    </member>
    <member name="F:Nez.Console.DebugConsole.RenderScale">
      <summary>
   controls the scale of the console
   </summary>
    </member>
    <member name="F:Nez.Console.DebugConsole.IsOpen">
      <summary>
   The is open
   </summary>
    </member>
    <member name="F:Nez.Console.DebugConsole.ConsoleKey">
      <summary>
   The console key
   </summary>
    </member>
    <member name="M:Nez.Console.DebugConsole.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Console.DebugConsole" /> class.
   </summary>
    </member>
    <member name="M:Nez.Console.DebugConsole.Log(Exception)">
      <summary>
   Logs the specified e.
   </summary>
      <param name="e">The e.</param>
    </member>
    <member name="M:Nez.Console.DebugConsole.Log(System.String,System.Object[])">
      <summary>
   Logs the specified format.
   </summary>
      <param name="format">The format.</param>
      <param name="args">The arguments.</param>
    </member>
    <member name="M:Nez.Console.DebugConsole.Log(System.Object)">
      <summary>
   Logs the specified object.
   </summary>
      <param name="obj">The object.</param>
    </member>
    <member name="M:Nez.Console.DebugConsole.Log(System.String)">
      <summary>
   Logs the specified string.
   </summary>
      <param name="str">The string.</param>
    </member>
    <member name="M:Nez.Console.DebugConsole.BindActionToFunctionKey(System.Int32,Action)">
      <summary>
   Binds the action to function key.
   </summary>
      <param name="functionKey">The function key.</param>
      <param name="action">The action.</param>
    </member>
    <member name="M:Nez.Console.DebugConsole.BindCommandToFunctionKey(System.Int32,System.String,System.String[])">
      <summary>
   binds a debug console command to a function key
   </summary>
      <param name="functionKey">The function (e.g. 1 for F1).</param>
      <param name="command">The name of the command.</param>
      <param name="args">Optional list of arguments.</param>
    </member>
    <member name="T:Nez.Console.CommandAttribute">
      <summary>
   add this attribute to any static method
   </summary>
    </member>
    <member name="F:Nez.Console.CommandAttribute.Name">
      <summary>
   The name
   </summary>
    </member>
    <member name="F:Nez.Console.CommandAttribute.Help">
      <summary>
   The help
   </summary>
    </member>
    <member name="M:Nez.Console.CommandAttribute.#ctor(System.String,System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Console.CommandAttribute" /> class.
   </summary>
      <param name="name">The name.</param>
      <param name="help">The help.</param>
    </member>
    <member name="T:Nez.BoolInspector">
      <summary>
   Class BoolInspector.
   Implements the <see cref="T:Nez.Inspector" /></summary>
      <seealso cref="T:Nez.Inspector" />
    </member>
    <member name="M:Nez.BoolInspector.Initialize(Table,Skin,System.Single)">
      <summary>
   used to setup the UI for the Inspector
   </summary>
      <param name="table">Table.</param>
      <param name="skin">Skin.</param>
      <param name="leftCellWidth">Width of the left cell.</param>
    </member>
    <member name="M:Nez.BoolInspector.Update">
      <summary>
   used to update the UI for the Inspector
   </summary>
    </member>
    <member name="T:Nez.ColorInspector">
      <summary>
   Class ColorInspector.
   Implements the <see cref="T:Nez.Inspector" /></summary>
      <seealso cref="T:Nez.Inspector" />
    </member>
    <member name="M:Nez.ColorInspector.Initialize(Table,Skin,System.Single)">
      <summary>
   used to setup the UI for the Inspector
   </summary>
      <param name="table">Table.</param>
      <param name="skin">Skin.</param>
      <param name="leftCellWidth">Width of the left cell.</param>
    </member>
    <member name="M:Nez.ColorInspector.Update">
      <summary>
   used to update the UI for the Inspector
   </summary>
    </member>
    <member name="T:Nez.EffectInspector">
      <summary>
   Class EffectInspector.
   Implements the <see cref="T:Nez.Inspector" /></summary>
      <seealso cref="T:Nez.Inspector" />
    </member>
    <member name="M:Nez.EffectInspector.Initialize(Table,Skin,System.Single)">
      <summary>
   used to setup the UI for the Inspector
   </summary>
      <param name="table">Table.</param>
      <param name="skin">Skin.</param>
      <param name="leftCellWidth">Width of the left cell.</param>
    </member>
    <member name="M:Nez.EffectInspector.Update">
      <summary>
   used to update the UI for the Inspector
   </summary>
    </member>
    <member name="T:Nez.EnumInspector">
      <summary>
   Class EnumInspector.
   Implements the <see cref="T:Nez.Inspector" /></summary>
      <seealso cref="T:Nez.Inspector" />
    </member>
    <member name="M:Nez.EnumInspector.Initialize(Table,Skin,System.Single)">
      <summary>
   used to setup the UI for the Inspector
   </summary>
      <param name="table">Table.</param>
      <param name="skin">Skin.</param>
      <param name="leftCellWidth">Width of the left cell.</param>
    </member>
    <member name="M:Nez.EnumInspector.Update">
      <summary>
   used to update the UI for the Inspector
   </summary>
    </member>
    <member name="T:Nez.FloatInspector">
      <summary>
   Class FloatInspector.
   Implements the <see cref="T:Nez.Inspector" /></summary>
      <seealso cref="T:Nez.Inspector" />
    </member>
    <member name="M:Nez.FloatInspector.Initialize(Table,Skin,System.Single)">
      <summary>
   used to setup the UI for the Inspector
   </summary>
      <param name="table">Table.</param>
      <param name="skin">Skin.</param>
      <param name="leftCellWidth">Width of the left cell.</param>
    </member>
    <member name="M:Nez.FloatInspector.Update">
      <summary>
   used to update the UI for the Inspector
   </summary>
    </member>
    <member name="T:Nez.Inspector">
      <summary>
   the heart of the inspector system. Subclasses of Inspector are responsible for setting up and managing the UI. Currently,
   custom type handling is not yet implemented.
   </summary>
    </member>
    <member name="M:Nez.Inspector.GetInspectableProperties(System.Object)">
      <summary>
   Gets the inspectable properties.
   </summary>
      <param name="target">The target.</param>
      <returns>List&lt;Inspector&gt;.</returns>
    </member>
    <member name="M:Nez.Inspector.GetTransformProperties(System.Object)">
      <summary>
   Gets the transform properties.
   </summary>
      <param name="transform">The transform.</param>
      <returns>List&lt;Inspector&gt;.</returns>
    </member>
    <member name="M:Nez.Inspector.SetTarget(System.Object,FieldInfo)">
      <summary>
   Sets the target.
   </summary>
      <param name="target">The target.</param>
      <param name="field">The field.</param>
    </member>
    <member name="M:Nez.Inspector.SetStructTarget(System.Object,Inspector,FieldInfo)">
      <summary>
   this version will first fetch the struct before getting/setting values on it when invoking the getter/setter
   </summary>
      <param name="target">Target.</param>
      <param name="parentInspector">The parent inspector.</param>
      <param name="field">Field.</param>
      <returns>The struct target.</returns>
    </member>
    <member name="M:Nez.Inspector.SetTarget(System.Object,PropertyInfo)">
      <summary>
   Sets the target.
   </summary>
      <param name="target">The target.</param>
      <param name="prop">The property.</param>
    </member>
    <member name="M:Nez.Inspector.SetStructTarget(System.Object,Inspector,PropertyInfo)">
      <summary>
   this version will first fetch the struct before getting/setting values on it when invoking the getter/setter
   </summary>
      <param name="target">Target.</param>
      <param name="parentInspector">The parent inspector.</param>
      <param name="prop">The property.</param>
      <returns>The struct target.</returns>
    </member>
    <member name="M:Nez.Inspector.SetTarget(System.Object,MethodInfo)">
      <summary>
   Sets the target.
   </summary>
      <param name="target">The target.</param>
      <param name="method">The method.</param>
    </member>
    <member name="M:Nez.Inspector.Initialize(Table,Skin,System.Single)">
      <summary>
   used to setup the UI for the Inspector
   </summary>
      <param name="table">Table.</param>
      <param name="skin">Skin.</param>
      <param name="leftCellWidth">Width of the left cell.</param>
    </member>
    <member name="M:Nez.Inspector.Update">
      <summary>
   used to update the UI for the Inspector
   </summary>
    </member>
    <member name="T:Nez.IntInspector">
      <summary>
   Class IntInspector.
   Implements the <see cref="T:Nez.Inspector" /></summary>
      <seealso cref="T:Nez.Inspector" />
    </member>
    <member name="M:Nez.IntInspector.Initialize(Table,Skin,System.Single)">
      <summary>
   used to setup the UI for the Inspector
   </summary>
      <param name="table">Table.</param>
      <param name="skin">Skin.</param>
      <param name="leftCellWidth">Width of the left cell.</param>
    </member>
    <member name="M:Nez.IntInspector.Update">
      <summary>
   used to update the UI for the Inspector
   </summary>
    </member>
    <member name="T:Nez.MethodInspector">
      <summary>
   Class MethodInspector.
   Implements the <see cref="T:Nez.Inspector" /></summary>
      <seealso cref="T:Nez.Inspector" />
    </member>
    <member name="M:Nez.MethodInspector.AreParametersValid(ParameterInfo[])">
      <summary>
   Ares the parameters valid.
   </summary>
      <param name="parameters">The parameters.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.MethodInspector.Initialize(Table,Skin,System.Single)">
      <summary>
   used to setup the UI for the Inspector
   </summary>
      <param name="table">Table.</param>
      <param name="skin">Skin.</param>
      <param name="leftCellWidth">Width of the left cell.</param>
    </member>
    <member name="M:Nez.MethodInspector.Update">
      <summary>
   used to update the UI for the Inspector
   </summary>
    </member>
    <member name="T:Nez.StringInspector">
      <summary>
   Class StringInspector.
   Implements the <see cref="T:Nez.Inspector" /></summary>
      <seealso cref="T:Nez.Inspector" />
    </member>
    <member name="M:Nez.StringInspector.Initialize(Table,Skin,System.Single)">
      <summary>
   used to setup the UI for the Inspector
   </summary>
      <param name="table">Table.</param>
      <param name="skin">Skin.</param>
      <param name="leftCellWidth">Width of the left cell.</param>
    </member>
    <member name="M:Nez.StringInspector.Update">
      <summary>
   used to update the UI for the Inspector
   </summary>
    </member>
    <member name="T:Nez.StructInspector">
      <summary>
   Class StructInspector.
   Implements the <see cref="T:Nez.Inspector" /></summary>
      <seealso cref="T:Nez.Inspector" />
    </member>
    <member name="M:Nez.StructInspector.Initialize(Table,Skin,System.Single)">
      <summary>
   used to setup the UI for the Inspector
   </summary>
      <param name="table">Table.</param>
      <param name="skin">Skin.</param>
      <param name="leftCellWidth">Width of the left cell.</param>
    </member>
    <member name="M:Nez.StructInspector.Update">
      <summary>
   used to update the UI for the Inspector
   </summary>
    </member>
    <member name="T:Nez.Vector2Inspector">
      <summary>
   Class Vector2Inspector.
   Implements the <see cref="T:Nez.Inspector" /></summary>
      <seealso cref="T:Nez.Inspector" />
    </member>
    <member name="M:Nez.Vector2Inspector.Initialize(Table,Skin,System.Single)">
      <summary>
   used to setup the UI for the Inspector
   </summary>
      <param name="table">Table.</param>
      <param name="skin">Skin.</param>
      <param name="leftCellWidth">Width of the left cell.</param>
    </member>
    <member name="M:Nez.Vector2Inspector.Update">
      <summary>
   used to update the UI for the Inspector
   </summary>
    </member>
    <member name="T:Nez.InspectableAttribute">
      <summary>
   Attribute that is used to indicate that the field/property should be present in the inspector
   </summary>
    </member>
    <member name="T:Nez.NotInspectableAttribute">
      <summary>
   Attribute that is used to indicate that the field/property should not be present in the inspector
   </summary>
    </member>
    <member name="T:Nez.InspectorCallableAttribute">
      <summary>
   adding this to a method will expose it to the inspector if it has 0 params or 1 param of a supported type: int, float, string
   and bool are currently supported.
   </summary>
    </member>
    <member name="T:Nez.TooltipAttribute">
      <summary>
   displays a tooltip when hovering over the label of any inspectable elements
   </summary>
    </member>
    <member name="T:Nez.RangeAttribute">
      <summary>
   Range attribute. Tells the inspector you want a slider to be displayed for a float/int
   </summary>
    </member>
    <member name="T:Nez.CustomInspectorAttribute">
      <summary>
   putting this attribute on a class and specifying a subclass of Inspector lets you create custom inspectors for any type. When
   the Inspector finds a field/property of the type with the attribute on it the inspectorType will be instantiated and used.
   Inspectors are only active in DEBUG builds so make sure to wrap your custom inspector subclass in #if DEBUG/#endif.
   </summary>
    </member>
    <member name="F:Nez.TooltipAttribute.Tooltip">
      <summary>
   The tooltip
   </summary>
    </member>
    <member name="M:Nez.TooltipAttribute.#ctor(System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.TooltipAttribute" /> class.
   </summary>
      <param name="tooltip">The tooltip.</param>
    </member>
    <member name="F:Nez.RangeAttribute.MinValue">
      <summary>
   The minimum value
   </summary>
    </member>
    <member name="F:Nez.RangeAttribute.MaxValue">
      <summary>
   The maximum value
   </summary>
    </member>
    <member name="F:Nez.RangeAttribute.StepSize">
      <summary>
   The step size
   </summary>
    </member>
    <member name="F:Nez.RangeAttribute.UseDragVersion">
      <summary>
   The use drag version
   </summary>
    </member>
    <member name="M:Nez.RangeAttribute.#ctor(System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.RangeAttribute" /> class.
   </summary>
      <param name="minValue">The minimum value.</param>
    </member>
    <member name="M:Nez.RangeAttribute.#ctor(System.Single,System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.RangeAttribute" /> class.
   </summary>
      <param name="minValue">The minimum value.</param>
      <param name="maxValue">The maximum value.</param>
      <param name="stepSize">Size of the step.</param>
    </member>
    <member name="M:Nez.RangeAttribute.#ctor(System.Single,System.Single,System.Boolean)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.RangeAttribute" /> class.
   </summary>
      <param name="minValue">The minimum value.</param>
      <param name="maxValue">The maximum value.</param>
      <param name="useDragFloat">if set to <c>true</c> [use drag float].</param>
    </member>
    <member name="M:Nez.RangeAttribute.#ctor(System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.RangeAttribute" /> class.
   </summary>
      <param name="minValue">The minimum value.</param>
      <param name="maxValue">The maximum value.</param>
    </member>
    <member name="F:Nez.CustomInspectorAttribute.InspectorType">
      <summary>
   The inspector type
   </summary>
    </member>
    <member name="M:Nez.CustomInspectorAttribute.#ctor(Type)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.CustomInspectorAttribute" /> class.
   </summary>
      <param name="inspectorType">Type of the inspector.</param>
    </member>
    <member name="T:Nez.InspectorList">
      <summary>
   container for a Component/PostProcessor/Transform and all of its inspectable properties
   </summary>
    </member>
    <member name="F:Nez.InspectorList.Target">
      <summary>
   The target
   </summary>
    </member>
    <member name="F:Nez.InspectorList.Name">
      <summary>
   The name
   </summary>
    </member>
    <member name="M:Nez.InspectorList.#ctor(System.Object)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.InspectorList" /> class.
   </summary>
      <param name="target">The target.</param>
    </member>
    <member name="M:Nez.InspectorList.#ctor(Transform)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.InspectorList" /> class.
   </summary>
      <param name="transform">The transform.</param>
    </member>
    <member name="M:Nez.InspectorList.Initialize(Table,Skin,System.Single)">
      <summary>
   Initializes the specified table.
   </summary>
      <param name="table">The table.</param>
      <param name="skin">The skin.</param>
      <param name="leftCellWidth">Width of the left cell.</param>
    </member>
    <member name="M:Nez.InspectorList.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="T:Nez.RuntimeInspector">
      <summary>
   Class RuntimeInspector.
   Implements the <see cref="T:System.IDisposable" /></summary>
      <seealso cref="T:System.IDisposable" />
    </member>
    <member name="M:Nez.RuntimeInspector.#ctor">
      <summary>
   creates a PostProcessor inspector
   </summary>
    </member>
    <member name="M:Nez.RuntimeInspector.#ctor(Entity)">
      <summary>
   creates an Entity inspector
   </summary>
      <param name="entity">Entity.</param>
    </member>
    <member name="M:Nez.RuntimeInspector.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="M:Nez.RuntimeInspector.Render">
      <summary>
   Renders this instance.
   </summary>
    </member>
    <member name="M:Nez.RuntimeInspector.Dispose">
      <summary>
   Disposes this instance.
   </summary>
    </member>
    <member name="T:Nez.Debug">
      <summary> Class Debug. </summary>
    </member>
    <member name="M:Nez.Debug.Error(System.String,System.Object[])">
      <summary>
   Errors the specified format.
   </summary>
      <param name="format">The format.</param>
      <param name="args">The arguments.</param>
    </member>
    <member name="M:Nez.Debug.ErrorIf(System.Boolean,System.String,System.Object[])">
      <summary>
   Errors if.
   </summary>
      <param name="condition">if set to <c>true</c> [condition].</param>
      <param name="format">The format.</param>
      <param name="args">The arguments.</param>
    </member>
    <member name="M:Nez.Debug.Warn(System.String,System.Object[])">
      <summary>
   Warns the specified format.
   </summary>
      <param name="format">The format.</param>
      <param name="args">The arguments.</param>
    </member>
    <member name="M:Nez.Debug.WarnIf(System.Boolean,System.String,System.Object[])">
      <summary>
   Warns if.
   </summary>
      <param name="condition">if set to <c>true</c> [condition].</param>
      <param name="format">The format.</param>
      <param name="args">The arguments.</param>
    </member>
    <member name="M:Nez.Debug.Log(System.Object)">
      <summary>
   Logs the specified object.
   </summary>
      <param name="obj">The object.</param>
    </member>
    <member name="M:Nez.Debug.Log(System.String,System.Object[])">
      <summary>
   Logs the specified format.
   </summary>
      <param name="format">The format.</param>
      <param name="args">The arguments.</param>
    </member>
    <member name="M:Nez.Debug.LogIf(System.Boolean,System.String,System.Object[])">
      <summary>
   Logs if.
   </summary>
      <param name="condition">if set to <c>true</c> [condition].</param>
      <param name="format">The format.</param>
      <param name="args">The arguments.</param>
    </member>
    <member name="M:Nez.Debug.Info(System.String,System.Object[])">
      <summary>
   Informations the specified format.
   </summary>
      <param name="format">The format.</param>
      <param name="args">The arguments.</param>
    </member>
    <member name="M:Nez.Debug.Trace(System.String,System.Object[])">
      <summary>
   Traces the specified format.
   </summary>
      <param name="format">The format.</param>
      <param name="args">The arguments.</param>
    </member>
    <member name="M:Nez.Debug.BreakIf(System.Boolean)">
      <summary>
   Breaks if.
   </summary>
      <param name="condition">if set to <c>true</c> [condition].</param>
    </member>
    <member name="M:Nez.Debug.Break_">
      <summary>
   Breaks this instance.
   </summary>
    </member>
    <member name="M:Nez.Debug.TimeAction(Action,System.UInt32)">
      <summary>
   times how long an Action takes to run and returns the TimeSpan
   </summary>
      <param name="action">Action.</param>
      <param name="numberOfIterations">The number of iterations.</param>
      <returns>The action.</returns>
    </member>
    <member name="F:Nez.Debug.DrawTextFromBottom">
      <summary>
   The draw text from bottom
   </summary>
    </member>
    <member name="M:Nez.Debug.DrawLine(Vector2,Vector2,Color,System.Single)">
      <summary>
   Draws the line.
   </summary>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <param name="color">The color.</param>
      <param name="duration">The duration.</param>
    </member>
    <member name="M:Nez.Debug.DrawPixel(System.Single,System.Single,System.Int32,Color,System.Single)">
      <summary>
   Draws the pixel.
   </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <param name="size">The size.</param>
      <param name="color">The color.</param>
      <param name="duration">The duration.</param>
    </member>
    <member name="M:Nez.Debug.DrawPixel(Vector2,System.Int32,Color,System.Single)">
      <summary>
   Draws the pixel.
   </summary>
      <param name="position">The position.</param>
      <param name="size">The size.</param>
      <param name="color">The color.</param>
      <param name="duration">The duration.</param>
    </member>
    <member name="M:Nez.Debug.DrawHollowRect(Rectangle,Color,System.Single)">
      <summary>
   Draws the hollow rect.
   </summary>
      <param name="rectangle">The rectangle.</param>
      <param name="color">The color.</param>
      <param name="duration">The duration.</param>
    </member>
    <member name="M:Nez.Debug.DrawHollowBox(Vector2,System.Int32,Color,System.Single)">
      <summary>
   Draws the hollow box.
   </summary>
      <param name="center">The center.</param>
      <param name="size">The size.</param>
      <param name="color">The color.</param>
      <param name="duration">The duration.</param>
    </member>
    <member name="M:Nez.Debug.DrawText(BitmapFont,System.String,Vector2,Color,System.Single,System.Single)">
      <summary>
   Draws the text.
   </summary>
      <param name="font">The font.</param>
      <param name="text">The text.</param>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
      <param name="duration">The duration.</param>
      <param name="scale">The scale.</param>
    </member>
    <member name="M:Nez.Debug.DrawText(NezSpriteFont,System.String,Vector2,Color,System.Single,System.Single)">
      <summary>
   Draws the text.
   </summary>
      <param name="font">The font.</param>
      <param name="text">The text.</param>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
      <param name="duration">The duration.</param>
      <param name="scale">The scale.</param>
    </member>
    <member name="M:Nez.Debug.DrawText(System.String,System.Single)">
      <summary>
   Draws the text.
   </summary>
      <param name="text">The text.</param>
      <param name="duration">The duration.</param>
    </member>
    <member name="M:Nez.Debug.DrawText(System.String,System.Object[])">
      <summary>
   Draws the text.
   </summary>
      <param name="format">The format.</param>
      <param name="args">The arguments.</param>
    </member>
    <member name="M:Nez.Debug.DrawText(System.String,Color,System.Single,System.Single)">
      <summary>
   Draws the text.
   </summary>
      <param name="text">The text.</param>
      <param name="color">The color.</param>
      <param name="duration">The duration.</param>
      <param name="scale">The scale.</param>
    </member>
    <member name="T:Nez.Debug.Colors">
      <summary>
   we store all the default colors for various systems here such as collider debug rendering, Debug.drawText and others. The naming
   convention is CLASS-THING where possible to make it clear where it is used.
   </summary>
    </member>
    <member name="T:Nez.Debug.Size">
      <summary>
   Class Size.
   </summary>
    </member>
    <member name="F:Nez.Debug.Colors.DebugText">
      <summary>
   The debug text
   </summary>
    </member>
    <member name="F:Nez.Debug.Colors.ColliderBounds">
      <summary>
   The collider bounds
   </summary>
    </member>
    <member name="F:Nez.Debug.Colors.ColliderEdge">
      <summary>
   The collider edge
   </summary>
    </member>
    <member name="F:Nez.Debug.Colors.ColliderPosition">
      <summary>
   The collider position
   </summary>
    </member>
    <member name="F:Nez.Debug.Colors.ColliderCenter">
      <summary>
   The collider center
   </summary>
    </member>
    <member name="F:Nez.Debug.Colors.RenderableBounds">
      <summary>
   The renderable bounds
   </summary>
    </member>
    <member name="F:Nez.Debug.Colors.RenderableCenter">
      <summary>
   The renderable center
   </summary>
    </member>
    <member name="F:Nez.Debug.Colors.VerletParticle">
      <summary>
   The verlet particle
   </summary>
    </member>
    <member name="F:Nez.Debug.Colors.VerletConstraintEdge">
      <summary>
   The verlet constraint edge
   </summary>
    </member>
    <member name="P:Nez.Debug.Size.LineSizeMultiplier">
      <summary>
   Gets the line size multiplier.
   </summary>
      <value>The line size multiplier.</value>
    </member>
    <member name="T:Nez.Insist">
      <summary>
   Class Insist.
   </summary>
    </member>
    <member name="M:Nez.Insist.Fail">
      <summary>
   Fails this instance.
   </summary>
    </member>
    <member name="M:Nez.Insist.Fail(System.String,System.Object[])">
      <summary>
   Fails the specified message.
   </summary>
      <param name="message">The message.</param>
      <param name="args">The arguments.</param>
    </member>
    <member name="M:Nez.Insist.IsTrue(System.Boolean)">
      <summary>
   Determines whether the specified condition is true.
   </summary>
      <param name="condition">if set to <c>true</c> [condition].</param>
    </member>
    <member name="M:Nez.Insist.IsTrue(System.Boolean,System.String,System.Object[])">
      <summary>
   Determines whether the specified condition is true.
   </summary>
      <param name="condition">if set to <c>true</c> [condition].</param>
      <param name="message">The message.</param>
      <param name="args">The arguments.</param>
    </member>
    <member name="M:Nez.Insist.IsFalse(System.Boolean)">
      <summary>
   Determines whether the specified condition is false.
   </summary>
      <param name="condition">if set to <c>true</c> [condition].</param>
    </member>
    <member name="M:Nez.Insist.IsFalse(System.Boolean,System.String,System.Object[])">
      <summary>
   Determines whether the specified condition is false.
   </summary>
      <param name="condition">if set to <c>true</c> [condition].</param>
      <param name="message">The message.</param>
      <param name="args">The arguments.</param>
    </member>
    <member name="M:Nez.Insist.IsNull(System.Object)">
      <summary>
   asserts that obj is null
   </summary>
      <param name="obj">Object.</param>
    </member>
    <member name="M:Nez.Insist.IsNull(System.Object,System.String,System.Object[])">
      <summary>
   asserts that obj is null
   </summary>
      <param name="obj">Object.</param>
      <param name="message">Message.</param>
      <param name="args">Arguments.</param>
    </member>
    <member name="M:Nez.Insist.IsNotNull(System.Object)">
      <summary>
   asserts that obj is not null
   </summary>
      <param name="obj">Object.</param>
    </member>
    <member name="M:Nez.Insist.IsNotNull(System.Object,System.String,System.Object[])">
      <summary>
   asserts that obj is not null
   </summary>
      <param name="obj">Object.</param>
      <param name="message">Message.</param>
      <param name="args">Arguments.</param>
    </member>
    <member name="M:Nez.Insist.AreEqual(System.Object,System.Object,System.String,System.Object[])">
      <summary>
   asserts that first is equal to second
   </summary>
      <param name="first">First.</param>
      <param name="second">Second.</param>
      <param name="message">Message.</param>
      <param name="args">Arguments.</param>
    </member>
    <member name="M:Nez.Insist.AreNotEqual(System.Object,System.Object,System.String,System.Object[])">
      <summary>
   asserts that first is not equal to second
   </summary>
      <param name="first">First.</param>
      <param name="second">Second.</param>
      <param name="message">Message.</param>
      <param name="args">Arguments.</param>
    </member>
    <member name="T:Nez.BoxCollider">
      <summary>
   Class BoxCollider.
   Implements the <see cref="T:Nez.Collider" /></summary>
      <seealso cref="T:Nez.Collider" />
    </member>
    <member name="P:Nez.BoxCollider.Width">
      <summary>
   Gets or sets the width.
   </summary>
      <value>The width.</value>
    </member>
    <member name="P:Nez.BoxCollider.Height">
      <summary>
   Gets or sets the height.
   </summary>
      <value>The height.</value>
    </member>
    <member name="M:Nez.BoxCollider.#ctor">
      <summary>
   zero param constructor requires that a RenderableComponent be on the entity so that the collider can size itself when the
   entity is added to the scene.
   </summary>
    </member>
    <member name="M:Nez.BoxCollider.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
   creates a BoxCollider and uses the x/y components as the localOffset
   </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
    </member>
    <member name="M:Nez.BoxCollider.#ctor(System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.BoxCollider" /> class.
   </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
    </member>
    <member name="M:Nez.BoxCollider.#ctor(Rectangle)">
      <summary>
   creates a BoxCollider and uses the x/y components of the Rect as the localOffset
   </summary>
      <param name="rect">Rect.</param>
    </member>
    <member name="M:Nez.BoxCollider.SetSize(System.Single,System.Single)">
      <summary>
   sets the size of the BoxCollider
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <returns>The size.</returns>
    </member>
    <member name="M:Nez.BoxCollider.SetWidth(System.Single)">
      <summary>
   sets the width of the BoxCollider
   </summary>
      <param name="width">Width.</param>
      <returns>The width.</returns>
    </member>
    <member name="M:Nez.BoxCollider.SetHeight(System.Single)">
      <summary>
   sets the height of the BoxCollider
   </summary>
      <param name="height">Height.</param>
      <returns>The height.</returns>
    </member>
    <member name="M:Nez.BoxCollider.DebugRender(Batcher)">
      <summary>
   Debugs the render.
   </summary>
      <param name="batcher">The batcher.</param>
    </member>
    <member name="M:Nez.BoxCollider.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.CircleCollider">
      <summary>
   Class CircleCollider.
   Implements the <see cref="T:Nez.Collider" /></summary>
      <seealso cref="T:Nez.Collider" />
    </member>
    <member name="P:Nez.CircleCollider.Radius">
      <summary>
   Gets or sets the radius.
   </summary>
      <value>The radius.</value>
    </member>
    <member name="M:Nez.CircleCollider.#ctor">
      <summary>
   zero param constructor requires that a RenderableComponent be on the entity so that the collider can size itself when the
   entity is added to the scene.
   </summary>
    </member>
    <member name="M:Nez.CircleCollider.#ctor(System.Single)">
      <summary>
   creates a CircleCollider with radius. Note that when specifying a radius if using a RenderableComponent on the Entity as well you
   will need to set the origin to align the CircleCollider. For example, if the RenderableComponent has a 0,0 origin and a CircleCollider
   with a radius of 1.5f * renderable.width is created you can offset the origin by just setting the originNormalied to the center
   divided by the scaled size:
   entity.collider = new CircleCollider( moonTexture.Width * 1.5f );
   entity.collider.originNormalized = Vector2Extension.halfVector() / 1.5f;
   </summary>
      <param name="radius">Radius.</param>
    </member>
    <member name="M:Nez.CircleCollider.SetRadius(System.Single)">
      <summary>
   sets the radius for the CircleCollider
   </summary>
      <param name="radius">Radius.</param>
      <returns>The radius.</returns>
    </member>
    <member name="M:Nez.CircleCollider.DebugRender(Batcher)">
      <summary>
   Debugs the render.
   </summary>
      <param name="batcher">The batcher.</param>
    </member>
    <member name="M:Nez.CircleCollider.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.Collider">
      <summary>
   Class Collider.
   Implements the <see cref="T:Nez.Component" /></summary>
      <seealso cref="T:Nez.Component" />
    </member>
    <member name="F:Nez.Collider.Shape">
      <summary>
   the underlying Shape of the Collider
   </summary>
    </member>
    <member name="P:Nez.Collider.LocalOffset">
      <summary>
   localOffset is added to entity.position to get the final position for the collider geometry. This allows you to add multiple
   Colliders to an Entity and position them separately and also lets you set the point of rotation/scale.
   </summary>
      <value>The local offset.</value>
    </member>
    <member name="P:Nez.Collider.AbsolutePosition">
      <summary>
   represents the absolute position to this Collider. It is entity.transform.position + localPosition - origin.
   </summary>
      <value>The absolute position.</value>
    </member>
    <member name="P:Nez.Collider.Rotation">
      <summary>
   wraps Transform.rotation and returns 0 if this Collider does not rotate with the Entity else it returns Transform.rotation
   </summary>
      <value>The rotation.</value>
    </member>
    <member name="F:Nez.Collider.IsTrigger">
      <summary>
   if this collider is a trigger it will not cause collisions but it will still trigger events
   </summary>
    </member>
    <member name="F:Nez.Collider.PhysicsLayer">
      <summary>
   physicsLayer can be used as a filter when dealing with collisions. The Flags class has methods to assist with bitmasks.
   </summary>
    </member>
    <member name="F:Nez.Collider.CollidesWithLayers">
      <summary>
   layer mask of all the layers this Collider should collide with when Entity.move methods are used. defaults to all layers.
   </summary>
    </member>
    <member name="F:Nez.Collider.ShouldColliderScaleAndRotateWithTransform">
      <summary>
   if true, the Collider will scale and rotate following the Transform it is attached to
   </summary>
    </member>
    <member name="P:Nez.Collider.Bounds">
      <summary>
   Gets the bounds.
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="M:Nez.Collider.SetLocalOffset(Vector2)">
      <summary>
   localOffset is added to entity.position to get the final position for the collider. This allows you to add multiple Colliders
   to an Entity and position them separately.
   </summary>
      <param name="offset">Offset.</param>
      <returns>The local offset.</returns>
    </member>
    <member name="M:Nez.Collider.SetShouldColliderScaleAndRotateWithTransform(System.Boolean)">
      <summary>
   if set to true, the Collider will scale and rotate following the Transform it is attached to
   </summary>
      <param name="shouldColliderScaleAndRotateWithTransform">If set to <c>true</c> should collider scale and rotate with transform.</param>
      <returns>The should collider scale and rotate with transform.</returns>
    </member>
    <member name="M:Nez.Collider.OnAddedToEntity">
      <summary>
   Called when this component is added to a scene after all pending component changes are committed. At this point, the Entity field
   is set and the Entity.Scene is also set.
   </summary>
    </member>
    <member name="M:Nez.Collider.OnRemovedFromEntity">
      <summary>
   Called when this component is removed from its entity. Do all cleanup here.
   </summary>
    </member>
    <member name="M:Nez.Collider.OnEntityTransformChanged(Transform.Component)">
      <summary>
   called when the entity's position changes. This allows components to be aware that they have moved due to the parent
   entity moving.
   </summary>
      <param name="comp">The comp.</param>
    </member>
    <member name="M:Nez.Collider.OnEnabled">
      <summary>
   called when the parent Entity or this Component is enabled
   </summary>
    </member>
    <member name="M:Nez.Collider.OnDisabled">
      <summary>
   called when the parent Entity or this Component is disabled
   </summary>
    </member>
    <member name="M:Nez.Collider.RegisterColliderWithPhysicsSystem">
      <summary>
   the parent Entity will call this at various times (when added to a scene, enabled, etc)
   </summary>
    </member>
    <member name="M:Nez.Collider.UnregisterColliderWithPhysicsSystem">
      <summary>
   the parent Entity will call this at various times (when removed from a scene, disabled, etc)
   </summary>
    </member>
    <member name="M:Nez.Collider.Overlaps(Collider)">
      <summary>
   checks to see if this shape overlaps any other Colliders in the Physics system
   </summary>
      <param name="other">The other.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Collider.CollidesWith(Collider,CollisionResult@)">
      <summary>
   checks to see if this Collider collides with collider. If it does, true will be returned and result will be populated
   with collision data
   </summary>
      <param name="collider">Collider.</param>
      <param name="result">Result.</param>
      <returns>
        <c>true</c>, if with was collidesed, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Collider.CollidesWith(Collider,Vector2,CollisionResult@)">
      <summary>
   checks to see if this Collider with motion applied (delta movement vector) collides with collider. If it does, true will be
   returned and result will be populated with collision data.
   </summary>
      <param name="collider">Collider.</param>
      <param name="motion">Motion.</param>
      <param name="result">Result.</param>
      <returns>
        <c>true</c>, if with was collidesed, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Collider.CollidesWithAny(CollisionResult@)">
      <summary>
   checks to see if this Collider collides with any other Colliders in the Scene. The first Collider it intersects will have its collision
   data returned in the CollisionResult.
   </summary>
      <param name="result">Result.</param>
      <returns>
        <c>true</c>, if with was collidesed, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Collider.CollidesWithAny(Vector2@,CollisionResult@)">
      <summary>
   checks to see if this Collider with motion applied (delta movement vector) collides with any collider. If it does, true will be
   returned and result will be populated with collision data. Motion will be set to the maximum distance the Collider can travel
   before colliding.
   </summary>
      <param name="motion">Motion.</param>
      <param name="result">Result.</param>
      <returns>
        <c>true</c>, if with was collidesed, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Collider.Clone">
      <summary>
   creates a clone of this Component. The default implementation is just a MemberwiseClone so if a Component has object references
   that need to be cloned this method should be overriden.
   </summary>
      <returns>Component.</returns>
    </member>
    <member name="T:Nez.PolygonCollider">
      <summary>
   Polygons should be defined in clockwise fashion.
   </summary>
    </member>
    <member name="M:Nez.PolygonCollider.#ctor(Vector2[])">
      <summary>
   If the points are not centered they will be centered with the difference being applied to the localOffset.
   </summary>
      <param name="points">Points.</param>
    </member>
    <member name="M:Nez.PolygonCollider.#ctor(System.Int32,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.PolygonCollider" /> class.
   </summary>
      <param name="vertCount">The vert count.</param>
      <param name="radius">The radius.</param>
    </member>
    <member name="M:Nez.PolygonCollider.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.PolygonCollider" /> class.
   </summary>
    </member>
    <member name="M:Nez.PolygonCollider.DebugRender(Batcher)">
      <summary>
   Debugs the render.
   </summary>
      <param name="batcher">The batcher.</param>
    </member>
    <member name="T:Nez.ArcadeRigidbody">
      <summary>
   Note that this is not a full, multi-iteration physics system! This can be used for simple, arcade style physics.
   Based on http://elancev.name/oliver/2D%20polygon.htm#tut5
   </summary>
    </member>
    <member name="P:Nez.ArcadeRigidbody.Mass">
      <summary>
   mass of this rigidbody. A 0 mass will make this an immovable object.
   </summary>
      <value>The mass.</value>
    </member>
    <member name="P:Nez.ArcadeRigidbody.Elasticity">
      <summary>
   0 - 1 range where 0 is no bounce and 1 is perfect reflection
   </summary>
      <value>The elasticity.</value>
    </member>
    <member name="P:Nez.ArcadeRigidbody.Friction">
      <summary>
   0 - 1 range. 0 means no friction, 1 means the object will stop dead on
   </summary>
      <value>The friction.</value>
    </member>
    <member name="P:Nez.ArcadeRigidbody.Glue">
      <summary>
   0 - 9 range. When a collision occurs and it has risidual motion along the surface of collision if its square magnitude is less
   than glue friction will be set to the maximum for the collision resolution.
   </summary>
      <value>The glue.</value>
    </member>
    <member name="F:Nez.ArcadeRigidbody.ShouldUseGravity">
      <summary>
   if true, Physics.gravity will be taken into account each frame
   </summary>
    </member>
    <member name="F:Nez.ArcadeRigidbody.Velocity">
      <summary>
   velocity of this rigidbody
   </summary>
    </member>
    <member name="P:Nez.ArcadeRigidbody.IsImmovable">
      <summary>
   rigidbodies with a mass of 0 are considered immovable. Changing velocity and collisions will have no effect on them.
   </summary>
      <value>
        <c>true</c> if is immovable; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:Nez.ArcadeRigidbody.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.ArcadeRigidbody" /> class.
   </summary>
    </member>
    <member name="M:Nez.ArcadeRigidbody.SetMass(System.Single)">
      <summary>
   mass of this rigidbody. A 0 mass will make this an immovable object.
   </summary>
      <param name="mass">Mass.</param>
      <returns>The mass.</returns>
    </member>
    <member name="M:Nez.ArcadeRigidbody.SetElasticity(System.Single)">
      <summary>
   0 - 1 range where 0 is no bounce and 1 is perfect reflection
   </summary>
      <param name="value">Value.</param>
      <returns>The elasticity.</returns>
    </member>
    <member name="M:Nez.ArcadeRigidbody.SetFriction(System.Single)">
      <summary>
   0 - 1 range. 0 means no friction, 1 means the object will stop dead on
   </summary>
      <param name="value">Value.</param>
      <returns>The friction.</returns>
    </member>
    <member name="M:Nez.ArcadeRigidbody.SetGlue(System.Single)">
      <summary>
   0 - 9 range. When a collision occurs and it has risidual motion along the surface of collision if its square magnitude is less
   than glue friction will be set to the maximum for the collision resolution.
   </summary>
      <param name="value">Value.</param>
      <returns>The glue.</returns>
    </member>
    <member name="M:Nez.ArcadeRigidbody.SetVelocity(Vector2)">
      <summary>
   velocity of this rigidbody
   </summary>
      <param name="velocity">Velocity.</param>
      <returns>The velocity.</returns>
    </member>
    <member name="M:Nez.ArcadeRigidbody.AddImpulse(Vector2)">
      <summary>
   add an instant force impulse to the rigidbody using its mass. force is an acceleration in pixels per second per second. The
   force is multiplied by 100000 to make the values more reasonable to use.
   </summary>
      <param name="force">Force.</param>
    </member>
    <member name="M:Nez.ArcadeRigidbody.OnAddedToEntity">
      <summary>
   Called when this component is added to a scene after all pending component changes are committed. At this point, the Entity field
   is set and the Entity.Scene is also set.
   </summary>
    </member>
    <member name="M:Nez.ArcadeRigidbody.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="T:Nez.ITriggerListener">
      <summary>
   when added to a Component, whenever a Collider on the Entity overlaps/exits another Component these methods will be called.
   The ITriggerListener method will be called on any Component on the Entity that is a trigger that implement the interface.
   Note that this interface works only in conjunction with the Mover class
   </summary>
    </member>
    <member name="M:Nez.ITriggerListener.OnTriggerEnter(Collider,Collider)">
      <summary>
   called when a collider intersects a trigger collider. This is called on the trigger collider and the collider that touched
   the trigger. Movement must be handled by the Mover/ProjectileMover methods for this to function automatically.
   </summary>
      <param name="other">The other.</param>
      <param name="local">Local.</param>
    </member>
    <member name="M:Nez.ITriggerListener.OnTriggerExit(Collider,Collider)">
      <summary>
   called when another collider leaves a trigger collider.
   </summary>
      <param name="other">The other.</param>
      <param name="local">Local.</param>
    </member>
    <member name="T:Nez.Mover">
      <summary>
   helper class illustrating one way to handle movement taking into account all Collisions including triggers. The ITriggerListener
   interface is used to manage callbacks to any triggers that are breached while moving. An object must move only via the Mover.move
   method for triggers to be properly reported. Note that multiple Movers interacting with each other will end up calling ITriggerListener
   multiple times.
   </summary>
    </member>
    <member name="M:Nez.Mover.OnAddedToEntity">
      <summary>
   Called when this component is added to a scene after all pending component changes are committed. At this point, the Entity field
   is set and the Entity.Scene is also set.
   </summary>
    </member>
    <member name="M:Nez.Mover.CalculateMovement(Vector2@,CollisionResult@)">
      <summary>
   caculates the movement modifying the motion vector to take into account any collisions that will
   occur when moving
   </summary>
      <param name="motion">Motion.</param>
      <param name="collisionResult">Collision result.</param>
      <returns>
        <c>true</c>, if movement was calculated, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Mover.AdvancedCalculateMovement(Vector2@,ICollection{CollisionResult})">
      <summary>
   Calculates the movement modifying the motion vector to take into account any collisions that will
   occur when moving. This version is modified to output through a given collection to show every
   collision that occured.
   </summary>
      <param name="motion">Motion.</param>
      <param name="collisionResults">The collision results.</param>
      <returns>The amount of collisions that occured.</returns>
    </member>
    <member name="M:Nez.Mover.ApplyMovement(Vector2)">
      <summary>
   applies the movement from calculateMovement to the entity and updates the triggerHelper
   </summary>
      <param name="motion">Motion.</param>
    </member>
    <member name="M:Nez.Mover.Move(Vector2,CollisionResult@)">
      <summary>
   moves the entity taking collisions into account by calling calculateMovement followed by applyMovement;
   </summary>
      <param name="motion">Motion.</param>
      <param name="collisionResult">Collision result.</param>
      <returns>
        <c>true</c>, if move actor was newed, <c>false</c> otherwise.</returns>
    </member>
    <member name="T:Nez.ProjectileMover">
      <summary>
   moves taking collision into account only for reporting to any ITriggerListeners. The object will always move the full amount so it is up
   to the caller to destroy it on impact if desired.
   </summary>
    </member>
    <member name="M:Nez.ProjectileMover.OnAddedToEntity">
      <summary>
   Called when this component is added to a scene after all pending component changes are committed. At this point, the Entity field
   is set and the Entity.Scene is also set.
   </summary>
    </member>
    <member name="M:Nez.ProjectileMover.Move(Vector2)">
      <summary>
   moves the entity taking collisions into account
   </summary>
      <param name="motion">Motion.</param>
      <returns>
        <c>true</c>, if move actor was newed, <c>false</c> otherwise.</returns>
    </member>
    <member name="T:Nez.Tiled.TiledMapMover">
      <summary>
   WIP
   The TiledMapMover is a helper for moving objects around in a gravity-based Tiled map. It requires that the Entity it is on has a BoxCollider. The
   BoxCollider will be used in conjunction with colliderHorizontal/VerticalInset for all collision detection.
   One way platforms can be jumped down through by moving your Transform down 1 pixel and calling CollisionState.clearLastGroundTile.
   If you plan to use slopes/one way platforms with the TiledMapMover some extra properties need to be added to your tiles in Tiled.
   They are listed below:
   - nez:isOneWayPlatform (bool): one way platforms will ignore all collisions except from above
   - nez:isSlope (bool): signifies if the tile is a slope. Requires the next two properties if it is
   - nez:slopeTopLeft (int): distance in pixels from the tiles top to the slope on the left side. For example, a 45 top-left to bottom-right
   tile |\ would have a slopeTopLeft of 0 and slopeTopRight of 15
   - nez:slopeTopRight (int): distance in pixels from the tiles top to the slope on the right side
   </summary>
    </member>
    <member name="T:Nez.Tiled.TiledMapMover.CollisionState">
      <summary>
   class used to house all the collision information from a call to move
   </summary>
    </member>
    <member name="F:Nez.Tiled.TiledMapMover.CollisionState.Right">
      <summary>
   The right
   </summary>
    </member>
    <member name="F:Nez.Tiled.TiledMapMover.CollisionState.BecameGroundedThisFrame">
      <summary>
   The became grounded this frame
   </summary>
    </member>
    <member name="F:Nez.Tiled.TiledMapMover.CollisionState.WasGroundedLastFrame">
      <summary>
   The was grounded last frame
   </summary>
    </member>
    <member name="F:Nez.Tiled.TiledMapMover.CollisionState.IsGroundedOnOneWayPlatform">
      <summary>
   The is grounded on one way platform
   </summary>
    </member>
    <member name="F:Nez.Tiled.TiledMapMover.CollisionState.SlopeAngle">
      <summary>
   The slope angle
   </summary>
    </member>
    <member name="P:Nez.Tiled.TiledMapMover.CollisionState.HasCollision">
      <summary>
   Gets a value indicating whether this instance has collision.
   </summary>
      <value>
        <c>true</c> if this instance has collision; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:Nez.Tiled.TiledMapMover.CollisionState.ClearLastGroundTile">
      <summary>
   Clears the last ground tile.
   </summary>
    </member>
    <member name="M:Nez.Tiled.TiledMapMover.CollisionState.Reset">
      <summary>
   Resets this instance.
   </summary>
    </member>
    <member name="M:Nez.Tiled.TiledMapMover.CollisionState.Reset(Vector2@)">
      <summary>
   resets collision state and does sub-pixel movement calculations
   </summary>
      <param name="motion">Motion.</param>
    </member>
    <member name="M:Nez.Tiled.TiledMapMover.CollisionState.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="F:Nez.Tiled.TiledMapMover.ColliderHorizontalInset">
      <summary>
   the inset on the horizontal plane that the BoxCollider will be shrunk by when moving vertically
   </summary>
    </member>
    <member name="F:Nez.Tiled.TiledMapMover.ColliderVerticalInset">
      <summary>
   the inset on the vertical plane that the BoxCollider will be shrunk by when moving horizontally
   </summary>
    </member>
    <member name="F:Nez.Tiled.TiledMapMover.CollisionLayer">
      <summary>
   the TiledTileLayer used for collision checks
   </summary>
    </member>
    <member name="F:Nez.Tiled.TiledMapMover.TiledMap">
      <summary>
   the TiledMap that contains collisionLayer
   </summary>
    </member>
    <member name="M:Nez.Tiled.TiledMapMover.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Tiled.TiledMapMover" /> class.
   </summary>
    </member>
    <member name="M:Nez.Tiled.TiledMapMover.#ctor(TmxLayer)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Tiled.TiledMapMover" /> class.
   </summary>
      <param name="collisionLayer">The collision layer.</param>
    </member>
    <member name="M:Nez.Tiled.TiledMapMover.Move(Vector2,BoxCollider,CollisionState)">
      <summary>
   moves the Entity taking into account the tiled map
   </summary>
      <param name="motion">Motion.</param>
      <param name="boxCollider">Box collider.</param>
      <param name="collisionState">State of the collision.</param>
    </member>
    <member name="M:Nez.Tiled.TiledMapMover.TestCollisions(Vector2@,Rectangle,CollisionState)">
      <summary>
   Tests the collisions.
   </summary>
      <param name="motion">The motion.</param>
      <param name="boxColliderBounds">The box collider bounds.</param>
      <param name="collisionState">State of the collision.</param>
    </member>
    <member name="T:Nez.Cube3D">
      <summary>
   Class Cube3D.
   Implements the <see cref="T:Nez.GeometricPrimitive3D" /></summary>
      <seealso cref="T:Nez.GeometricPrimitive3D" />
    </member>
    <member name="M:Nez.Cube3D.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Cube3D" /> class.
   </summary>
    </member>
    <member name="T:Nez.GeometricPrimitive3D">
      <summary>
   Class GeometricPrimitive3D.
   Implements the <see cref="T:Nez.Renderable3D" />
   Implements the <see cref="T:System.IDisposable" /></summary>
      <seealso cref="T:Nez.Renderable3D" />
      <seealso cref="T:System.IDisposable" />
    </member>
    <member name="M:Nez.GeometricPrimitive3D.OnAddedToEntity">
      <summary>
   Called when this component is added to a scene after all pending component changes are committed. At this point, the Entity field
   is set and the Entity.Scene is also set.
   </summary>
    </member>
    <member name="M:Nez.GeometricPrimitive3D.Dispose">
      <summary>
   frees resources used by this object.
   </summary>
    </member>
    <member name="M:Nez.GeometricPrimitive3D.Render(Batcher,Camera)">
      <summary>
   called by a Renderer. The Camera can be used for culling and the Batcher instance to draw with.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="T:Nez3D.Model3D">
      <summary>
   Model3D represents a normal 3D Model but it is rendered by a standard Nez Camera on the same plane as all the 2D sprites. For this
   reason, the Model is inflated by a scale of 80 by default. This keeps the Model at approximately the same scale as 2D sprites. You
   can adjust this via the Vector3s present in this class (which replace the 2D Transform) and the 3D Camera fields (which are all
   suffixed with "3D").
   </summary>
    </member>
    <member name="P:Nez3D.Model3D.Bounds">
      <summary>
   by default, uses a magic number of 1.5 * the scale of the object. This will work fine for objects ~1 unit in width/height.
   Any other odd sizes should override this appropriately.
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="M:Nez3D.Model3D.#ctor(Model,Texture2D)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez3D.Model3D" /> class.
   </summary>
      <param name="model">The model.</param>
      <param name="texture">The texture.</param>
    </member>
    <member name="M:Nez3D.Model3D.EnableDefaultLighting">
      <summary>
   Enables the default lighting.
   </summary>
      <returns>Model3D.</returns>
    </member>
    <member name="M:Nez3D.Model3D.Render(Batcher,Camera)">
      <summary>
   called by a Renderer. The Camera can be used for culling and the Batcher instance to draw with.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="T:Nez.Renderable3D">
      <summary>
   convenience base class for 3D objects. It reuses and wraps the Transform in Vector3s for easy access and provides a world
   transform for rendering.
   </summary>
    </member>
    <member name="P:Nez.Renderable3D.Bounds">
      <summary>
   by default, uses a magic number of 1.5 * the scale of the object. This will work fine for objects ~1 unit in width/height.
   Any other odd sizes should override this appropriately.
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="P:Nez.Renderable3D.Position">
      <summary>
   wraps Transform.position along with a private Z position
   </summary>
      <value>The position.</value>
    </member>
    <member name="F:Nez.Renderable3D.Scale">
      <summary>
   the scale of the object. 80 by default. You will need to adjust this depending on your Scene's backbuffer size.
   </summary>
    </member>
    <member name="P:Nez.Renderable3D.Rotation">
      <summary>
   wraps Transform.rotation for the Z rotation along with a private X and Y rotation.
   </summary>
      <value>The rotation.</value>
    </member>
    <member name="P:Nez.Renderable3D.RotationDegrees">
      <summary>
   rotation in degrees
   </summary>
      <value>The rotation degrees.</value>
    </member>
    <member name="P:Nez.Renderable3D.WorldMatrix">
      <summary>
   Matrix that represents the world transform. Useful for rendering.
   </summary>
      <value>The world matrix.</value>
    </member>
    <member name="T:Nez.Sphere3D">
      <summary>
   Class Sphere3D.
   Implements the <see cref="T:Nez.GeometricPrimitive3D" /></summary>
      <seealso cref="T:Nez.GeometricPrimitive3D" />
    </member>
    <member name="M:Nez.Sphere3D.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Sphere3D" /> class.
   </summary>
    </member>
    <member name="M:Nez.Sphere3D.#ctor(System.Int32,Color)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Sphere3D" /> class.
   </summary>
      <param name="tessellation">The tessellation.</param>
      <param name="color">The color.</param>
    </member>
    <member name="T:Nez.Torus3D">
      <summary>
   Class Torus3D.
   Implements the <see cref="T:Nez.GeometricPrimitive3D" /></summary>
      <seealso cref="T:Nez.GeometricPrimitive3D" />
    </member>
    <member name="P:Nez.Torus3D.Thickness">
      <summary>
   Gets or sets the thickness.
   </summary>
      <value>The thickness.</value>
    </member>
    <member name="P:Nez.Torus3D.Tessellation">
      <summary>
   Gets or sets the tessellation.
   </summary>
      <value>The tessellation.</value>
    </member>
    <member name="M:Nez.Torus3D.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Torus3D" /> class.
   </summary>
    </member>
    <member name="M:Nez.Torus3D.#ctor(System.Single,System.Int32,Color)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Torus3D" /> class.
   </summary>
      <param name="thickness">The thickness.</param>
      <param name="tessellation">The tessellation.</param>
      <param name="color">The color.</param>
    </member>
    <member name="T:Nez.VertexPositionColorNormal">
      <summary>
   Struct VertexPositionColorNormal
   Implements the <see cref="T:Microsoft.Xna.Framework.Graphics.IVertexType" /></summary>
      <seealso cref="T:Microsoft.Xna.Framework.Graphics.IVertexType" />
    </member>
    <member name="F:Nez.VertexPositionColorNormal.Position">
      <summary>
   The position
   </summary>
    </member>
    <member name="F:Nez.VertexPositionColorNormal.Color">
      <summary>
   The color
   </summary>
    </member>
    <member name="F:Nez.VertexPositionColorNormal.Normal">
      <summary>
   The normal
   </summary>
    </member>
    <member name="M:Nez.VertexPositionColorNormal.#ctor(Vector3,Color,Vector3)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VertexPositionColorNormal" /> struct.
   </summary>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
      <param name="normal">The normal.</param>
    </member>
    <member name="T:Nez.Particles.Particle">
      <summary>
   the internal fields are required for the ParticleEmitter to be able to render the Particle
   </summary>
    </member>
    <member name="M:Nez.Particles.Particle.Initialize(ParticleEmitterConfig,Vector2)">
      <summary>
   Initializes the specified emitter configuration.
   </summary>
      <param name="emitterConfig">The emitter configuration.</param>
      <param name="spawnPosition">The spawn position.</param>
    </member>
    <member name="M:Nez.Particles.Particle.Update(ParticleEmitterConfig,ParticleCollisionConfig@,Vector2)">
      <summary>
   updates the particle. Returns true when the particle is no longer alive
   </summary>
      <param name="emitterConfig">Emitter config.</param>
      <param name="collisionConfig">The collision configuration.</param>
      <param name="rootPosition">The root position.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="T:Nez.ParticleCollisionConfig">
      <summary>
   Struct ParticleCollisionConfig
   </summary>
    </member>
    <member name="F:Nez.ParticleCollisionConfig.Enabled">
      <summary>
   enable/disable particle collision
   </summary>
    </member>
    <member name="F:Nez.ParticleCollisionConfig.RadiusScale">
      <summary>
   A multiplier applied to the size of each particle before collisions are processed.
   </summary>
    </member>
    <member name="F:Nez.ParticleCollisionConfig.Elasticity">
      <summary>
   0 - 1 range where 0 is no bounce and 1 is perfect reflection
   </summary>
    </member>
    <member name="F:Nez.ParticleCollisionConfig.Friction">
      <summary>
   0 - 1 range. 0 means no friction, 1 means the object will stop dead on
   </summary>
    </member>
    <member name="F:Nez.ParticleCollisionConfig.CollidesWithLayers">
      <summary>
   control which layers this particle system collides with
   </summary>
    </member>
    <member name="F:Nez.ParticleCollisionConfig.Gravity">
      <summary>
   gravity value used for simulation after a collision occurs
   </summary>
    </member>
    <member name="F:Nez.ParticleCollisionConfig.LifetimeLoss">
      <summary>
   how much a particle's lifetime is reduced after a collision. 0 is none and 1 is all of it.
   </summary>
    </member>
    <member name="F:Nez.ParticleCollisionConfig.MinKillSpeedSquared">
      <summary>
   kill particles whose squared speed falls below this threshold, after a collision
   </summary>
    </member>
    <member name="T:Nez.Particles.ParticleEmitter">
      <summary>
   Class ParticleEmitter.
   Implements the <see cref="T:Nez.RenderableComponent" />
   Implements the <see cref="T:Nez.IUpdatable" /></summary>
      <seealso cref="T:Nez.RenderableComponent" />
      <seealso cref="T:Nez.IUpdatable" />
    </member>
    <member name="P:Nez.Particles.ParticleEmitter.Bounds">
      <summary>
   the AABB that wraps this object. Used for camera culling.
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="P:Nez.Particles.ParticleEmitter.IsPaused">
      <summary>
   Gets a value indicating whether this instance is paused.
   </summary>
      <value>
        <c>true</c> if this instance is paused; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Particles.ParticleEmitter.IsPlaying">
      <summary>
   Gets a value indicating whether this instance is playing.
   </summary>
      <value>
        <c>true</c> if this instance is playing; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Particles.ParticleEmitter.IsStopped">
      <summary>
   Gets a value indicating whether this instance is stopped.
   </summary>
      <value>
        <c>true</c> if this instance is stopped; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Particles.ParticleEmitter.IsEmitting">
      <summary>
   Gets a value indicating whether this instance is emitting.
   </summary>
      <value>
        <c>true</c> if this instance is emitting; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Particles.ParticleEmitter.ElapsedTime">
      <summary>
   Gets the elapsed time.
   </summary>
      <value>The elapsed time.</value>
    </member>
    <member name="P:Nez.Particles.ParticleEmitter.SimulateInWorldSpace">
      <summary>
   convenience method for setting ParticleEmitterConfig.simulateInWorldSpace. If true, particles will simulate in world space. ie when the
   parent Transform moves it will have no effect on any already active Particles.
   </summary>
      <value>
        <c>true</c> if [simulate in world space]; otherwise, <c>false</c>.</value>
    </member>
    <member name="F:Nez.Particles.ParticleEmitter.CollisionConfig">
      <summary>
   config object with various properties to deal with particle collisions
   </summary>
    </member>
    <member name="E:Nez.Particles.ParticleEmitter.OnAllParticlesExpired">
      <summary>
   event that's going to be called when particles count becomes 0 after stopping emission.
   emission can stop after either we stop it manually or when we run for entire duration specified in ParticleEmitterConfig.
   </summary>
    </member>
    <member name="E:Nez.Particles.ParticleEmitter.OnEmissionDurationReached">
      <summary>
   event that's going to be called when emission is stopped due to reaching duration specified in ParticleEmitterConfig
   </summary>
    </member>
    <member name="M:Nez.Particles.ParticleEmitter.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Particles.ParticleEmitter" /> class.
   </summary>
    </member>
    <member name="M:Nez.Particles.ParticleEmitter.#ctor(ParticleEmitterConfig,System.Boolean)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Particles.ParticleEmitter" /> class.
   </summary>
      <param name="emitterConfig">The emitter configuration.</param>
      <param name="playOnAwake">if set to <c>true</c> [play on awake].</param>
    </member>
    <member name="M:Nez.Particles.ParticleEmitter.OnAddedToEntity">
      <summary>
   Called when this component is added to a scene after all pending component changes are committed. At this point, the Entity field
   is set and the Entity.Scene is also set.
   </summary>
    </member>
    <member name="M:Nez.Particles.ParticleEmitter.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="M:Nez.Particles.ParticleEmitter.Render(Batcher,Camera)">
      <summary>
   called by a Renderer. The Camera can be used for culling and the Batcher instance to draw with.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="M:Nez.Particles.ParticleEmitter.Clear">
      <summary>
   removes all particles from the particle emitter
   </summary>
    </member>
    <member name="M:Nez.Particles.ParticleEmitter.Play">
      <summary>
   plays the particle emitter
   </summary>
    </member>
    <member name="M:Nez.Particles.ParticleEmitter.Stop">
      <summary>
   stops the particle emitter
   </summary>
    </member>
    <member name="M:Nez.Particles.ParticleEmitter.Pause">
      <summary>
   pauses the particle emitter
   </summary>
    </member>
    <member name="M:Nez.Particles.ParticleEmitter.ResumeEmission">
      <summary>
   resumes emission of particles.
   this is possible only if stop() wasn't called and emission wasn't stopped due to duration
   </summary>
    </member>
    <member name="M:Nez.Particles.ParticleEmitter.PauseEmission">
      <summary>
   pauses emission of particles while allowing existing particles to expire
   </summary>
    </member>
    <member name="M:Nez.Particles.ParticleEmitter.Emit(System.Int32)">
      <summary>
   manually emit some particles
   </summary>
      <param name="count">Count.</param>
    </member>
    <member name="T:Nez.Particles.ParticleEmitterConfig">
      <summary>
   Class ParticleEmitterConfig.
   Implements the <see cref="T:System.IDisposable" /></summary>
      <seealso cref="T:System.IDisposable" />
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.Sprite">
      <summary>
   The sprite
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.SimulateInWorldSpace">
      <summary>
   If true, particles will simulate in world space. ie when the parent Transform moves it will have no effect on any already active Particles.
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.BlendFuncSource">
      <summary>
   The blend function source
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.BlendFuncDestination">
      <summary>
   The blend function destination
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.SourcePosition">
      <summary>
   sourcePosition is read in but internally it is not used. The ParticleEmitter.localPosition is what the emitter will use for positioning
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.SourcePositionVariance">
      <summary>
   The source position variance
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.Speed">
      <summary>
   The speed
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.ParticleLifespan">
      <summary>
   The particle lifespan
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.Angle">
      <summary>
   The angle
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.Gravity">
      <summary>
   The gravity
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.RadialAcceleration">
      <summary>
   The radial acceleration
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.TangentialAcceleration">
      <summary>
   The tangential acceleration
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.StartColor">
      <summary>
   The start color
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.FinishColor">
      <summary>
   The finish color
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.MaxParticles">
      <summary>
   The maximum particles
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.StartParticleSize">
      <summary>
   The start particle size
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.FinishParticleSize">
      <summary>
   The finish particle size
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.Duration">
      <summary>
   The duration
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.EmitterType">
      <summary>
   The emitter type
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.RotationStart">
      <summary>
   The rotation start
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.RotationEnd">
      <summary>
   The rotation end
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.EmissionRate">
      <summary>
   The emission rate
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.MaxRadius">
      <summary>
   The maximum radius
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.MaxRadiusVariance">
      <summary>
   The maximum radius variance
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.MinRadius">
      <summary>
   The minimum radius
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.MinRadiusVariance">
      <summary>
   The minimum radius variance
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.RotatePerSecond">
      <summary>
   The rotate per second
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterConfig.RotatePerSecondVariance">
      <summary>
   The rotate per second variance
   </summary>
    </member>
    <member name="T:Nez.Particles.ParticleEmitterType">
      <summary>
   Enum ParticleEmitterType
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterType.Gravity">
      <summary>
   The gravity
   </summary>
    </member>
    <member name="F:Nez.Particles.ParticleEmitterType.Radial">
      <summary>
   The radial
   </summary>
    </member>
    <member name="T:Nez.Shadows.PolyLight">
      <summary>
   Point light that also casts shadows
   </summary>
    </member>
    <member name="F:Nez.Shadows.PolyLight.CollidesWithLayers">
      <summary>
   layer mask of all the layers this light should interact with. defaults to all layers.
   </summary>
    </member>
    <member name="P:Nez.Shadows.PolyLight.Bounds">
      <summary>
   the AABB that wraps this object. Used for camera culling.
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="P:Nez.Shadows.PolyLight.Radius">
      <summary>
   Radius of influence of the light
   </summary>
      <value>The radius.</value>
    </member>
    <member name="F:Nez.Shadows.PolyLight.Power">
      <summary>
   Power of the light, from 0 (turned off) to 1 for maximum brightness
   </summary>
    </member>
    <member name="M:Nez.Shadows.PolyLight.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Shadows.PolyLight" /> class.
   </summary>
    </member>
    <member name="M:Nez.Shadows.PolyLight.#ctor(System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Shadows.PolyLight" /> class.
   </summary>
      <param name="radius">The radius.</param>
    </member>
    <member name="M:Nez.Shadows.PolyLight.#ctor(System.Single,Color)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Shadows.PolyLight" /> class.
   </summary>
      <param name="radius">The radius.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.Shadows.PolyLight.#ctor(System.Single,Color,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Shadows.PolyLight" /> class.
   </summary>
      <param name="radius">The radius.</param>
      <param name="color">The color.</param>
      <param name="power">The power.</param>
    </member>
    <member name="M:Nez.Shadows.PolyLight.SetRadius(System.Single)">
      <summary>
   Sets the radius.
   </summary>
      <param name="radius">The radius.</param>
      <returns>PolyLight.</returns>
    </member>
    <member name="M:Nez.Shadows.PolyLight.SetPower(System.Single)">
      <summary>
   Sets the power.
   </summary>
      <param name="power">The power.</param>
      <returns>PolyLight.</returns>
    </member>
    <member name="M:Nez.Shadows.PolyLight.OnAddedToEntity">
      <summary>
   Called when this component is added to a scene after all pending component changes are committed. At this point, the Entity field
   is set and the Entity.Scene is also set.
   </summary>
    </member>
    <member name="M:Nez.Shadows.PolyLight.Render(Batcher,Camera)">
      <summary>
   called by a Renderer. The Camera can be used for culling and the Batcher instance to draw with.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="M:Nez.Shadows.PolyLight.DebugRender(Batcher)">
      <summary>
   renders the bounds only if there is no collider. Always renders a square on the origin.
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="T:Nez.Shadows.PolySpotLight">
      <summary>
   WIP: still has some odd rendering bugs that need to get worked out
   poly spot light. Works just like a PolyLight except it is limited to a cone shape (spotAngle).
   </summary>
    </member>
    <member name="P:Nez.Shadows.PolySpotLight.Bounds">
      <summary>
   the AABB that wraps this object. Used for camera culling.
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="P:Nez.Shadows.PolySpotLight.SpotAngle">
      <summary>
   the angle of the light's spotlight cone in degrees. Defaults to 45.
   </summary>
      <value>The spot angle.</value>
    </member>
    <member name="M:Nez.Shadows.PolySpotLight.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Shadows.PolySpotLight" /> class.
   </summary>
    </member>
    <member name="M:Nez.Shadows.PolySpotLight.#ctor(System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Shadows.PolySpotLight" /> class.
   </summary>
      <param name="radius">The radius.</param>
    </member>
    <member name="M:Nez.Shadows.PolySpotLight.#ctor(System.Single,Color)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Shadows.PolySpotLight" /> class.
   </summary>
      <param name="radius">The radius.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.Shadows.PolySpotLight.#ctor(System.Single,Color,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Shadows.PolySpotLight" /> class.
   </summary>
      <param name="radius">The radius.</param>
      <param name="color">The color.</param>
      <param name="power">The power.</param>
    </member>
    <member name="M:Nez.Shadows.PolySpotLight.SetRadius(System.Single)">
      <summary>
   Sets the radius.
   </summary>
      <param name="radius">The radius.</param>
      <returns>PolyLight.</returns>
    </member>
    <member name="M:Nez.Shadows.PolySpotLight.SetSpotAngle(System.Single)">
      <summary>
   Sets the spot angle.
   </summary>
      <param name="spotAngle">The spot angle.</param>
      <returns>PolySpotLight.</returns>
    </member>
    <member name="M:Nez.Shadows.PolySpotLight.OnAddedToEntity">
      <summary>
   Called when this component is added to a scene after all pending component changes are committed. At this point, the Entity field
   is set and the Entity.Scene is also set.
   </summary>
    </member>
    <member name="M:Nez.Shadows.PolySpotLight.DebugRender(Batcher)">
      <summary>
   renders the bounds only if there is no collider. Always renders a square on the origin.
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="M:Nez.Shadows.PolySpotLight.OnEntityTransformChanged(Transform.Component)">
      <summary>
   Called when [entity transform changed].
   </summary>
      <param name="comp">The comp.</param>
    </member>
    <member name="T:Nez.Shadows.VisibilityComputer">
      <summary>
   Class which computes a mesh that represents which regions are visibile from the origin point given a set of occluders. Usage is as
   follows:
   - call begin
   - add any occluders
   - call end to get the visibility polygon. When end is called all internal storage is cleared.
   based on: http://www.redblobgames.com/articles/visibility/ and http://roy-t.nl/index.php/2014/02/27/2d-lighting-and-shadows-preview/
   </summary>
    </member>
    <member name="F:Nez.Shadows.VisibilityComputer.LineCountForCircleApproximation">
      <summary>
   total number of lines that will be used when approximating a circle. Only a 180 degree hemisphere is needed so this will be the number
   of segments to approximate that hemisphere.
   </summary>
    </member>
    <member name="M:Nez.Shadows.VisibilityComputer.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Shadows.VisibilityComputer" /> class.
   </summary>
    </member>
    <member name="M:Nez.Shadows.VisibilityComputer.#ctor(Vector2,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Shadows.VisibilityComputer" /> class.
   </summary>
      <param name="origin">The origin.</param>
      <param name="radius">The radius.</param>
    </member>
    <member name="M:Nez.Shadows.VisibilityComputer.AddColliderOccluder(Collider)">
      <summary>
   adds a Collider as an occluder for the PolyLight
   </summary>
      <param name="collider">Collider.</param>
    </member>
    <member name="M:Nez.Shadows.VisibilityComputer.AddSquareOccluder(Vector2,System.Single,System.Single)">
      <summary>
   Add a square shaped occluder
   </summary>
      <param name="position">The position.</param>
      <param name="width">The width.</param>
      <param name="rotation">The rotation.</param>
    </member>
    <member name="M:Nez.Shadows.VisibilityComputer.AddSquareOccluder(RectangleF)">
      <summary>
   Add a square shaped occluder
   </summary>
      <param name="bounds">The bounds.</param>
    </member>
    <member name="M:Nez.Shadows.VisibilityComputer.AddCircleOccluder(Vector2,System.Single)">
      <summary>
   adds a circle shaped occluder
   </summary>
      <param name="position">Position.</param>
      <param name="radius">Radius.</param>
    </member>
    <member name="M:Nez.Shadows.VisibilityComputer.AddLineOccluder(Vector2,Vector2)">
      <summary>
   Add a line shaped occluder
   </summary>
      <param name="p1">The p1.</param>
      <param name="p2">The p2.</param>
    </member>
    <member name="M:Nez.Shadows.VisibilityComputer.ClearOccluders">
      <summary>
   Remove all occluders
   </summary>
    </member>
    <member name="M:Nez.Shadows.VisibilityComputer.Begin(Vector2,System.Single)">
      <summary>
   prepares the computer for calculating the current poly light
   </summary>
      <param name="origin">Origin.</param>
      <param name="radius">Radius.</param>
    </member>
    <member name="M:Nez.Shadows.VisibilityComputer.End">
      <summary>
   Computes the visibility polygon and returns the vertices of the triangle fan (minus the center vertex). Returned List is from the
   ListPool.
   </summary>
      <returns>List&lt;Vector2&gt;.</returns>
    </member>
    <member name="M:Nez.Shadows.VisibilityComputer.LoadRectangleBoundaries">
      <summary>
   Helper function to construct segments along the outside perimiter in order to limit the radius of the light
   </summary>
    </member>
    <member name="M:Nez.Shadows.VisibilityComputer.LoadSpotLightBoundaries(Vector2[])">
      <summary>
   Loads the spot light boundaries.
   </summary>
      <param name="points">The points.</param>
    </member>
    <member name="T:Nez.NineSliceSpriteRenderer">
      <summary>
   Class NineSliceSpriteRenderer.
   Implements the <see cref="T:Nez.Sprites.SpriteRenderer" /></summary>
      <seealso cref="T:Nez.Sprites.SpriteRenderer" />
    </member>
    <member name="P:Nez.NineSliceSpriteRenderer.Width">
      <summary>
   Gets or sets the width.
   </summary>
      <value>The width.</value>
    </member>
    <member name="P:Nez.NineSliceSpriteRenderer.Height">
      <summary>
   Gets or sets the height.
   </summary>
      <value>The height.</value>
    </member>
    <member name="P:Nez.NineSliceSpriteRenderer.Bounds">
      <summary>
   Gets the bounds.
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="F:Nez.NineSliceSpriteRenderer.Sprite">
      <summary>
   The sprite
   </summary>
    </member>
    <member name="M:Nez.NineSliceSpriteRenderer.#ctor(NinePatchSprite)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.NineSliceSpriteRenderer" /> class.
   </summary>
      <param name="sprite">The sprite.</param>
    </member>
    <member name="M:Nez.NineSliceSpriteRenderer.#ctor(Sprite,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.NineSliceSpriteRenderer" /> class.
   </summary>
      <param name="sprite">The sprite.</param>
      <param name="top">The top.</param>
      <param name="bottom">The bottom.</param>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
    </member>
    <member name="M:Nez.NineSliceSpriteRenderer.#ctor(Texture2D,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.NineSliceSpriteRenderer" /> class.
   </summary>
      <param name="texture">The texture.</param>
      <param name="top">The top.</param>
      <param name="bottom">The bottom.</param>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
    </member>
    <member name="M:Nez.NineSliceSpriteRenderer.Render(Batcher,Camera)">
      <summary>
   Renders the specified batcher.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="camera">The camera.</param>
    </member>
    <member name="T:Nez.PrototypeSpriteRenderer">
      <summary>
   skewable rectangle sprite for prototyping
   </summary>
    </member>
    <member name="P:Nez.PrototypeSpriteRenderer.Width">
      <summary>
   width of the RenderableComponent. subclasses that do not override the bounds property must implement this!
   </summary>
      <value>The width.</value>
    </member>
    <member name="P:Nez.PrototypeSpriteRenderer.Height">
      <summary>
   height of the RenderableComponent. subclasses that do not override the bounds property must implement this!
   </summary>
      <value>The height.</value>
    </member>
    <member name="P:Nez.PrototypeSpriteRenderer.Bounds">
      <summary>
   Gets the bounds.
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="F:Nez.PrototypeSpriteRenderer.SkewTopX">
      <summary>
   The skew top x
   </summary>
    </member>
    <member name="F:Nez.PrototypeSpriteRenderer.SkewBottomX">
      <summary>
   The skew bottom x
   </summary>
    </member>
    <member name="F:Nez.PrototypeSpriteRenderer.SkewLeftY">
      <summary>
   The skew left y
   </summary>
    </member>
    <member name="F:Nez.PrototypeSpriteRenderer.SkewRightY">
      <summary>
   The skew right y
   </summary>
    </member>
    <member name="M:Nez.PrototypeSpriteRenderer.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.PrototypeSpriteRenderer" /> class.
   </summary>
    </member>
    <member name="M:Nez.PrototypeSpriteRenderer.#ctor(System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.PrototypeSpriteRenderer" /> class.
   </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
    </member>
    <member name="M:Nez.PrototypeSpriteRenderer.SetWidth(System.Single)">
      <summary>
   sets the width of the sprite
   </summary>
      <param name="width">Width.</param>
      <returns>The width.</returns>
    </member>
    <member name="M:Nez.PrototypeSpriteRenderer.SetHeight(System.Single)">
      <summary>
   sets the height of the sprite
   </summary>
      <param name="height">Height.</param>
      <returns>The height.</returns>
    </member>
    <member name="M:Nez.PrototypeSpriteRenderer.SetSkew(System.Single,System.Single,System.Single,System.Single)">
      <summary>
   sets the skew values for the sprite
   </summary>
      <param name="skewTopX">Skew top x.</param>
      <param name="skewBottomX">Skew bottom x.</param>
      <param name="skewLeftY">Skew left y.</param>
      <param name="skewRightY">Skew right y.</param>
      <returns>The skew.</returns>
    </member>
    <member name="M:Nez.PrototypeSpriteRenderer.OnAddedToEntity">
      <summary>
   Called when this component is added to a scene after all pending component changes are committed. At this point, the Entity field
   is set and the Entity.Scene is also set.
   </summary>
    </member>
    <member name="M:Nez.PrototypeSpriteRenderer.Render(Batcher,Camera)">
      <summary>
   Renders the specified batcher.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="camera">The camera.</param>
    </member>
    <member name="T:Nez.Sprites.ScrollingSpriteRenderer">
      <summary>
   Scrolling sprite. Note that ScrollingSprite overrides the Material so that it can wrap the UVs. This class requires the texture
   to not be part of an atlas so that wrapping can work.
   </summary>
    </member>
    <member name="F:Nez.Sprites.ScrollingSpriteRenderer.ScrollSpeedX">
      <summary>
   x speed of automatic scrolling in pixels/s
   </summary>
    </member>
    <member name="F:Nez.Sprites.ScrollingSpriteRenderer.ScrollSpeedY">
      <summary>
   y speed of automatic scrolling in pixels/s
   </summary>
    </member>
    <member name="P:Nez.Sprites.ScrollingSpriteRenderer.TextureScale">
      <summary>
   scale of the texture
   </summary>
      <value>The texture scale.</value>
    </member>
    <member name="M:Nez.Sprites.ScrollingSpriteRenderer.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Sprites.ScrollingSpriteRenderer" /> class.
   </summary>
    </member>
    <member name="M:Nez.Sprites.ScrollingSpriteRenderer.#ctor(Sprite)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Sprites.ScrollingSpriteRenderer" /> class.
   </summary>
      <param name="sprite">The sprite.</param>
    </member>
    <member name="M:Nez.Sprites.ScrollingSpriteRenderer.#ctor(Texture2D)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Sprites.ScrollingSpriteRenderer" /> class.
   </summary>
      <param name="texture">The texture.</param>
    </member>
    <member name="M:Nez.Sprites.ScrollingSpriteRenderer.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="T:Nez.Sprites.SpriteAnimator">
      <summary>
   SpriteAnimator handles the display and animation of a sprite
   </summary>
    </member>
    <member name="T:Nez.Sprites.SpriteAnimator.LoopMode">
      <summary>
   Enum LoopMode
   </summary>
    </member>
    <member name="T:Nez.Sprites.SpriteAnimator.State">
      <summary>
   Enum State
   </summary>
    </member>
    <member name="F:Nez.Sprites.SpriteAnimator.LoopMode.Loop">
      <summary>
   Play the sequence in a loop forever [A][B][C][A][B][C][A][B][C]...
   </summary>
    </member>
    <member name="F:Nez.Sprites.SpriteAnimator.LoopMode.Once">
      <summary>
   Play the sequence once [A][B][C] then pause and set time to 0 [A]
   </summary>
    </member>
    <member name="F:Nez.Sprites.SpriteAnimator.LoopMode.ClampForever">
      <summary>
   Plays back the animation once, [A][B][C]. When it reaches the end, it will keep playing the last frame and never stop playing
   </summary>
    </member>
    <member name="F:Nez.Sprites.SpriteAnimator.LoopMode.PingPong">
      <summary>
   Play the sequence in a ping pong loop forever [A][B][C][B][A][B][C][B]...
   </summary>
    </member>
    <member name="F:Nez.Sprites.SpriteAnimator.LoopMode.PingPongOnce">
      <summary>
   Play the sequence once forward then back to the start [A][B][C][B][A] then pause and set time to 0
   </summary>
    </member>
    <member name="F:Nez.Sprites.SpriteAnimator.State.None">
      <summary>
   The none
   </summary>
    </member>
    <member name="F:Nez.Sprites.SpriteAnimator.State.Running">
      <summary>
   The running
   </summary>
    </member>
    <member name="F:Nez.Sprites.SpriteAnimator.State.Paused">
      <summary>
   The paused
   </summary>
    </member>
    <member name="F:Nez.Sprites.SpriteAnimator.State.Completed">
      <summary>
   The completed
   </summary>
    </member>
    <member name="E:Nez.Sprites.SpriteAnimator.OnAnimationCompletedEvent">
      <summary>
   fired when an animation completes, includes the animation name;
   </summary>
    </member>
    <member name="F:Nez.Sprites.SpriteAnimator.Speed">
      <summary>
   animation playback speed
   </summary>
    </member>
    <member name="P:Nez.Sprites.SpriteAnimator.AnimationState">
      <summary>
   the current state of the animation
   </summary>
      <value>The state of the animation.</value>
    </member>
    <member name="P:Nez.Sprites.SpriteAnimator.CurrentAnimation">
      <summary>
   the current animation
   </summary>
      <value>The current animation.</value>
    </member>
    <member name="P:Nez.Sprites.SpriteAnimator.CurrentAnimationName">
      <summary>
   the name of the current animation
   </summary>
      <value>The name of the current animation.</value>
    </member>
    <member name="P:Nez.Sprites.SpriteAnimator.CurrentFrame">
      <summary>
   index of the current frame in sprite array of the current animation
   </summary>
      <value>The current frame.</value>
    </member>
    <member name="P:Nez.Sprites.SpriteAnimator.IsRunning">
      <summary>
   checks to see if the CurrentAnimation is running
   </summary>
      <value>
        <c>true</c> if this instance is running; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Sprites.SpriteAnimator.Animations">
      <summary>
   Provides access to list of available animations
   </summary>
      <value>The animations.</value>
    </member>
    <member name="M:Nez.Sprites.SpriteAnimator.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Sprites.SpriteAnimator" /> class.
   </summary>
    </member>
    <member name="M:Nez.Sprites.SpriteAnimator.#ctor(Sprite)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Sprites.SpriteAnimator" /> class.
   </summary>
      <param name="sprite">The sprite.</param>
    </member>
    <member name="M:Nez.Sprites.SpriteAnimator.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="M:Nez.Sprites.SpriteAnimator.AddAnimationsFromAtlas(SpriteAtlas)">
      <summary>
   adds all the animations from the SpriteAtlas
   </summary>
      <param name="atlas">The atlas.</param>
      <returns>SpriteAnimator.</returns>
    </member>
    <member name="M:Nez.Sprites.SpriteAnimator.AddAnimation(System.String,SpriteAnimation)">
      <summary>
   Adds a SpriteAnimation
   </summary>
      <param name="name">The name.</param>
      <param name="animation">The animation.</param>
      <returns>SpriteAnimator.</returns>
    </member>
    <member name="M:Nez.Sprites.SpriteAnimator.AddAnimation(System.String,Sprite[],System.Single)">
      <summary>
   Adds the animation.
   </summary>
      <param name="name">The name.</param>
      <param name="sprites">The sprites.</param>
      <param name="fps">The FPS.</param>
      <returns>SpriteAnimator.</returns>
    </member>
    <member name="M:Nez.Sprites.SpriteAnimator.AddAnimation(System.String,System.Single,Sprite[])">
      <summary>
   Adds the animation.
   </summary>
      <param name="name">The name.</param>
      <param name="fps">The FPS.</param>
      <param name="sprites">The sprites.</param>
      <returns>SpriteAnimator.</returns>
    </member>
    <member name="M:Nez.Sprites.SpriteAnimator.Play(System.String,System.Nullable{LoopMode})">
      <summary>
   plays the animation with the given name. If no loopMode is specified it is defaults to Loop
   </summary>
      <param name="name">The name.</param>
      <param name="loopMode">The loop mode.</param>
    </member>
    <member name="M:Nez.Sprites.SpriteAnimator.IsAnimationActive(System.String)">
      <summary>
   checks to see if the animation is playing (i.e. the animation is active. it may still be in the paused state)
   </summary>
      <param name="name">The name.</param>
      <returns>
        <c>true</c> if [is animation active] [the specified name]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.Sprites.SpriteAnimator.Pause">
      <summary>
   pauses the animator
   </summary>
    </member>
    <member name="M:Nez.Sprites.SpriteAnimator.UnPause">
      <summary>
   unpauses the animator
   </summary>
    </member>
    <member name="M:Nez.Sprites.SpriteAnimator.Stop">
      <summary>
   stops the current animation and nulls it out
   </summary>
    </member>
    <member name="T:Nez.Sprites.SpriteMime">
      <summary>
   this component will draw the same frame of spriteToMime every frame. The only difference in rendering is that SpriteMime uses its own
   localOffset and color. This allows you to use it for the purpose of shadows (by offsetting via localPosition) or silhouettes (with a
   Material that has a stencil read).
   </summary>
    </member>
    <member name="P:Nez.Sprites.SpriteMime.Width">
      <summary>
   width of the RenderableComponent. subclasses that do not override the bounds property must implement this!
   </summary>
      <value>The width.</value>
    </member>
    <member name="P:Nez.Sprites.SpriteMime.Height">
      <summary>
   height of the RenderableComponent. subclasses that do not override the bounds property must implement this!
   </summary>
      <value>The height.</value>
    </member>
    <member name="P:Nez.Sprites.SpriteMime.Bounds">
      <summary>
   the AABB that wraps this object. Used for camera culling.
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="M:Nez.Sprites.SpriteMime.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Sprites.SpriteMime" /> class.
   </summary>
    </member>
    <member name="M:Nez.Sprites.SpriteMime.#ctor(SpriteRenderer)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Sprites.SpriteMime" /> class.
   </summary>
      <param name="spriteToMime">The sprite to MIME.</param>
    </member>
    <member name="M:Nez.Sprites.SpriteMime.OnAddedToEntity">
      <summary>
   Called when this component is added to a scene after all pending component changes are committed. At this point, the Entity field
   is set and the Entity.Scene is also set.
   </summary>
    </member>
    <member name="M:Nez.Sprites.SpriteMime.Render(Batcher,Camera)">
      <summary>
   called by a Renderer. The Camera can be used for culling and the Batcher instance to draw with.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="T:Nez.SpriteOutlineRenderer">
      <summary>
   renders a sprite with an outline in a very inefficient (but simple) way. The sprite is rendered multiple times offset/colored then it
   is rendered normally on top of that.
   </summary>
    </member>
    <member name="P:Nez.SpriteOutlineRenderer.Width">
      <summary>
   width of the RenderableComponent. subclasses that do not override the bounds property must implement this!
   </summary>
      <value>The width.</value>
    </member>
    <member name="P:Nez.SpriteOutlineRenderer.Height">
      <summary>
   height of the RenderableComponent. subclasses that do not override the bounds property must implement this!
   </summary>
      <value>The height.</value>
    </member>
    <member name="P:Nez.SpriteOutlineRenderer.Bounds">
      <summary>
   the AABB that wraps this object. Used for camera culling.
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="F:Nez.SpriteOutlineRenderer.OutlineWidth">
      <summary>
   the width of the outline
   </summary>
    </member>
    <member name="F:Nez.SpriteOutlineRenderer.OutlineColor">
      <summary>
   the color the sprite will be tinted when it is rendered
   </summary>
    </member>
    <member name="M:Nez.SpriteOutlineRenderer.#ctor(SpriteRenderer)">
      <summary>
   the Sprite passed in will be disabled. The SpriteOutlineRenderer will handle manually calling its render method.
   </summary>
      <param name="sprite">Sprite.</param>
    </member>
    <member name="M:Nez.SpriteOutlineRenderer.OnEntityTransformChanged(Transform.Component)">
      <summary>
   Called when [entity transform changed].
   </summary>
      <param name="comp">The comp.</param>
    </member>
    <member name="M:Nez.SpriteOutlineRenderer.Render(Batcher,Camera)">
      <summary>
   called by a Renderer. The Camera can be used for culling and the Batcher instance to draw with.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="T:Nez.Sprites.SpriteRenderer">
      <summary>
   the most basic and common Renderable. Renders a Sprite/Texture.
   </summary>
    </member>
    <member name="P:Nez.Sprites.SpriteRenderer.Bounds">
      <summary>
   the AABB that wraps this object. Used for camera culling.
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="P:Nez.Sprites.SpriteRenderer.Origin">
      <summary>
   the origin of the Sprite. This is set automatically when setting a Sprite.
   </summary>
      <value>The origin.</value>
    </member>
    <member name="P:Nez.Sprites.SpriteRenderer.OriginNormalized">
      <summary>
   helper property for setting the origin in normalized fashion (0-1 for x and y)
   </summary>
      <value>The origin normalized.</value>
    </member>
    <member name="P:Nez.Sprites.SpriteRenderer.FlipX">
      <summary>
   determines if the sprite should be rendered normally or flipped horizontally
   </summary>
      <value>
        <c>true</c> if flip x; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Sprites.SpriteRenderer.FlipY">
      <summary>
   determines if the sprite should be rendered normally or flipped vertically
   </summary>
      <value>
        <c>true</c> if flip y; otherwise, <c>false</c>.</value>
    </member>
    <member name="F:Nez.Sprites.SpriteRenderer.SpriteEffects">
      <summary>
   Batchers passed along to the Batcher when rendering. flipX/flipY are helpers for setting this.
   </summary>
    </member>
    <member name="P:Nez.Sprites.SpriteRenderer.Sprite">
      <summary>
   the Sprite that should be displayed by this Sprite. When set, the origin of the Sprite is also set to match Sprite.origin.
   </summary>
      <value>The sprite.</value>
    </member>
    <member name="M:Nez.Sprites.SpriteRenderer.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Sprites.SpriteRenderer" /> class.
   </summary>
    </member>
    <member name="M:Nez.Sprites.SpriteRenderer.#ctor(Texture2D)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Sprites.SpriteRenderer" /> class.
   </summary>
      <param name="texture">The texture.</param>
    </member>
    <member name="M:Nez.Sprites.SpriteRenderer.#ctor(Sprite)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Sprites.SpriteRenderer" /> class.
   </summary>
      <param name="sprite">The sprite.</param>
    </member>
    <member name="M:Nez.Sprites.SpriteRenderer.SetSprite(Sprite)">
      <summary>
   sets the Sprite and updates the origin of the Sprite to match Sprite.origin. If for whatever reason you need
   an origin different from the Sprite either clone it or set the origin AFTER setting the Sprite here.
   </summary>
      <param name="sprite">The sprite.</param>
      <returns>SpriteRenderer.</returns>
    </member>
    <member name="M:Nez.Sprites.SpriteRenderer.SetTexture(Texture2D)">
      <summary>
   sets the Texture by creating a new sprite. See SetSprite() for details.
   </summary>
      <param name="texture">The texture.</param>
      <returns>SpriteRenderer.</returns>
    </member>
    <member name="M:Nez.Sprites.SpriteRenderer.SetOrigin(Vector2)">
      <summary>
   sets the origin for the Renderable
   </summary>
      <param name="origin">The origin.</param>
      <returns>SpriteRenderer.</returns>
    </member>
    <member name="M:Nez.Sprites.SpriteRenderer.SetOriginNormalized(Vector2)">
      <summary>
   helper for setting the origin in normalized fashion (0-1 for x and y)
   </summary>
      <param name="value">The value.</param>
      <returns>SpriteRenderer.</returns>
    </member>
    <member name="M:Nez.Sprites.SpriteRenderer.DrawOutline(Batcher,Camera,System.Int32)">
      <summary>
   Draws the Renderable with an outline. Note that this should be called on disabled Renderables since they shouldnt take part in default
   rendering if they need an ouline.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="camera">The camera.</param>
      <param name="offset">The offset.</param>
    </member>
    <member name="M:Nez.Sprites.SpriteRenderer.DrawOutline(Batcher,Camera,Color,System.Int32)">
      <summary>
   Draws the outline.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="camera">The camera.</param>
      <param name="outlineColor">Color of the outline.</param>
      <param name="offset">The offset.</param>
    </member>
    <member name="M:Nez.Sprites.SpriteRenderer.Render(Batcher,Camera)">
      <summary>
   called by a Renderer. The Camera can be used for culling and the Batcher instance to draw with.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="T:Nez.Sprites.SpriteTrail">
      <summary>
   renders and fades a series of copies of the Sprite on the same Entity. minDistanceBetweenInstances determines how often a trail
   sprite is added.
   </summary>
    </member>
    <member name="P:Nez.Sprites.SpriteTrail.Bounds">
      <summary>
   the AABB that wraps this object. Used for camera culling.
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="P:Nez.Sprites.SpriteTrail.MaxSpriteInstances">
      <summary>
   Gets or sets the maximum sprite instances.
   </summary>
      <value>The maximum sprite instances.</value>
    </member>
    <member name="F:Nez.Sprites.SpriteTrail.MinDistanceBetweenInstances">
      <summary>
   how far does the Sprite have to move before a new instance is spawned
   </summary>
    </member>
    <member name="F:Nez.Sprites.SpriteTrail.FadeDuration">
      <summary>
   total duration of the fade from initialColor to fadeToColor
   </summary>
    </member>
    <member name="F:Nez.Sprites.SpriteTrail.FadeDelay">
      <summary>
   delay before starting the color fade
   </summary>
    </member>
    <member name="F:Nez.Sprites.SpriteTrail.InitialColor">
      <summary>
   initial color of the trail instances
   </summary>
    </member>
    <member name="F:Nez.Sprites.SpriteTrail.FadeToColor">
      <summary>
   final color that will be lerped to over the course of fadeDuration
   </summary>
    </member>
    <member name="M:Nez.Sprites.SpriteTrail.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Sprites.SpriteTrail" /> class.
   </summary>
    </member>
    <member name="M:Nez.Sprites.SpriteTrail.#ctor(SpriteRenderer)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Sprites.SpriteTrail" /> class.
   </summary>
      <param name="sprite">The sprite.</param>
    </member>
    <member name="M:Nez.Sprites.SpriteTrail.SetMaxSpriteInstances(System.Int32)">
      <summary>
   Sets the maximum sprite instances.
   </summary>
      <param name="maxSpriteInstances">The maximum sprite instances.</param>
      <returns>SpriteTrail.</returns>
    </member>
    <member name="M:Nez.Sprites.SpriteTrail.SetMinDistanceBetweenInstances(System.Single)">
      <summary>
   Sets the minimum distance between instances.
   </summary>
      <param name="minDistanceBetweenInstances">The minimum distance between instances.</param>
      <returns>SpriteTrail.</returns>
    </member>
    <member name="M:Nez.Sprites.SpriteTrail.SetFadeDuration(System.Single)">
      <summary>
   Sets the duration of the fade.
   </summary>
      <param name="fadeDuration">Duration of the fade.</param>
      <returns>SpriteTrail.</returns>
    </member>
    <member name="M:Nez.Sprites.SpriteTrail.SetFadeDelay(System.Single)">
      <summary>
   Sets the fade delay.
   </summary>
      <param name="fadeDelay">The fade delay.</param>
      <returns>SpriteTrail.</returns>
    </member>
    <member name="M:Nez.Sprites.SpriteTrail.SetInitialColor(Color)">
      <summary>
   Sets the initial color.
   </summary>
      <param name="initialColor">The initial color.</param>
      <returns>SpriteTrail.</returns>
    </member>
    <member name="M:Nez.Sprites.SpriteTrail.SetFadeToColor(Color)">
      <summary>
   Sets the color of the fade to.
   </summary>
      <param name="fadeToColor">Color of the fade to.</param>
      <returns>SpriteTrail.</returns>
    </member>
    <member name="M:Nez.Sprites.SpriteTrail.EnableSpriteTrail">
      <summary>
   enables the SpriteTrail
   </summary>
      <returns>The sprite trail.</returns>
    </member>
    <member name="M:Nez.Sprites.SpriteTrail.DisableSpriteTrail(System.Boolean)">
      <summary>
   disables the SpriteTrail optionally waiting for the current trail to fade out first
   </summary>
      <param name="completeCurrentTrail">If set to <c>true</c> complete current trail.</param>
    </member>
    <member name="M:Nez.Sprites.SpriteTrail.OnAddedToEntity">
      <summary>
   Called when this component is added to a scene after all pending component changes are committed. At this point, the Entity field
   is set and the Entity.Scene is also set.
   </summary>
    </member>
    <member name="M:Nez.Sprites.SpriteTrail.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="M:Nez.Sprites.SpriteTrail.Render(Batcher,Camera)">
      <summary>
   called by a Renderer. The Camera can be used for culling and the Batcher instance to draw with.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="T:Nez.TiledSpriteRenderer">
      <summary>
   Tiled sprite. Note that TiledSprite overrides the Material so that it can wrap the UVs. This class requires the texture
   to not be part of an atlas so that wrapping can work.
   </summary>
    </member>
    <member name="P:Nez.TiledSpriteRenderer.Bounds">
      <summary>
   the AABB that wraps this object. Used for camera culling.
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="P:Nez.TiledSpriteRenderer.ScrollX">
      <summary>
   x value of the texture scroll
   </summary>
      <value>The scroll x.</value>
    </member>
    <member name="P:Nez.TiledSpriteRenderer.ScrollY">
      <summary>
   y value of the texture scroll
   </summary>
      <value>The scroll y.</value>
    </member>
    <member name="P:Nez.TiledSpriteRenderer.TextureScale">
      <summary>
   scale of the texture
   </summary>
      <value>The texture scale.</value>
    </member>
    <member name="P:Nez.TiledSpriteRenderer.Width">
      <summary>
   overridden width value so that the TiledSprite can have an independent width than its texture
   </summary>
      <value>The width.</value>
    </member>
    <member name="P:Nez.TiledSpriteRenderer.Height">
      <summary>
   overridden height value so that the TiledSprite can have an independent height than its texture
   </summary>
      <value>The height.</value>
    </member>
    <member name="M:Nez.TiledSpriteRenderer.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.TiledSpriteRenderer" /> class.
   </summary>
    </member>
    <member name="M:Nez.TiledSpriteRenderer.#ctor(Sprite)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.TiledSpriteRenderer" /> class.
   </summary>
      <param name="sprite">The sprite.</param>
    </member>
    <member name="M:Nez.TiledSpriteRenderer.#ctor(Texture2D)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.TiledSpriteRenderer" /> class.
   </summary>
      <param name="texture">The texture.</param>
    </member>
    <member name="M:Nez.TiledSpriteRenderer.Render(Batcher,Camera)">
      <summary>
   called by a Renderer. The Camera can be used for culling and the Batcher instance to draw with.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="T:Nez.IRenderable">
      <summary>
   interface that when applied to a Component will register it to be rendered by the Scene Renderers. Implement this very carefully! Changing
   things like layerDepth/renderLayer/material need to update the Scene RenderableComponentList
   </summary>
    </member>
    <member name="T:Nez.RenderableComparer">
      <summary>
   Comparer for sorting IRenderables. Sorts first by RenderLayer, then LayerDepth. If there is a tie Materials
   are used for the tie-breaker to avoid render state changes.
   </summary>
    </member>
    <member name="P:Nez.IRenderable.Bounds">
      <summary>
   the AABB that wraps this object. Used for camera culling.
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="P:Nez.IRenderable.Enabled">
      <summary>
   whether this IRenderable should be rendered or not
   </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.IRenderable.LayerDepth">
      <summary>
   standard Batcher layerdepth. 0 is in front and 1 is in back. Changing this value will trigger a sort of the renderableComponents
   list on the scene.
   </summary>
      <value>The layer depth.</value>
    </member>
    <member name="P:Nez.IRenderable.RenderLayer">
      <summary>
   lower renderLayers are in the front and higher are in the back, just like layerDepth but not clamped to 0-1. Note that this means
   higher renderLayers are sent to the Batcher first. An important fact when using the stencil buffer.
   </summary>
      <value>The render layer.</value>
    </member>
    <member name="P:Nez.IRenderable.Material">
      <summary>
   used by Renderers to specify how this sprite should be rendered. If non-null, it is automatically disposed of when the Component
   is removed from the Entity.
   </summary>
      <value>The material.</value>
    </member>
    <member name="P:Nez.IRenderable.IsVisible">
      <summary>
   the visibility of this Renderable. Changes in state end up calling the onBecameVisible/onBecameInvisible methods.
   </summary>
      <value>
        <c>true</c> if is visible; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:Nez.IRenderable.GetMaterial``1">
      <summary>
   helper for retrieving a Material subclass already casted
   </summary>
      <typeparam name="T">
      </typeparam>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.IRenderable.IsVisibleFromCamera(Camera)">
      <summary>
   returns true if the Renderables bounds intersects the Camera.bounds. Handles state switches for the isVisible flag. Use this method
   in your render method to see decide if you should render or not.
   </summary>
      <param name="camera">The camera.</param>
      <returns>
        <c>true</c>, if visible from camera was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.IRenderable.Render(Batcher,Camera)">
      <summary>
   called by a Renderer. The Camera can be used for culling and the Batcher instance to draw with.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="camera">The camera.</param>
    </member>
    <member name="M:Nez.IRenderable.DebugRender(Batcher)">
      <summary>
   renders the bounds only if there is no collider. Always renders a square on the origin.
   </summary>
      <param name="batcher">The batcher.</param>
    </member>
    <member name="M:Nez.RenderableComparer.Compare(IRenderable,IRenderable)">
      <summary>
   Compares the specified self.
   </summary>
      <param name="self">The self.</param>
      <param name="other">The other.</param>
      <returns>System.Int32.</returns>
    </member>
    <member name="T:Nez.EndCapType">
      <summary>
   Enum EndCapType
   </summary>
    </member>
    <member name="T:Nez.LineRenderer">
      <summary>
   Renders a trail behind a moving object
   Adapted from http://www.paradeofrain.com/2010/01/28/update-on-continuous-2d-trails-in-xna/
   </summary>
    </member>
    <member name="F:Nez.EndCapType.Standard">
      <summary>
   will not attempt to add any extra verts at joints
   </summary>
    </member>
    <member name="F:Nez.EndCapType.Jagged">
      <summary>
   all joints will be extruded out with an extra vert resulting in jagged, pointy joints
   </summary>
    </member>
    <member name="F:Nez.EndCapType.JaggedWithCutoff">
      <summary>
   the same as jagged but uses cutoffAngleForEndCapSubdivision to decide if a joint should be Jagged or Standard
   </summary>
    </member>
    <member name="F:Nez.EndCapType.Smooth">
      <summary>
   joints are smoothed with some extra geometry. Uses degreesPerSubdivision to decide how smooth to make each joint.
   </summary>
    </member>
    <member name="P:Nez.LineRenderer.Bounds">
      <summary>
   the AABB that wraps this object. Used for camera culling.
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="P:Nez.LineRenderer.UseWorldSpace">
      <summary>
   controls whether the lines are defined in world space or local
   </summary>
      <value>
        <c>true</c> if [use world space]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.LineRenderer.EndCapType">
      <summary>
   the type of end cap for all joints
   </summary>
      <value>The end type of the cap.</value>
    </member>
    <member name="P:Nez.LineRenderer.CutoffAngleForEndCapSubdivision">
      <summary>
   used by EndCapType.JaggedWithCutoff to decide what angle to stop creating jagged joints
   </summary>
      <value>The cutoff angle for end cap subdivision.</value>
    </member>
    <member name="P:Nez.LineRenderer.DegreesPerSubdivision">
      <summary>
   used by EndCapType.Smooth to decide how often to subdivide and smooth joints
   </summary>
      <value>The degrees per subdivision.</value>
    </member>
    <member name="M:Nez.LineRenderer.SetUseWorldSpace(System.Boolean)">
      <summary>
   sets whether local or world space will be used for rendering. Defaults to world space. Using local space will take into account
   all the Transform properties including scale/rotation/position.
   </summary>
      <param name="useWorldSpace">If set to <c>true</c> use world space.</param>
      <returns>The use world space.</returns>
    </member>
    <member name="M:Nez.LineRenderer.SetTexture(Texture2D)">
      <summary>
   sets the texture. Textures should be horizontally tileable. Pass in null to unset the texture.
   </summary>
      <param name="texture">Texture.</param>
      <returns>The texture.</returns>
    </member>
    <member name="M:Nez.LineRenderer.SetEndCapType(EndCapType)">
      <summary>
   sets the EndCapType used for rendering the line
   </summary>
      <param name="endCapType">End cap type.</param>
      <returns>The end cap type.</returns>
    </member>
    <member name="M:Nez.LineRenderer.SetCutoffAngleForEndCapSubdivision(System.Single)">
      <summary>
   sets the cutoff angle for use with EndCapType.JaggedWithCutoff. Any angles less than the cutoff angle will have jagged
   joints and all others will have standard.
   </summary>
      <param name="cutoffAngleForEndCapSubdivision">Cutoff angle for end cap subdivision.</param>
      <returns>The cutoff angle for end cap subdivision.</returns>
    </member>
    <member name="M:Nez.LineRenderer.SetDegreesPerSubdivision(System.Single)">
      <summary>
   sets the number of degrees between each subdivision for use with EndCapType.Smooth
   </summary>
      <param name="degreesPerSubdivision">Degrees per subdivision.</param>
      <returns>The per subdivision.</returns>
    </member>
    <member name="M:Nez.LineRenderer.SetStartEndWidths(System.Single,System.Single)">
      <summary>
   sets the start and end width. If these are set, the individual point widths will be ignored.
   </summary>
      <param name="startWidth">Start width.</param>
      <param name="endWidth">End width.</param>
      <returns>The start end widths.</returns>
    </member>
    <member name="M:Nez.LineRenderer.ClearStartEndWidths">
      <summary>
   clears the global start/end widths and goes back to using the individual point widths
   </summary>
      <returns>The start end widths.</returns>
    </member>
    <member name="M:Nez.LineRenderer.SetStartEndColors(Color,Color)">
      <summary>
   sets the start and end color. If these are set, the individual point colors will be ignored.
   </summary>
      <param name="startColor">Start color.</param>
      <param name="endColor">End color.</param>
      <returns>The start end colors.</returns>
    </member>
    <member name="M:Nez.LineRenderer.ClearStartEndColors">
      <summary>
   clears the global start/end colors and goes back to using the individual point colors
   </summary>
      <returns>The start end colors.</returns>
    </member>
    <member name="M:Nez.LineRenderer.SetPoints(Vector2[])">
      <summary>
   Sets the points.
   </summary>
      <param name="points">The points.</param>
      <returns>LineRenderer.</returns>
    </member>
    <member name="M:Nez.LineRenderer.AddPoint(Vector2,System.Single)">
      <summary>
   adds a point to the line. If start/end widths are not set each point should have a width set here.
   </summary>
      <param name="point">Point.</param>
      <param name="width">Width.</param>
      <returns>The point.</returns>
    </member>
    <member name="M:Nez.LineRenderer.AddPoint(Vector2,System.Single,Color)">
      <summary>
   adds a point to the line. If start/end widths are not set each point should have a width set here. If start/end colors
   are not set a color should be set as well.
   </summary>
      <param name="point">Point.</param>
      <param name="width">Width.</param>
      <param name="color">Color.</param>
      <returns>The point.</returns>
    </member>
    <member name="M:Nez.LineRenderer.AddPoints(Vector2[])">
      <summary>
   Adds the points.
   </summary>
      <param name="points">The points.</param>
      <returns>LineRenderer.</returns>
    </member>
    <member name="M:Nez.LineRenderer.UpdatePoint(System.Int32,Vector2)">
      <summary>
   updates a points properties
   </summary>
      <param name="index">Index.</param>
      <param name="point">Point.</param>
      <returns>The point.</returns>
    </member>
    <member name="M:Nez.LineRenderer.UpdatePoint(System.Int32,Vector2,System.Single)">
      <summary>
   updates a points properties
   </summary>
      <param name="index">Index.</param>
      <param name="point">Point.</param>
      <param name="width">Width.</param>
      <returns>The point.</returns>
    </member>
    <member name="M:Nez.LineRenderer.UpdatePoint(System.Int32,Vector2,System.Single,Color)">
      <summary>
   updates a points properties
   </summary>
      <param name="index">Index.</param>
      <param name="point">Point.</param>
      <param name="width">Width.</param>
      <param name="color">Color.</param>
      <returns>The point.</returns>
    </member>
    <member name="M:Nez.LineRenderer.ClearPoints">
      <summary>
   clears all the points
   </summary>
      <returns>The points.</returns>
    </member>
    <member name="M:Nez.LineRenderer.OnAddedToEntity">
      <summary>
   Called when this component is added to a scene after all pending component changes are committed. At this point, the Entity field
   is set and the Entity.Scene is also set.
   </summary>
    </member>
    <member name="M:Nez.LineRenderer.OnEntityTransformChanged(Transform.Component)">
      <summary>
   Called when [entity transform changed].
   </summary>
      <param name="comp">The comp.</param>
    </member>
    <member name="M:Nez.LineRenderer.IsVisibleFromCamera(Camera)">
      <summary>
   returns true if the Renderables bounds intersects the Camera.bounds. Handles state switches for the isVisible flag. Use this method
   in your render method to see decide if you should render or not.
   </summary>
      <param name="camera">Camera.</param>
      <returns>
        <c>true</c>, if visible from camera was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.LineRenderer.Render(Batcher,Camera)">
      <summary>
   called by a Renderer. The Camera can be used for culling and the Batcher instance to draw with.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="M:Nez.LineRenderer.DebugRender(Batcher)">
      <summary>
   renders the bounds only if there is no collider. Always renders a square on the origin.
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="T:Nez.Mesh">
      <summary>
   basic class that can be used to create simple meshes. For more advanced usage subclass and override what is needed. The general gist
   of usage is the following:
   - call setVertPositions
   - call setTriangles to set the triangle indices
   - call recalculateBounds to prepare the Mesh for rendering and culling
   </summary>
    </member>
    <member name="P:Nez.Mesh.Bounds">
      <summary>
   the AABB that wraps this object
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="M:Nez.Mesh.RecalculateBounds(System.Boolean)">
      <summary>
   recalculates the bounds and optionally sets the UVs. The UVs are setup to map the texture in a best fit fashion.
   </summary>
      <param name="recalculateUVs">If set to <c>true</c> recalculate U vs.</param>
      <returns>Mesh.</returns>
    </member>
    <member name="M:Nez.Mesh.SetVertexColorEnabled(System.Boolean)">
      <summary>
   sets whether vertex colors will be used by the shader
   </summary>
      <param name="shouldEnableVertexColors">If set to <c>true</c> should enable vertex colors.</param>
      <returns>The enable vertex colors.</returns>
    </member>
    <member name="M:Nez.Mesh.SetTexture(Texture2D)">
      <summary>
   sets the texture. Pass in null to unset the texture.
   </summary>
      <param name="texture">Texture.</param>
      <returns>The texture.</returns>
    </member>
    <member name="M:Nez.Mesh.SetColorForAllVerts(Color)">
      <summary>
   helper that sets the color for all verts
   </summary>
      <param name="color">Color.</param>
      <returns>Mesh.</returns>
    </member>
    <member name="M:Nez.Mesh.SetColor(Color)">
      <summary>
   sets the color for all of the verts
   </summary>
      <param name="color">Color.</param>
      <returns>The color.</returns>
    </member>
    <member name="M:Nez.Mesh.SetColorForVert(System.Int32,Color)">
      <summary>
   sets the vertex color for a single vert
   </summary>
      <param name="vertIndex">Vert index.</param>
      <param name="color">Color.</param>
      <returns>The color for vert.</returns>
    </member>
    <member name="M:Nez.Mesh.SetVertPositions(Vector2[])">
      <summary>
   sets the vert positions. If the positions array does not match the verts array size the verts array will be recreated.
   </summary>
      <param name="positions">Positions.</param>
      <returns>Mesh.</returns>
    </member>
    <member name="M:Nez.Mesh.SetVertPositions(Vector3[])">
      <summary>
   sets the vert positions. If the positions array does not match the verts array size the verts array will be recreated.
   </summary>
      <param name="positions">Positions.</param>
      <returns>Mesh.</returns>
    </member>
    <member name="M:Nez.Mesh.SetTriangles(System.Int32[])">
      <summary>
   sets the triangle indices for rendering
   </summary>
      <param name="triangles">Triangles.</param>
      <returns>The triangles.</returns>
    </member>
    <member name="M:Nez.Mesh.SetPrimitiveType(PrimitiveType)">
      <summary>
   Change the rendering primitive type.
   If it is PrimitiveType.TriangleStrip then you don't need to setTriangles.
   </summary>
      <param name="primitiveType">The ordering of the verticies.</param>
      <returns>The mesh.</returns>
    </member>
    <member name="M:Nez.Mesh.OnAddedToEntity">
      <summary>
   Called when this component is added to a scene after all pending component changes are committed. At this point, the Entity field
   is set and the Entity.Scene is also set.
   </summary>
    </member>
    <member name="M:Nez.Mesh.OnRemovedFromEntity">
      <summary>
   Called when [removed from entity].
   </summary>
    </member>
    <member name="M:Nez.Mesh.Render(Batcher,Camera)">
      <summary>
   called by a Renderer. The Camera can be used for culling and the Batcher instance to draw with.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="T:Nez.PolygonMesh">
      <summary>
   renders a basic, CCW, convex polygon
   </summary>
    </member>
    <member name="M:Nez.PolygonMesh.#ctor(Vector2[],System.Boolean)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.PolygonMesh" /> class.
   </summary>
      <param name="points">The points.</param>
      <param name="arePointsCCW">if set to <c>true</c> [are points CCW].</param>
    </member>
    <member name="T:Nez.RenderableComponent">
      <summary>
   concrete implementation of IRenderable. Contains convenience methods.
   VERY IMPORTANT! Subclasses MUST either override width/height or bounds!
   </summary>
    </member>
    <member name="P:Nez.RenderableComponent.Width">
      <summary>
   width of the RenderableComponent. subclasses that do not override the bounds property must implement this!
   </summary>
      <value>The width.</value>
    </member>
    <member name="P:Nez.RenderableComponent.Height">
      <summary>
   height of the RenderableComponent. subclasses that do not override the bounds property must implement this!
   </summary>
      <value>The height.</value>
    </member>
    <member name="P:Nez.RenderableComponent.Bounds">
      <summary>
   the AABB that wraps this object. Used for camera culling.
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="P:Nez.RenderableComponent.LayerDepth">
      <summary>
   standard Batcher layerdepth. 0 is in front and 1 is in back. Changing this value will trigger a sort of the renderableComponents
   list on the scene.
   </summary>
      <value>The layer depth.</value>
    </member>
    <member name="P:Nez.RenderableComponent.RenderLayer">
      <summary>
   lower renderLayers are in the front and higher are in the back, just like layerDepth but not clamped to 0-1. Note that this means
   higher renderLayers are sent to the Batcher first. An important fact when using the stencil buffer.
   </summary>
      <value>The render layer.</value>
    </member>
    <member name="F:Nez.RenderableComponent.Color">
      <summary>
   color passed along to the Batcher when rendering
   </summary>
    </member>
    <member name="P:Nez.RenderableComponent.Material">
      <summary>
   used by Renderers to specify how this sprite should be rendered
   </summary>
      <value>The material.</value>
    </member>
    <member name="P:Nez.RenderableComponent.LocalOffset">
      <summary>
   offset from the parent entity. Useful for adding multiple Renderables to an Entity that need specific positioning.
   </summary>
      <value>The local position.</value>
    </member>
    <member name="P:Nez.RenderableComponent.IsVisible">
      <summary>
   the visibility of this Renderable. Changes in state end up calling the onBecameVisible/onBecameInvisible methods.
   </summary>
      <value>
        <c>true</c> if is visible; otherwise, <c>false</c>.</value>
    </member>
    <member name="F:Nez.RenderableComponent.DebugRenderEnabled">
      <summary>
   The debug render enabled
   </summary>
    </member>
    <member name="M:Nez.RenderableComponent.OnEntityTransformChanged(Transform.Component)">
      <summary>
   called when the entity's position changes. This allows components to be aware that they have moved due to the parent
   entity moving.
   </summary>
      <param name="comp">The comp.</param>
    </member>
    <member name="M:Nez.RenderableComponent.Render(Batcher,Camera)">
      <summary>
   called by a Renderer. The Camera can be used for culling and the Batcher instance to draw with.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="M:Nez.RenderableComponent.DebugRender(Batcher)">
      <summary>
   renders the bounds only if there is no collider. Always renders a square on the origin.
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="M:Nez.RenderableComponent.OnRemovedFromEntity">
      <summary>
   Called when this component is removed from its entity. Do all cleanup here.
   </summary>
    </member>
    <member name="M:Nez.RenderableComponent.IsVisibleFromCamera(Camera)">
      <summary>
   returns true if the Renderables bounds intersects the Camera.bounds. Handles state switches for the isVisible flag. Use this method
   in your render method to see decide if you should render or not.
   </summary>
      <param name="camera">Camera.</param>
      <returns>
        <c>true</c>, if visible from camera was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.RenderableComponent.SetMaterial(Material)">
      <summary>
   Sets the material.
   </summary>
      <param name="material">The material.</param>
      <returns>RenderableComponent.</returns>
    </member>
    <member name="M:Nez.RenderableComponent.SetLayerDepth(System.Single)">
      <summary>
   standard Batcher layerdepth. 0 is in front and 1 is in back. Changing this value will trigger a sort of the renderableComponents
   </summary>
      <param name="layerDepth">Value.</param>
      <returns>The layer depth.</returns>
    </member>
    <member name="M:Nez.RenderableComponent.SetRenderLayer(System.Int32)">
      <summary>
   lower renderLayers are in the front and higher are in the back, just like layerDepth but not clamped to 0-1. Note that this means
   higher renderLayers are sent to the Batcher first. An important fact when using the stencil buffer.
   </summary>
      <param name="renderLayer">Render layer.</param>
      <returns>The render layer.</returns>
    </member>
    <member name="M:Nez.RenderableComponent.SetColor(Color)">
      <summary>
   color passed along to the Batcher when rendering
   </summary>
      <param name="color">Color.</param>
      <returns>The color.</returns>
    </member>
    <member name="M:Nez.RenderableComponent.SetLocalOffset(Vector2)">
      <summary>
   offset from the parent entity. Useful for adding multiple Renderables to an Entity that need specific positioning.
   </summary>
      <param name="offset">Offset.</param>
      <returns>The local offset.</returns>
    </member>
    <member name="M:Nez.RenderableComponent.GetMaterial``1">
      <summary>
   helper for retrieving a Material subclass already casted
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <returns>The material.</returns>
    </member>
    <member name="M:Nez.RenderableComponent.CompareTo(RenderableComponent)">
      <summary>
   sorted first by renderLayer, then layerDepth and finally material
   </summary>
      <param name="other">Other.</param>
      <returns>The to.</returns>
      <Docs>To be added.</Docs>
      <para>Returns the sort order of the current instance compared to the specified object.</para>
    </member>
    <member name="M:Nez.RenderableComponent.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.SpringGrid">
      <summary>
   grid of springs
   based on the tutorial: http://gamedevelopment.tutsplus.com/tutorials/make-a-neon-vector-shooter-for-ios-the-warping-grid--gamedev-14637
   </summary>
    </member>
    <member name="P:Nez.SpringGrid.Width">
      <summary>
   width of the grid
   </summary>
      <value>The width.</value>
    </member>
    <member name="P:Nez.SpringGrid.Height">
      <summary>
   height of the grid
   </summary>
      <value>The height.</value>
    </member>
    <member name="F:Nez.SpringGrid.GridMajorColor">
      <summary>
   color of all major grid lines
   </summary>
    </member>
    <member name="F:Nez.SpringGrid.GridMinorColor">
      <summary>
   color of all minor grid lines
   </summary>
    </member>
    <member name="F:Nez.SpringGrid.GridMajorThickness">
      <summary>
   thickness of all major grid lines
   </summary>
    </member>
    <member name="F:Nez.SpringGrid.GridMinorThickness">
      <summary>
   thickness of all minor grid lines
   </summary>
    </member>
    <member name="F:Nez.SpringGrid.GridMajorPeriodX">
      <summary>
   how often a major grid line should appear on the x axis
   </summary>
    </member>
    <member name="F:Nez.SpringGrid.GridMajorPeriodY">
      <summary>
   how often a major grid line should appear on the y axis
   </summary>
    </member>
    <member name="M:Nez.SpringGrid.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.SpringGrid" /> class.
   </summary>
    </member>
    <member name="M:Nez.SpringGrid.#ctor(Rectangle,Vector2)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.SpringGrid" /> class.
   </summary>
      <param name="gridSize">Size of the grid.</param>
      <param name="spacing">The spacing.</param>
    </member>
    <member name="M:Nez.SpringGrid.SetGridSizeAndSpacing(Rectangle,Vector2)">
      <summary>
   sets up the SpringGrid springs and points so that it can be drawn
   </summary>
      <param name="gridSize">Size of the grid.</param>
      <param name="spacing">The spacing.</param>
    </member>
    <member name="M:Nez.SpringGrid.ApplyDirectedForce(Vector2,Vector2,System.Single)">
      <summary>
   applies a force in a 3-dimensional direction
   </summary>
      <param name="force">Force.</param>
      <param name="position">Position.</param>
      <param name="radius">Radius.</param>
    </member>
    <member name="M:Nez.SpringGrid.ApplyDirectedForce(Vector3,Vector3,System.Single)">
      <summary>
   applies a force in a 3-dimensional direction
   </summary>
      <param name="force">Force.</param>
      <param name="position">Position.</param>
      <param name="radius">Radius.</param>
    </member>
    <member name="M:Nez.SpringGrid.ApplyImplosiveForce(System.Single,Vector2,System.Single)">
      <summary>
   applies a force that sucks the grid in towards the point
   </summary>
      <param name="force">Force.</param>
      <param name="position">Position.</param>
      <param name="radius">Radius.</param>
    </member>
    <member name="M:Nez.SpringGrid.ApplyImplosiveForce(System.Single,Vector3,System.Single)">
      <summary>
   applies a force that sucks the grid in towards the point
   </summary>
      <param name="force">Force.</param>
      <param name="position">Position.</param>
      <param name="radius">Radius.</param>
    </member>
    <member name="M:Nez.SpringGrid.ApplyExplosiveForce(System.Single,Vector2,System.Single)">
      <summary>
   applies a force the pushes the grid out aware from the point
   </summary>
      <param name="force">Force.</param>
      <param name="position">Position.</param>
      <param name="radius">Radius.</param>
    </member>
    <member name="M:Nez.SpringGrid.ApplyExplosiveForce(System.Single,Vector3,System.Single)">
      <summary>
   applies a force the pushes the grid out aware from the point
   </summary>
      <param name="force">Force.</param>
      <param name="position">Position.</param>
      <param name="radius">Radius.</param>
    </member>
    <member name="M:Nez.SpringGrid.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="M:Nez.SpringGrid.Render(Batcher,Camera)">
      <summary>
   called by a Renderer. The Camera can be used for culling and the Batcher instance to draw with.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="T:Nez.StencilLight">
      <summary>
   Light that works with the StencilLightRenderer. This uses a texture-less shader with a simple falloff calculation to draw a light.
   </summary>
    </member>
    <member name="P:Nez.StencilLight.Bounds">
      <summary>
   the AABB that wraps this object. Used for camera culling.
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="P:Nez.StencilLight.Radius">
      <summary>
   Radius of influence of the light
   </summary>
      <value>The radius.</value>
    </member>
    <member name="F:Nez.StencilLight.Power">
      <summary>
   Power of the light, from 0 (turned off) to 1 for maximum brightness
   </summary>
    </member>
    <member name="M:Nez.StencilLight.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.StencilLight" /> class.
   </summary>
    </member>
    <member name="M:Nez.StencilLight.#ctor(System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.StencilLight" /> class.
   </summary>
      <param name="radius">The radius.</param>
    </member>
    <member name="M:Nez.StencilLight.#ctor(System.Single,Color)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.StencilLight" /> class.
   </summary>
      <param name="radius">The radius.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.StencilLight.#ctor(System.Single,Color,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.StencilLight" /> class.
   </summary>
      <param name="radius">The radius.</param>
      <param name="color">The color.</param>
      <param name="power">The power.</param>
    </member>
    <member name="M:Nez.StencilLight.SetRadius(System.Single)">
      <summary>
   Sets the radius.
   </summary>
      <param name="radius">The radius.</param>
      <returns>StencilLight.</returns>
    </member>
    <member name="M:Nez.StencilLight.SetPower(System.Single)">
      <summary>
   Sets the power.
   </summary>
      <param name="power">The power.</param>
      <returns>StencilLight.</returns>
    </member>
    <member name="M:Nez.StencilLight.OnAddedToEntity">
      <summary>
   Called when this component is added to a scene after all pending component changes are committed. At this point, the Entity field
   is set and the Entity.Scene is also set.
   </summary>
    </member>
    <member name="M:Nez.StencilLight.OnEntityTransformChanged(Transform.Component)">
      <summary>
   called when the entity's position changes. This allows components to be aware that they have moved due to the parent
   entity moving.
   </summary>
      <param name="comp">The comp.</param>
    </member>
    <member name="M:Nez.StencilLight.Render(Batcher,Camera)">
      <summary>
   called by a Renderer. The Camera can be used for culling and the Batcher instance to draw with.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="M:Nez.StencilLight.DebugRender(Batcher)">
      <summary>
   renders the bounds only if there is no collider. Always renders a square on the origin.
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="T:Nez.TiledMapRenderer">
      <summary>
   Class TiledMapRenderer.
   Implements the <see cref="T:Nez.RenderableComponent" />
   Implements the <see cref="T:Nez.IUpdatable" /></summary>
      <seealso cref="T:Nez.RenderableComponent" />
      <seealso cref="T:Nez.IUpdatable" />
    </member>
    <member name="F:Nez.TiledMapRenderer.TiledMap">
      <summary>
   The tiled map
   </summary>
    </member>
    <member name="F:Nez.TiledMapRenderer.PhysicsLayer">
      <summary>
   The physics layer
   </summary>
    </member>
    <member name="F:Nez.TiledMapRenderer.LayerIndicesToRender">
      <summary>
   if null, all layers will be rendered
   </summary>
    </member>
    <member name="F:Nez.TiledMapRenderer.AutoUpdateTilesets">
      <summary>
   The automatic update tilesets
   </summary>
    </member>
    <member name="P:Nez.TiledMapRenderer.Width">
      <summary>
   width of the RenderableComponent. subclasses that do not override the bounds property must implement this!
   </summary>
      <value>The width.</value>
    </member>
    <member name="P:Nez.TiledMapRenderer.Height">
      <summary>
   height of the RenderableComponent. subclasses that do not override the bounds property must implement this!
   </summary>
      <value>The height.</value>
    </member>
    <member name="F:Nez.TiledMapRenderer.CollisionLayer">
      <summary>
   The collision layer
   </summary>
    </member>
    <member name="M:Nez.TiledMapRenderer.#ctor(TmxMap,System.String,System.Boolean)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.TiledMapRenderer" /> class.
   </summary>
      <param name="tiledMap">The tiled map.</param>
      <param name="collisionLayerName">Name of the collision layer.</param>
      <param name="shouldCreateColliders">if set to <c>true</c> [should create colliders].</param>
    </member>
    <member name="M:Nez.TiledMapRenderer.SetLayerToRender(System.String)">
      <summary>
   sets this component to only render a single layer
   </summary>
      <param name="layerName">Layer name.</param>
    </member>
    <member name="M:Nez.TiledMapRenderer.SetLayersToRender(System.String[])">
      <summary>
   sets which layers should be rendered by this component by name. If you know the indices you can set layerIndicesToRender directly.
   </summary>
      <param name="layerNames">Layer names.</param>
    </member>
    <member name="M:Nez.TiledMapRenderer.GetRowAtWorldPosition(System.Single)">
      <summary>
   Gets the row at world position.
   </summary>
      <param name="yPos">The y position.</param>
      <returns>System.Int32.</returns>
    </member>
    <member name="M:Nez.TiledMapRenderer.GetColumnAtWorldPosition(System.Single)">
      <summary>
   Gets the column at world position.
   </summary>
      <param name="xPos">The x position.</param>
      <returns>System.Int32.</returns>
    </member>
    <member name="M:Nez.TiledMapRenderer.GetTileAtWorldPosition(Vector2)">
      <summary>
   this method requires that you are using a collision layer setup in the constructor.
   </summary>
      <param name="worldPos">The world position.</param>
      <returns>TmxLayerTile.</returns>
    </member>
    <member name="M:Nez.TiledMapRenderer.GetTilesIntersectingBounds(Rectangle)">
      <summary>
   gets all the non-empty tiles that intersect the passed in bounds for the collision layer. The returned List can be put back in the
   pool via ListPool.free.
   </summary>
      <param name="bounds">Bounds.</param>
      <returns>The tiles intersecting bounds.</returns>
    </member>
    <member name="M:Nez.TiledMapRenderer.OnEntityTransformChanged(Transform.Component)">
      <summary>
   called when the entity's position changes. This allows components to be aware that they have moved due to the parent
   entity moving.
   </summary>
      <param name="comp">The comp.</param>
    </member>
    <member name="M:Nez.TiledMapRenderer.OnAddedToEntity">
      <summary>
   Called when this component is added to a scene after all pending component changes are committed. At this point, the Entity field
   is set and the Entity.Scene is also set.
   </summary>
    </member>
    <member name="M:Nez.TiledMapRenderer.OnRemovedFromEntity">
      <summary>
   Called when this component is removed from its entity. Do all cleanup here.
   </summary>
    </member>
    <member name="M:Nez.TiledMapRenderer.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="M:Nez.TiledMapRenderer.Render(Batcher,Camera)">
      <summary>
   called by a Renderer. The Camera can be used for culling and the Batcher instance to draw with.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="M:Nez.TiledMapRenderer.DebugRender(Batcher)">
      <summary>
   renders the bounds only if there is no collider. Always renders a square on the origin.
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="M:Nez.TiledMapRenderer.AddColliders">
      <summary>
   Adds the colliders.
   </summary>
    </member>
    <member name="M:Nez.TiledMapRenderer.RemoveColliders">
      <summary>
   Removes the colliders.
   </summary>
    </member>
    <member name="T:Nez.TrailRibbon">
      <summary>
   Renders a trail behind a moving object
   Adapted from http://www.paradeofrain.com/2010/01/28/update-on-continuous-2d-trails-in-xna/
   </summary>
    </member>
    <member name="P:Nez.TrailRibbon.Bounds">
      <summary>
   the AABB that wraps this object. Used for camera culling.
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="F:Nez.TrailRibbon.StartColor">
      <summary>
   starting color of the ribbon
   </summary>
    </member>
    <member name="F:Nez.TrailRibbon.EndColor">
      <summary>
   end (tail) color of the ribbon
   </summary>
    </member>
    <member name="F:Nez.TrailRibbon.RibbonRadius">
      <summary>
   max pixel radius of the ribbon
   </summary>
    </member>
    <member name="M:Nez.TrailRibbon.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.TrailRibbon" /> class.
   </summary>
    </member>
    <member name="M:Nez.TrailRibbon.#ctor(System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.TrailRibbon" /> class.
   </summary>
      <param name="ribbonLength">Length of the ribbon.</param>
    </member>
    <member name="M:Nez.TrailRibbon.OnEnabled">
      <summary>
   called when the parent Entity or this Component is enabled
   </summary>
    </member>
    <member name="M:Nez.TrailRibbon.OnAddedToEntity">
      <summary>
   Called when this component is added to a scene after all pending component changes are committed. At this point, the Entity field
   is set and the Entity.Scene is also set.
   </summary>
    </member>
    <member name="M:Nez.TrailRibbon.OnRemovedFromEntity">
      <summary>
   Called when this component is removed from its entity. Do all cleanup here.
   </summary>
    </member>
    <member name="M:Nez.TrailRibbon.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="M:Nez.TrailRibbon.IsVisibleFromCamera(Camera)">
      <summary>
   returns true if the Renderables bounds intersects the Camera.bounds. Handles state switches for the isVisible flag. Use this method
   in your render method to see decide if you should render or not.
   </summary>
      <param name="camera">Camera.</param>
      <returns>
        <c>true</c>, if visible from camera was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.TrailRibbon.Render(Batcher,Camera)">
      <summary>
   called by a Renderer. The Camera can be used for culling and the Batcher instance to draw with.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="T:Nez.UICanvas">
      <summary>
   simple component that houses a Stage and delegates update/render/debugRender calls
   </summary>
    </member>
    <member name="P:Nez.UICanvas.Width">
      <summary>
   width of the RenderableComponent. subclasses that do not override the bounds property must implement this!
   </summary>
      <value>The width.</value>
    </member>
    <member name="P:Nez.UICanvas.Height">
      <summary>
   height of the RenderableComponent. subclasses that do not override the bounds property must implement this!
   </summary>
      <value>The height.</value>
    </member>
    <member name="F:Nez.UICanvas.Stage">
      <summary>
   The stage
   </summary>
    </member>
    <member name="P:Nez.UICanvas.IsFullScreen">
      <summary>
   if true, the rawMousePosition will be used else the scaledMousePosition will be used. If your UI is in screen space (using a
   ScreenSpaceRenderer for example) then set this to true so input is not scaled.
   </summary>
      <value>
        <c>true</c> if this instance is full screen; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:Nez.UICanvas.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UICanvas" /> class.
   </summary>
    </member>
    <member name="M:Nez.UICanvas.OnAddedToEntity">
      <summary>
   Called when this component is added to a scene after all pending component changes are committed. At this point, the Entity field
   is set and the Entity.Scene is also set.
   </summary>
    </member>
    <member name="M:Nez.UICanvas.OnRemovedFromEntity">
      <summary>
   Called when this component is removed from its entity. Do all cleanup here.
   </summary>
    </member>
    <member name="M:Nez.UICanvas.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="M:Nez.UICanvas.Render(Batcher,Camera)">
      <summary>
   called by a Renderer. The Camera can be used for culling and the Batcher instance to draw with.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="M:Nez.UICanvas.DebugRender(Batcher)">
      <summary>
   renders the bounds only if there is no collider. Always renders a square on the origin.
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="M:Nez.UICanvas.ShowDialog(System.String,System.String,System.String)">
      <summary>
   displays a simple dialog with a button to close it
   </summary>
      <param name="title">Title.</param>
      <param name="messageText">Message text.</param>
      <param name="closeButtonText">Close button text.</param>
      <returns>The dialog.</returns>
    </member>
    <member name="T:Nez.WaterReflectionPlane">
      <summary>
   Class WaterReflectionPlane.
   Implements the <see cref="T:Nez.RenderableComponent" /></summary>
      <seealso cref="T:Nez.RenderableComponent" />
      <font color="red">Badly formed XML comment.</font>
    </member>
    <member name="P:Nez.WaterReflectionPlane.Width">
      <summary>
   width of the RenderableComponent. subclasses that do not override the bounds property must implement this!
   </summary>
      <value>The width.</value>
    </member>
    <member name="P:Nez.WaterReflectionPlane.Height">
      <summary>
   height of the RenderableComponent. subclasses that do not override the bounds property must implement this!
   </summary>
      <value>The height.</value>
    </member>
    <member name="P:Nez.WaterReflectionPlane.Material">
      <summary>
   used by Renderers to specify how this sprite should be rendered
   </summary>
      <value>The material.</value>
    </member>
    <member name="M:Nez.WaterReflectionPlane.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.WaterReflectionPlane" /> class.
   </summary>
    </member>
    <member name="M:Nez.WaterReflectionPlane.#ctor(System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.WaterReflectionPlane" /> class.
   </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
    </member>
    <member name="M:Nez.WaterReflectionPlane.Render(Batcher,Camera)">
      <summary>
   called by a Renderer. The Camera can be used for culling and the Batcher instance to draw with.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="T:Nez.FramesPerSecondCounter">
      <summary>
   Class FramesPerSecondCounter.
   Implements the <see cref="T:Nez.TextComponent" />
   Implements the <see cref="T:Nez.IUpdatable" /></summary>
      <seealso cref="T:Nez.TextComponent" />
      <seealso cref="T:Nez.IUpdatable" />
    </member>
    <member name="T:Nez.FramesPerSecondCounter.FPSDockPosition">
      <summary>
   Enum FPSDockPosition
   </summary>
    </member>
    <member name="F:Nez.FramesPerSecondCounter.FPSDockPosition.TopLeft">
      <summary>
   The top left
   </summary>
    </member>
    <member name="F:Nez.FramesPerSecondCounter.FPSDockPosition.TopRight">
      <summary>
   The top right
   </summary>
    </member>
    <member name="F:Nez.FramesPerSecondCounter.FPSDockPosition.BottomLeft">
      <summary>
   The bottom left
   </summary>
    </member>
    <member name="F:Nez.FramesPerSecondCounter.FPSDockPosition.BottomRight">
      <summary>
   The bottom right
   </summary>
    </member>
    <member name="F:Nez.FramesPerSecondCounter.TotalFrames">
      <summary>
   The total frames
   </summary>
    </member>
    <member name="F:Nez.FramesPerSecondCounter.AverageFramesPerSecond">
      <summary>
   The average frames per second
   </summary>
    </member>
    <member name="F:Nez.FramesPerSecondCounter.CurrentFramesPerSecond">
      <summary>
   The current frames per second
   </summary>
    </member>
    <member name="F:Nez.FramesPerSecondCounter.MaximumSamples">
      <summary>
   total number of samples that should be stored and averaged for calculating the FPS
   </summary>
    </member>
    <member name="P:Nez.FramesPerSecondCounter.DockPosition">
      <summary>
   position the FPS counter should be docked
   </summary>
      <value>The dock position.</value>
    </member>
    <member name="P:Nez.FramesPerSecondCounter.DockOffset">
      <summary>
   offset from dockPosition the FPS counter should be drawn
   </summary>
      <value>The dock offset.</value>
    </member>
    <member name="M:Nez.FramesPerSecondCounter.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.FramesPerSecondCounter" /> class.
   </summary>
    </member>
    <member name="M:Nez.FramesPerSecondCounter.#ctor(BitmapFont,Color,FPSDockPosition,System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.FramesPerSecondCounter" /> class.
   </summary>
      <param name="font">The font.</param>
      <param name="color">The color.</param>
      <param name="dockPosition">The dock position.</param>
      <param name="maximumSamples">The maximum samples.</param>
    </member>
    <member name="M:Nez.FramesPerSecondCounter.#ctor(NezSpriteFont,Color,FPSDockPosition,System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.FramesPerSecondCounter" /> class.
   </summary>
      <param name="font">The font.</param>
      <param name="color">The color.</param>
      <param name="dockPosition">The dock position.</param>
      <param name="maximumSamples">The maximum samples.</param>
    </member>
    <member name="M:Nez.FramesPerSecondCounter.Reset">
      <summary>
   Resets this instance.
   </summary>
    </member>
    <member name="M:Nez.FramesPerSecondCounter.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="M:Nez.FramesPerSecondCounter.IsVisibleFromCamera(Camera)">
      <summary>
   returns true if the Renderables bounds intersects the Camera.bounds. Handles state switches for the isVisible flag. Use this method
   in your render method to see decide if you should render or not.
   </summary>
      <param name="camera">Camera.</param>
      <returns>
        <c>true</c>, if visible from camera was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.FramesPerSecondCounter.Render(Batcher,Camera)">
      <summary>
   Renders the specified batcher.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="camera">The camera.</param>
    </member>
    <member name="M:Nez.FramesPerSecondCounter.DebugRender(Batcher)">
      <summary>
   renders the bounds only if there is no collider. Always renders a square on the origin.
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="M:Nez.FramesPerSecondCounter.SetDockOffset(Vector2)">
      <summary>
   Sets how far the fps text will appear from the edges of the screen.
   </summary>
      <param name="dockOffset">Offset from screen edges</param>
      <returns>FramesPerSecondCounter.</returns>
    </member>
    <member name="M:Nez.FramesPerSecondCounter.SetDockPosition(FPSDockPosition)">
      <summary>
   Sets which corner of the screen the fps text will show.
   </summary>
      <param name="dockPosition">Corner of the screen</param>
      <returns>FramesPerSecondCounter.</returns>
    </member>
    <member name="T:Nez.MarkupText">
      <summary>
   MarkupText lets you set fonts, textures and conditionals and provide some XML text to render that uses them. You must first
   set the fonts, textures and conditionals before you can use them in your markup.
   <![CDATA[
   <markuptext face="RegularFont" color="#ffffff" align="left">
   <font face="Large" color="#00ff00" scale="3.2,3.2">Lorem Ipsum</font>
   <p align="right">Some more text <text color='#ff9900'>with color</text> in the middle</p>
   <p align="center">Images are inlined too <img src="texture" scale="2,2" /></p>
   <if condition="isTrue"><img src="otherTexture" scale="0.2,0.2" /></if>
   <p>conditions can be negated as well <if condition="!isTrue">isTrue isnt true<else>isTrue is true</else></if></p>
   </markuptext>
   ]]></summary>
    </member>
    <member name="P:Nez.MarkupText.Width">
      <summary>
   width of the RenderableComponent. subclasses that do not override the bounds property must implement this!
   </summary>
      <value>The width.</value>
    </member>
    <member name="P:Nez.MarkupText.Height">
      <summary>
   height of the RenderableComponent. subclasses that do not override the bounds property must implement this!
   </summary>
      <value>The height.</value>
    </member>
    <member name="P:Nez.MarkupText.Text">
      <summary>
   Gets the text.
   </summary>
      <value>The text.</value>
    </member>
    <member name="P:Nez.MarkupText.TextWidth">
      <summary>
   Gets the width of the text.
   </summary>
      <value>The width of the text.</value>
    </member>
    <member name="M:Nez.MarkupText.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.MarkupText" /> class.
   </summary>
    </member>
    <member name="M:Nez.MarkupText.#ctor(System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.MarkupText" /> class.
   </summary>
      <param name="textWidth">Width of the text.</param>
    </member>
    <member name="M:Nez.MarkupText.SetText(System.String)">
      <summary>
   sets the text used for the run. Text should be valid XML.
   </summary>
      <param name="text">Text.</param>
      <returns>The text.</returns>
    </member>
    <member name="M:Nez.MarkupText.SetTextWidth(System.Single)">
      <summary>
   sets the width that the run will fill
   </summary>
      <param name="textWidth">Width.</param>
      <returns>The width.</returns>
    </member>
    <member name="M:Nez.MarkupText.SetFont(System.String,IFont)">
      <summary>
   sets a font that can be used in a text tag via the font attribute
   </summary>
      <param name="name">Name.</param>
      <param name="font">Font.</param>
      <returns>The font.</returns>
    </member>
    <member name="M:Nez.MarkupText.SetTexture(System.String,Texture2D)">
      <summary>
   sets a texture which can be used in an img tag via the source attribute
   </summary>
      <param name="name">Name.</param>
      <param name="texture">Texture.</param>
      <returns>The texture.</returns>
    </member>
    <member name="M:Nez.MarkupText.SetConditional(System.String,System.Boolean)">
      <summary>
   sets a conditional which can be used in an if tag with a condition attribute. It is also valid to negate the condition by
   prepending a ! to the name in the if tag
   </summary>
      <param name="name">Name.</param>
      <param name="conditional">Conditional.</param>
      <returns>The conditional.</returns>
    </member>
    <member name="M:Nez.MarkupText.Render(Batcher,Camera)">
      <summary>
   renders the MarkupText
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="M:Nez.MarkupText.Compile">
      <summary>
   compiles the current text to prepare it for rendering
   </summary>
      <exception cref="T:System.InvalidOperationException">Invalid alignemnt: " + value</exception>
    </member>
    <member name="T:Nez.TextComponent">
      <summary>
   Class TextComponent.
   Implements the <see cref="T:Nez.Sprites.SpriteRenderer" /></summary>
      <seealso cref="T:Nez.Sprites.SpriteRenderer" />
    </member>
    <member name="P:Nez.TextComponent.Bounds">
      <summary>
   the AABB that wraps this object. Used for camera culling.
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="P:Nez.TextComponent.Text">
      <summary>
   text to draw
   </summary>
      <value>The text.</value>
    </member>
    <member name="P:Nez.TextComponent.HorizontalOrigin">
      <summary>
   horizontal alignment of the text
   </summary>
      <value>The horizontal origin.</value>
    </member>
    <member name="P:Nez.TextComponent.VerticalOrigin">
      <summary>
   vertical alignment of the text
   </summary>
      <value>The vertical origin.</value>
    </member>
    <member name="M:Nez.TextComponent.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.TextComponent" /> class.
   </summary>
    </member>
    <member name="M:Nez.TextComponent.#ctor(IFont,System.String,Vector2,Color)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.TextComponent" /> class.
   </summary>
      <param name="font">The font.</param>
      <param name="text">The text.</param>
      <param name="localOffset">The local offset.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.TextComponent.SetFont(IFont)">
      <summary>
   Sets the font.
   </summary>
      <param name="font">The font.</param>
      <returns>TextComponent.</returns>
    </member>
    <member name="M:Nez.TextComponent.SetText(System.String)">
      <summary>
   Sets the text.
   </summary>
      <param name="text">The text.</param>
      <returns>TextComponent.</returns>
    </member>
    <member name="M:Nez.TextComponent.SetHorizontalAlign(HorizontalAlign)">
      <summary>
   Sets the horizontal align.
   </summary>
      <param name="hAlign">The h align.</param>
      <returns>TextComponent.</returns>
    </member>
    <member name="M:Nez.TextComponent.SetVerticalAlign(VerticalAlign)">
      <summary>
   Sets the vertical align.
   </summary>
      <param name="vAlign">The v align.</param>
      <returns>TextComponent.</returns>
    </member>
    <member name="M:Nez.TextComponent.Render(Batcher,Camera)">
      <summary>
   called by a Renderer. The Camera can be used for culling and the Batcher instance to draw with.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="T:Nez.TextRun">
      <summary>
   provides a cached run of text for super fast text drawing. Note that this is only appropriate for text that doesnt change often
   and doesnt move.
   </summary>
    </member>
    <member name="P:Nez.TextRun.Width">
      <summary>
   Gets the width.
   </summary>
      <value>The width.</value>
    </member>
    <member name="P:Nez.TextRun.Height">
      <summary>
   Gets the height.
   </summary>
      <value>The height.</value>
    </member>
    <member name="P:Nez.TextRun.Origin">
      <summary>
   Gets the origin.
   </summary>
      <value>The origin.</value>
    </member>
    <member name="F:Nez.TextRun.Rotation">
      <summary>
   The rotation
   </summary>
    </member>
    <member name="F:Nez.TextRun.Position">
      <summary>
   The position
   </summary>
    </member>
    <member name="P:Nez.TextRun.Text">
      <summary>
   text to draw
   </summary>
      <value>The text.</value>
    </member>
    <member name="P:Nez.TextRun.HorizontalOrigin">
      <summary>
   horizontal alignment of the text
   </summary>
      <value>The horizontal origin.</value>
    </member>
    <member name="P:Nez.TextRun.VerticalOrigin">
      <summary>
   vertical alignment of the text
   </summary>
      <value>The vertical origin.</value>
    </member>
    <member name="M:Nez.TextRun.#ctor(BitmapFont)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.TextRun" /> class.
   </summary>
      <param name="font">The font.</param>
    </member>
    <member name="M:Nez.TextRun.SetFont(BitmapFont)">
      <summary>
   Sets the font.
   </summary>
      <param name="font">The font.</param>
      <returns>TextRun.</returns>
    </member>
    <member name="M:Nez.TextRun.SetText(System.String)">
      <summary>
   Sets the text.
   </summary>
      <param name="text">The text.</param>
      <returns>TextRun.</returns>
    </member>
    <member name="M:Nez.TextRun.SetHorizontalAlign(HorizontalAlign)">
      <summary>
   Sets the horizontal align.
   </summary>
      <param name="hAlign">The h align.</param>
      <returns>TextRun.</returns>
    </member>
    <member name="M:Nez.TextRun.SetVerticalAlign(VerticalAlign)">
      <summary>
   Sets the vertical align.
   </summary>
      <param name="vAlign">The v align.</param>
      <returns>TextRun.</returns>
    </member>
    <member name="M:Nez.TextRun.Compile">
      <summary>
   compiles the text into raw verts/texture coordinates. This method must be called anytime text or any other properties are
   changed.
   </summary>
    </member>
    <member name="M:Nez.TextRun.Render(Batcher)">
      <summary>
   Renders the specified batcher.
   </summary>
      <param name="batcher">The batcher.</param>
    </member>
    <member name="T:Nez.TextRunComponent">
      <summary>
   very basic wrapper around TextRun. Note that the TextRunComponent.compile method should be used not TextRun.compile so that
   the Component data can be passed off to the TextRun.
   </summary>
    </member>
    <member name="P:Nez.TextRunComponent.Width">
      <summary>
   width of the RenderableComponent. subclasses that do not override the bounds property must implement this!
   </summary>
      <value>The width.</value>
    </member>
    <member name="P:Nez.TextRunComponent.Height">
      <summary>
   height of the RenderableComponent. subclasses that do not override the bounds property must implement this!
   </summary>
      <value>The height.</value>
    </member>
    <member name="P:Nez.TextRunComponent.TextRun">
      <summary>
   Gets or sets the text run.
   </summary>
      <value>The text run.</value>
    </member>
    <member name="M:Nez.TextRunComponent.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.TextRunComponent" /> class.
   </summary>
    </member>
    <member name="M:Nez.TextRunComponent.#ctor(TextRun)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.TextRunComponent" /> class.
   </summary>
      <param name="textRun">The text run.</param>
    </member>
    <member name="M:Nez.TextRunComponent.Compile">
      <summary>
   calls through to TextRun.compile and handles marshalling some data between this Component and the underlying TextRun
   </summary>
    </member>
    <member name="M:Nez.TextRunComponent.Render(Batcher,Camera)">
      <summary>
   called by a Renderer. The Camera can be used for culling and the Batcher instance to draw with.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="T:Nez.CameraShake">
      <summary>
   Class CameraShake.
   Implements the <see cref="T:Nez.Component" />
   Implements the <see cref="T:Nez.IUpdatable" /></summary>
      <seealso cref="T:Nez.Component" />
      <seealso cref="T:Nez.IUpdatable" />
    </member>
    <member name="M:Nez.CameraShake.Shake(System.Single,System.Single,Vector2)">
      <summary>
   if the shake is already running this will overwrite the current values only if shakeIntensity &gt; the current shakeIntensity.
   if the shake is not currently active it will be started.
   </summary>
      <param name="shakeIntensity">how much should we shake it</param>
      <param name="shakeDegredation">higher values cause faster degradation</param>
      <param name="shakeDirection">Vector3.zero will result in a shake on just the x/y axis. any other values will result in the passed
   in shakeDirection * intensity being the offset the camera is moved</param>
    </member>
    <member name="M:Nez.CameraShake.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="T:Nez.Colorchannels">
      <summary>
   Enum Colorchannels
   </summary>
    </member>
    <member name="T:Nez.WaveFunctions">
      <summary>
   Enum WaveFunctions
   </summary>
    </member>
    <member name="T:Nez.ColorCycler">
      <summary>
   takes a RenderableComponent and cycles the color using different wave forms. A specific color channel can be affected or all of them.
   Useful for making flickering lights and adding atmosphere.
   </summary>
    </member>
    <member name="F:Nez.Colorchannels.None">
      <summary>
   The none
   </summary>
    </member>
    <member name="F:Nez.Colorchannels.All">
      <summary>
   All
   </summary>
    </member>
    <member name="F:Nez.Colorchannels.Red">
      <summary>
   The red
   </summary>
    </member>
    <member name="F:Nez.Colorchannels.Green">
      <summary>
   The green
   </summary>
    </member>
    <member name="F:Nez.Colorchannels.Blue">
      <summary>
   The blue
   </summary>
    </member>
    <member name="F:Nez.WaveFunctions.Sin">
      <summary>
   The sin
   </summary>
    </member>
    <member name="F:Nez.WaveFunctions.Triangle">
      <summary>
   The triangle
   </summary>
    </member>
    <member name="F:Nez.WaveFunctions.Square">
      <summary>
   The square
   </summary>
    </member>
    <member name="F:Nez.WaveFunctions.SawTooth">
      <summary>
   The saw tooth
   </summary>
    </member>
    <member name="F:Nez.WaveFunctions.IntertedSawTooth">
      <summary>
   The interted saw tooth
   </summary>
    </member>
    <member name="F:Nez.WaveFunctions.Random">
      <summary>
   The random
   </summary>
    </member>
    <member name="F:Nez.ColorCycler.ColorChannel">
      <summary>
   The color channel
   </summary>
    </member>
    <member name="F:Nez.ColorCycler.WaveFunction">
      <summary>
   The wave function
   </summary>
    </member>
    <member name="F:Nez.ColorCycler.Offset">
      <summary>
   This value is added to the final result. 0 - 1 range.
   </summary>
    </member>
    <member name="F:Nez.ColorCycler.Amplitude">
      <summary>
   this value is multiplied by the calculated value
   </summary>
    </member>
    <member name="F:Nez.ColorCycler.Phase">
      <summary>
   start point in wave function. 0 - 1 range.
   </summary>
    </member>
    <member name="F:Nez.ColorCycler.Frequency">
      <summary>
   cycles per second
   </summary>
    </member>
    <member name="F:Nez.ColorCycler.AffectsIntensity">
      <summary>
   The affects intensity
   </summary>
    </member>
    <member name="M:Nez.ColorCycler.OnAddedToEntity">
      <summary>
   Called when this component is added to a scene after all pending component changes are committed. At this point, the Entity field
   is set and the Entity.Scene is also set.
   </summary>
    </member>
    <member name="M:Nez.ColorCycler.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="T:Nez.FollowCamera">
      <summary>
   basic follow camera. LockOn mode uses no deadzone and just centers the camera on the target. CameraWindow mode wraps a deadzone
   around the target allowing it to move within the deadzone without moving the camera.
   </summary>
    </member>
    <member name="T:Nez.FollowCamera.CameraStyle">
      <summary>
   Enum CameraStyle
   </summary>
    </member>
    <member name="T:Nez.FollowCamera.Measurement">
      <summary>
   Enum Measurement
   </summary>
    </member>
    <member name="F:Nez.FollowCamera.CameraStyle.LockOn">
      <summary>
   The lock on
   </summary>
    </member>
    <member name="F:Nez.FollowCamera.CameraStyle.CameraWindow">
      <summary>
   The camera window
   </summary>
    </member>
    <member name="F:Nez.FollowCamera.Measurement.FixedPixel">
      <summary>
   Size is measured in pixel.
   Does not change with the Camera <see cref="P:Nez.Camera.Bounds" /> and <see cref="P:Nez.Camera.Zoom" /> level.
   </summary>
    </member>
    <member name="F:Nez.FollowCamera.Measurement.ScaledCameraBounds">
      <summary>
   Size is measured in % of Camera <see cref="P:Nez.Camera.Bounds" />.
   Where 1.0f equals the whole Camera Size and 0.5f is half the Camera size.
   Scales automatically with the Camera <see cref="P:Nez.Camera.Bounds" /> and <see cref="P:Nez.Camera.Zoom" /> level.
   </summary>
    </member>
    <member name="F:Nez.FollowCamera.Camera">
      <summary>
   The camera
   </summary>
    </member>
    <member name="F:Nez.FollowCamera.FollowLerp">
      <summary>
   how fast the camera closes the distance to the target position
   </summary>
    </member>
    <member name="F:Nez.FollowCamera.Deadzone">
      <summary>
   when in <see cref="F:Nez.FollowCamera.CameraStyle.CameraWindow" /> mode used as a bounding box around the camera position
   to allow the targetEntity to movement inside it without moving the camera.
   when in <see cref="F:Nez.FollowCamera.CameraStyle.LockOn" /> mode only the deadzone x/y values are used as offset.
   This is set to sensible defaults when you call <see cref="M:Nez.FollowCamera.Follow(Entity,CameraStyle,Measurement)" /> but you are
   free to override <see cref="F:Nez.FollowCamera.Deadzone" /> to get a custom deadzone directly or via the helper <see cref="M:Nez.FollowCamera.SetCenteredDeadzone(System.Int32,System.Int32)" />.
   </summary>
    </member>
    <member name="F:Nez.FollowCamera.FocusOffset">
      <summary>
   offset from the screen center that the camera will focus on
   </summary>
    </member>
    <member name="F:Nez.FollowCamera.MapLockEnabled">
      <summary>
   If true, the camera position will not got out of the map rectangle (0,0, mapwidth, mapheight)
   </summary>
    </member>
    <member name="F:Nez.FollowCamera.MapSize">
      <summary>
   Contains the width and height of the current map.
   </summary>
    </member>
    <member name="M:Nez.FollowCamera.#ctor(Entity,Camera,CameraStyle,Measurement)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.FollowCamera" /> class.
   </summary>
      <param name="targetEntity">The target entity.</param>
      <param name="camera">The camera.</param>
      <param name="cameraStyle">The camera style.</param>
      <param name="deadzoneMeasurement">The deadzone measurement.</param>
    </member>
    <member name="M:Nez.FollowCamera.#ctor(Entity,CameraStyle,Measurement)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.FollowCamera" /> class.
   </summary>
      <param name="targetEntity">The target entity.</param>
      <param name="cameraStyle">The camera style.</param>
      <param name="deadzoneMeasurement">The deadzone measurement.</param>
    </member>
    <member name="M:Nez.FollowCamera.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.FollowCamera" /> class.
   </summary>
    </member>
    <member name="M:Nez.FollowCamera.OnAddedToEntity">
      <summary>
   Called when this component is added to a scene after all pending component changes are committed. At this point, the Entity field
   is set and the Entity.Scene is also set.
   </summary>
    </member>
    <member name="M:Nez.FollowCamera.OnRemovedFromEntity">
      <summary>
   Called when this component is removed from its entity. Do all cleanup here.
   </summary>
    </member>
    <member name="M:Nez.FollowCamera.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="M:Nez.FollowCamera.DebugRender(Batcher)">
      <summary>
   Debugs the render.
   </summary>
      <param name="batcher">The batcher.</param>
    </member>
    <member name="M:Nez.FollowCamera.Follow(Entity,CameraStyle,Measurement)">
      <summary>
   Follows the specified target entity.
   </summary>
      <param name="targetEntity">The target entity.</param>
      <param name="cameraStyle">The camera style.</param>
      <param name="deadzoneMeasurement">The deadzone measurement.</param>
    </member>
    <member name="M:Nez.FollowCamera.SetCenteredDeadzone(System.Int32,System.Int32)">
      <summary>
   sets up the deadzone centered in the current cameras bounds with the given size
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
    </member>
    <member name="M:Nez.FollowCamera.SetCenteredDeadzoneInScreenspace(System.Single,System.Single)">
      <summary>
   sets up the deadzone centered in the current cameras bounds with the given size
   </summary>
      <param name="width">Width in % of screenspace. Between 0.0 and 1.0</param>
      <param name="height">Height in % of screenspace. Between 0.0 and 1.0</param>
    </member>
    <member name="T:Nez.IUpdatable">
      <summary>
   interface that when added to a Component lets Nez know that it wants the update method called each frame as long as the Component
   and Entity are enabled.
   </summary>
    </member>
    <member name="T:Nez.IUpdatableComparer">
      <summary>
   Comparer for sorting IUpdatables
   </summary>
    </member>
    <member name="P:Nez.IUpdatable.Enabled">
      <summary>
   Gets a value indicating whether this <see cref="T:Nez.IUpdatable" /> is enabled.
   </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.IUpdatable.UpdateOrder">
      <summary>
   Gets the update order.
   </summary>
      <value>The update order.</value>
    </member>
    <member name="M:Nez.IUpdatable.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="M:Nez.IUpdatableComparer.Compare(IUpdatable,IUpdatable)">
      <summary>
   Compares the specified a.
   </summary>
      <param name="a">a.</param>
      <param name="b">The b.</param>
      <returns>System.Int32.</returns>
    </member>
    <member name="T:Nez.ComponentList">
      <summary>
   Class ComponentList.
   </summary>
    </member>
    <member name="M:Nez.ComponentList.#ctor(Entity)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.ComponentList" /> class.
   </summary>
      <param name="entity">The entity.</param>
    </member>
    <member name="P:Nez.ComponentList.Count">
      <summary>
   Gets the count.
   </summary>
      <value>The count.</value>
    </member>
    <member name="P:Nez.ComponentList.Item(System.Int32)">
      <summary>
   Gets the <see cref="T:Nez.Component" /> at the specified index.
   </summary>
      <param name="index">The index.</param>
      <returns>Component.</returns>
    </member>
    <member name="M:Nez.ComponentList.MarkEntityListUnsorted">
      <summary>
   Marks the entity list unsorted.
   </summary>
    </member>
    <member name="M:Nez.ComponentList.Add(Component)">
      <summary>
   Adds the specified component.
   </summary>
      <param name="component">The component.</param>
    </member>
    <member name="M:Nez.ComponentList.Remove(Component)">
      <summary>
   Removes the specified component.
   </summary>
      <param name="component">The component.</param>
    </member>
    <member name="M:Nez.ComponentList.RemoveAllComponents">
      <summary>
   removes all components from the component list immediately
   </summary>
    </member>
    <member name="M:Nez.ComponentList.GetComponent``1(System.Boolean)">
      <summary>
   Gets the first component of type T and returns it. Optionally skips checking un-initialized Components (Components who have not yet had their
   onAddedToEntity method called). If no components are found returns null.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="onlyReturnInitializedComponents">If set to <c>true</c> only return initialized components.</param>
      <returns>The component.</returns>
    </member>
    <member name="M:Nez.ComponentList.GetComponents``1(List{``0})">
      <summary>
   Gets all the components of type T without a List allocation
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="components">Components.</param>
    </member>
    <member name="M:Nez.ComponentList.GetComponents``1">
      <summary>
   Gets all the components of type T. The returned List can be put back in the pool via ListPool.free.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <returns>The components.</returns>
    </member>
    <member name="T:Nez.EntityList">
      <summary>
   Class EntityList.
   </summary>
    </member>
    <member name="F:Nez.EntityList.Scene">
      <summary>
   The scene
   </summary>
    </member>
    <member name="M:Nez.EntityList.#ctor(Scene)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.EntityList" /> class.
   </summary>
      <param name="scene">The scene.</param>
    </member>
    <member name="P:Nez.EntityList.Count">
      <summary>
   Gets the count.
   </summary>
      <value>The count.</value>
    </member>
    <member name="P:Nez.EntityList.Item(System.Int32)">
      <summary>
   Gets the <see cref="T:Nez.Entity" /> at the specified index.
   </summary>
      <param name="index">The index.</param>
      <returns>Entity.</returns>
    </member>
    <member name="M:Nez.EntityList.MarkEntityListUnsorted">
      <summary>
   Marks the entity list unsorted.
   </summary>
    </member>
    <member name="M:Nez.EntityList.Add(Entity)">
      <summary>
   adds an Entity to the list. All lifecycle methods will be called in the next frame.
   </summary>
      <param name="entity">Entity.</param>
    </member>
    <member name="M:Nez.EntityList.Remove(Entity)">
      <summary>
   removes an Entity from the list. All lifecycle methods will be called in the next frame.
   </summary>
      <param name="entity">Entity.</param>
    </member>
    <member name="M:Nez.EntityList.RemoveAllEntities">
      <summary>
   removes all entities from the entities list
   </summary>
    </member>
    <member name="M:Nez.EntityList.Contains(Entity)">
      <summary>
   checks to see if the Entity is presently managed by this EntityList
   </summary>
      <param name="entity">Entity.</param>
      <returns>
        <c>true</c> if [contains] [the specified entity]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.EntityList.UpdateLists">
      <summary>
   Updates the lists.
   </summary>
    </member>
    <member name="M:Nez.EntityList.FindEntity(System.String)">
      <summary>
   returns the first Entity found with a name of name. If none are found returns null.
   </summary>
      <param name="name">Name.</param>
      <returns>The entity.</returns>
    </member>
    <member name="M:Nez.EntityList.EntitiesWithTag(System.Int32)">
      <summary>
   returns a list of all entities with tag. If no entities have the tag an empty list is returned. The returned List can be put back in the pool via ListPool.free.
   </summary>
      <param name="tag">Tag.</param>
      <returns>The with tag.</returns>
    </member>
    <member name="M:Nez.EntityList.EntitiesOfType``1">
      <summary>
   returns a List of all Entities of type T. The returned List can be put back in the pool via ListPool.free.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <returns>The of type.</returns>
    </member>
    <member name="M:Nez.EntityList.FindComponentOfType``1">
      <summary>
   returns the first Component found in the Scene of type T
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <returns>The component of type.</returns>
    </member>
    <member name="M:Nez.EntityList.FindComponentsOfType``1">
      <summary>
   returns all Components found in the Scene of type T. The returned List can be put back in the pool via ListPool.free.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <returns>The components of type.</returns>
    </member>
    <member name="T:Nez.RenderableComponentList">
      <summary>
   Class RenderableComponentList.
   </summary>
    </member>
    <member name="F:Nez.RenderableComponentList.CompareUpdatableOrder">
      <summary>
   The compare updatable order
   </summary>
    </member>
    <member name="P:Nez.RenderableComponentList.Count">
      <summary>
   Gets the count.
   </summary>
      <value>The count.</value>
    </member>
    <member name="P:Nez.RenderableComponentList.Item(System.Int32)">
      <summary>
   Gets the <see cref="T:Nez.IRenderable" /> at the specified index.
   </summary>
      <param name="index">The index.</param>
      <returns>IRenderable.</returns>
    </member>
    <member name="M:Nez.RenderableComponentList.Add(IRenderable)">
      <summary>
   Adds the specified component.
   </summary>
      <param name="component">The component.</param>
    </member>
    <member name="M:Nez.RenderableComponentList.Remove(IRenderable)">
      <summary>
   Removes the specified component.
   </summary>
      <param name="component">The component.</param>
    </member>
    <member name="M:Nez.RenderableComponentList.UpdateRenderableRenderLayer(IRenderable,System.Int32,System.Int32)">
      <summary>
   Updates the renderable render layer.
   </summary>
      <param name="component">The component.</param>
      <param name="oldRenderLayer">The old render layer.</param>
      <param name="newRenderLayer">The new render layer.</param>
    </member>
    <member name="M:Nez.RenderableComponentList.SetRenderLayerNeedsComponentSort(System.Int32)">
      <summary>
   dirties a RenderLayers sort flag, causing a re-sort of all components to occur
   </summary>
      <param name="renderLayer">The render layer.</param>
    </member>
    <member name="M:Nez.RenderableComponentList.ComponentsWithRenderLayer(System.Int32)">
      <summary>
   fetches all the Components with the given renderLayer. The component list is pre-sorted.
   </summary>
      <param name="renderLayer">The render layer.</param>
      <returns>FastList&lt;IRenderable&gt;.</returns>
    </member>
    <member name="M:Nez.RenderableComponentList.UpdateLists">
      <summary>
   Updates the lists.
   </summary>
    </member>
    <member name="T:Nez.Camera">
      <summary>
   Class Camera.
   Implements the <see cref="T:Nez.Component" /></summary>
      <seealso cref="T:Nez.Component" />
    </member>
    <member name="F:Nez.Camera.PositionZ3D">
      <summary>
   z-position of the 3D camera projections. Affects the fov greatly. Lower values make the objects appear very long in the z-direction.
   </summary>
    </member>
    <member name="F:Nez.Camera.NearClipPlane3D">
      <summary>
   near clip plane of the 3D camera projection
   </summary>
    </member>
    <member name="F:Nez.Camera.FarClipPlane3D">
      <summary>
   far clip plane of the 3D camera projection
   </summary>
    </member>
    <member name="P:Nez.Camera.Position">
      <summary>
   shortcut to entity.transform.position
   </summary>
      <value>The position.</value>
    </member>
    <member name="P:Nez.Camera.Rotation">
      <summary>
   shortcut to entity.transform.rotation
   </summary>
      <value>The rotation.</value>
    </member>
    <member name="P:Nez.Camera.RawZoom">
      <summary>
   raw zoom value. This is the exact value used for the scale matrix. Default is 1.
   </summary>
      <value>The raw zoom.</value>
    </member>
    <member name="P:Nez.Camera.Zoom">
      <summary>
   the zoom value should be between -1 and 1. This value is then translated to be from minimumZoom to maximumZoom. This lets you set
   appropriate minimum/maximum values then use a more intuitive -1 to 1 mapping to change the zoom.
   </summary>
      <value>The zoom.</value>
    </member>
    <member name="P:Nez.Camera.MinimumZoom">
      <summary>
   minimum non-scaled value (0 - float.Max) that the camera zoom can be. Defaults to 0.3
   </summary>
      <value>The minimum zoom.</value>
    </member>
    <member name="P:Nez.Camera.MaximumZoom">
      <summary>
   maximum non-scaled value (0 - float.Max) that the camera zoom can be. Defaults to 3
   </summary>
      <value>The maximum zoom.</value>
    </member>
    <member name="P:Nez.Camera.Bounds">
      <summary>
   world-space bounds of the camera. useful for culling.
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="P:Nez.Camera.TransformMatrix">
      <summary>
   used to convert from world coordinates to screen
   </summary>
      <value>The transform matrix.</value>
    </member>
    <member name="P:Nez.Camera.InverseTransformMatrix">
      <summary>
   used to convert from screen coordinates to world
   </summary>
      <value>The inverse transform matrix.</value>
    </member>
    <member name="P:Nez.Camera.ProjectionMatrix">
      <summary>
   the 2D Cameras projection matrix
   </summary>
      <value>The projection matrix.</value>
    </member>
    <member name="P:Nez.Camera.ViewProjectionMatrix">
      <summary>
   gets the view-projection matrix which is the transformMatrix * the projection matrix
   </summary>
      <value>The view projection matrix.</value>
    </member>
    <member name="P:Nez.Camera.ProjectionMatrix3D">
      <summary>
   returns a perspective projection for this camera for use when rendering 3D objects
   </summary>
      <value>The projection matrix3 d.</value>
    </member>
    <member name="P:Nez.Camera.ViewMatrix3D">
      <summary>
   returns a view Matrix via CreateLookAt for this camera for use when rendering 3D objects
   </summary>
      <value>The view matrix3 d.</value>
    </member>
    <member name="P:Nez.Camera.Origin">
      <summary>
   Gets the origin.
   </summary>
      <value>The origin.</value>
    </member>
    <member name="M:Nez.Camera.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Camera" /> class.
   </summary>
    </member>
    <member name="M:Nez.Camera.SetInset(System.Single,System.Single,System.Single,System.Single)">
      <summary>
   sets the amount used to inset the camera bounds from the viewport edge
   </summary>
      <param name="left">The amount to set the left bounds in from the viewport.</param>
      <param name="right">The amount to set the right bounds in from the viewport.</param>
      <param name="top">The amount to set the top bounds in from the viewport.</param>
      <param name="bottom">The amount to set the bottom bounds in from the viewport.</param>
      <returns>Camera.</returns>
    </member>
    <member name="M:Nez.Camera.SetPosition(Vector2)">
      <summary>
   shortcut to entity.transform.setPosition
   </summary>
      <param name="position">Position.</param>
      <returns>Camera.</returns>
    </member>
    <member name="M:Nez.Camera.SetRotation(System.Single)">
      <summary>
   shortcut to entity.transform.setRotation
   </summary>
      <param name="radians">Radians.</param>
      <returns>Camera.</returns>
    </member>
    <member name="M:Nez.Camera.SetRotationDegrees(System.Single)">
      <summary>
   shortcut to entity.transform.setRotationDegrees
   </summary>
      <param name="degrees">Degrees.</param>
      <returns>Camera.</returns>
    </member>
    <member name="M:Nez.Camera.SetZoom(System.Single)">
      <summary>
   sets the the zoom value which should be between -1 and 1. This value is then translated to be from minimumZoom to maximumZoom.
   This lets you set appropriate minimum/maximum values then use a more intuitive -1 to 1 mapping to change the zoom.
   </summary>
      <param name="zoom">Zoom.</param>
      <returns>Camera.</returns>
    </member>
    <member name="M:Nez.Camera.SetMinimumZoom(System.Single)">
      <summary>
   minimum non-scaled value (0 - float.Max) that the camera zoom can be. Defaults to 0.3
   </summary>
      <param name="minZoom">The minimum zoom.</param>
      <returns>Camera.</returns>
    </member>
    <member name="M:Nez.Camera.SetMaximumZoom(System.Single)">
      <summary>
   maximum non-scaled value (0 - float.Max) that the camera zoom can be. Defaults to 3
   </summary>
      <param name="maxZoom">Max zoom.</param>
      <returns>Camera.</returns>
    </member>
    <member name="M:Nez.Camera.ForceMatrixUpdate">
      <summary>
   this forces the matrix and bounds dirty
   </summary>
    </member>
    <member name="M:Nez.Camera.OnEntityTransformChanged(Transform.Component)">
      <summary>
   called when the entity's position changes. This allows components to be aware that they have moved due to the parent
   entity moving.
   </summary>
      <param name="comp">The comp.</param>
    </member>
    <member name="M:Nez.Camera.ZoomIn(System.Single)">
      <summary>
   Zooms the in.
   </summary>
      <param name="deltaZoom">The delta zoom.</param>
    </member>
    <member name="M:Nez.Camera.ZoomOut(System.Single)">
      <summary>
   Zooms the out.
   </summary>
      <param name="deltaZoom">The delta zoom.</param>
    </member>
    <member name="M:Nez.Camera.WorldToScreenPoint(Vector2)">
      <summary>
   converts a point from world coordinates to screen
   </summary>
      <param name="worldPosition">World position.</param>
      <returns>The to screen point.</returns>
    </member>
    <member name="M:Nez.Camera.ScreenToWorldPoint(Vector2)">
      <summary>
   converts a point from screen coordinates to world
   </summary>
      <param name="screenPosition">Screen position.</param>
      <returns>The to world point.</returns>
    </member>
    <member name="M:Nez.Camera.ScreenToWorldPoint(Point)">
      <summary>
   converts a point from screen coordinates to world
   </summary>
      <param name="screenPosition">Screen position.</param>
      <returns>The to world point.</returns>
    </member>
    <member name="M:Nez.Camera.MouseToWorldPoint">
      <summary>
   returns the mouse position in world space
   </summary>
      <returns>The to world point.</returns>
    </member>
    <member name="M:Nez.Camera.TouchToWorldPoint(TouchLocation)">
      <summary>
   returns the touch position in world space
   </summary>
      <param name="touch">The touch.</param>
      <returns>The to world point.</returns>
    </member>
    <member name="T:Nez.Component">
      <summary>
   Execution order:
   - OnAddedToEntity
   - OnEnabled
   Removal:
   - OnRemovedFromEntity
   </summary>
    </member>
    <member name="F:Nez.Component.Entity">
      <summary>
   the Entity this Component is attached to
   </summary>
    </member>
    <member name="P:Nez.Component.Transform">
      <summary>
   shortcut to entity.transform
   </summary>
      <value>The transform.</value>
    </member>
    <member name="P:Nez.Component.Enabled">
      <summary>
   true if the Component is enabled and the Entity is enabled. When enabled this Components lifecycle methods will be called.
   Changes in state result in onEnabled/onDisable being called.
   </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Component.UpdateOrder">
      <summary>
   update order of the Components on this Entity
   </summary>
      <value>The order.</value>
    </member>
    <member name="M:Nez.Component.Initialize">
      <summary>
   called when this Component has had its Entity assigned but it is NOT yet added to the live Components list of the Entity yet. Useful
   for things like physics Components that need to access the Transform to modify collision body properties.
   </summary>
    </member>
    <member name="M:Nez.Component.OnAddedToEntity">
      <summary>
   Called when this component is added to a scene after all pending component changes are committed. At this point, the Entity field
   is set and the Entity.Scene is also set.
   </summary>
    </member>
    <member name="M:Nez.Component.OnRemovedFromEntity">
      <summary>
   Called when this component is removed from its entity. Do all cleanup here.
   </summary>
    </member>
    <member name="M:Nez.Component.OnEntityTransformChanged(Transform.Component)">
      <summary>
   called when the entity's position changes. This allows components to be aware that they have moved due to the parent
   entity moving.
   </summary>
      <param name="comp">The comp.</param>
    </member>
    <member name="M:Nez.Component.DebugRender(Batcher)">
      <summary>
   Debugs the render.
   </summary>
      <param name="batcher">The batcher.</param>
    </member>
    <member name="M:Nez.Component.OnEnabled">
      <summary>
   called when the parent Entity or this Component is enabled
   </summary>
    </member>
    <member name="M:Nez.Component.OnDisabled">
      <summary>
   called when the parent Entity or this Component is disabled
   </summary>
    </member>
    <member name="M:Nez.Component.SetEnabled(System.Boolean)">
      <summary>
   Sets the enabled.
   </summary>
      <param name="isEnabled">if set to <c>true</c> [is enabled].</param>
      <returns>Component.</returns>
    </member>
    <member name="M:Nez.Component.SetUpdateOrder(System.Int32)">
      <summary>
   Sets the update order.
   </summary>
      <param name="updateOrder">The update order.</param>
      <returns>Component.</returns>
    </member>
    <member name="M:Nez.Component.Clone">
      <summary>
   creates a clone of this Component. The default implementation is just a MemberwiseClone so if a Component has object references
   that need to be cloned this method should be overriden.
   </summary>
      <returns>Component.</returns>
    </member>
    <member name="M:Nez.Component.CompareTo(Component)">
      <summary>
   Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
   </summary>
      <param name="other">An object to compare with this instance.</param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
   Value
   Meaning
   Less than zero
   This instance precedes <paramref name="other" /> in the sort order.
   Zero
   This instance occurs in the same position in the sort order as <paramref name="other" />.
   Greater than zero
   This instance follows <paramref name="other" /> in the sort order.</returns>
    </member>
    <member name="M:Nez.Component.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.Entity">
      <summary>
   Class Entity.
   Implements the <see cref="T:System.IComparable`1" /></summary>
      <seealso cref="T:System.IComparable`1" />
    </member>
    <member name="F:Nez.Entity.Scene">
      <summary>
   the scene this entity belongs to
   </summary>
    </member>
    <member name="F:Nez.Entity.Name">
      <summary>
   entity name. useful for doing scene-wide searches for an entity
   </summary>
    </member>
    <member name="F:Nez.Entity.Id">
      <summary>
   unique identifer for this Entity
   </summary>
    </member>
    <member name="F:Nez.Entity.Transform">
      <summary>
   encapsulates the Entity's position/rotation/scale and allows setting up a hieararchy
   </summary>
    </member>
    <member name="F:Nez.Entity.Components">
      <summary>
   list of all the components currently attached to this entity
   </summary>
    </member>
    <member name="P:Nez.Entity.Tag">
      <summary>
   use this however you want to. It can later be used to query the scene for all Entities with a specific tag
   </summary>
      <value>The tag.</value>
    </member>
    <member name="F:Nez.Entity.UpdateInterval">
      <summary>
   specifies how often this entitys update method should be called. 1 means every frame, 2 is every other, etc
   </summary>
    </member>
    <member name="P:Nez.Entity.Enabled">
      <summary>
   enables/disables the Entity. When disabled colliders are removed from the Physics system and components methods will not be called
   </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Entity.UpdateOrder">
      <summary>
   update order of this Entity. updateOrder is also used to sort tag lists on scene.entities
   </summary>
      <value>The order.</value>
    </member>
    <member name="P:Nez.Entity.IsDestroyed">
      <summary>
   if destroy was called, this will be true until the next time Entitys are processed
   </summary>
      <value>
        <c>true</c> if this instance is destroyed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Entity.Parent">
      <summary>
   Gets or sets the parent.
   </summary>
      <value>The parent.</value>
    </member>
    <member name="P:Nez.Entity.ChildCount">
      <summary>
   Gets the child count.
   </summary>
      <value>The child count.</value>
    </member>
    <member name="P:Nez.Entity.Position">
      <summary>
   Gets or sets the position.
   </summary>
      <value>The position.</value>
    </member>
    <member name="P:Nez.Entity.LocalPosition">
      <summary>
   Gets or sets the local position.
   </summary>
      <value>The local position.</value>
    </member>
    <member name="P:Nez.Entity.Rotation">
      <summary>
   Gets or sets the rotation.
   </summary>
      <value>The rotation.</value>
    </member>
    <member name="P:Nez.Entity.RotationDegrees">
      <summary>
   Gets or sets the rotation degrees.
   </summary>
      <value>The rotation degrees.</value>
    </member>
    <member name="P:Nez.Entity.LocalRotation">
      <summary>
   Gets or sets the local rotation.
   </summary>
      <value>The local rotation.</value>
    </member>
    <member name="P:Nez.Entity.LocalRotationDegrees">
      <summary>
   Gets or sets the local rotation degrees.
   </summary>
      <value>The local rotation degrees.</value>
    </member>
    <member name="P:Nez.Entity.Scale">
      <summary>
   Gets or sets the scale.
   </summary>
      <value>The scale.</value>
    </member>
    <member name="P:Nez.Entity.LocalScale">
      <summary>
   Gets or sets the local scale.
   </summary>
      <value>The local scale.</value>
    </member>
    <member name="P:Nez.Entity.WorldInverseTransform">
      <summary>
   Gets the world inverse transform.
   </summary>
      <value>The world inverse transform.</value>
    </member>
    <member name="P:Nez.Entity.LocalToWorldTransform">
      <summary>
   Gets the local to world transform.
   </summary>
      <value>The local to world transform.</value>
    </member>
    <member name="P:Nez.Entity.WorldToLocalTransform">
      <summary>
   Gets the world to local transform.
   </summary>
      <value>The world to local transform.</value>
    </member>
    <member name="M:Nez.Entity.#ctor(System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Entity" /> class.
   </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Nez.Entity.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Entity" /> class.
   </summary>
    </member>
    <member name="M:Nez.Entity.SetTag(System.Int32)">
      <summary>
   sets the tag for the Entity
   </summary>
      <param name="tag">Tag.</param>
      <returns>The tag.</returns>
    </member>
    <member name="M:Nez.Entity.SetEnabled(System.Boolean)">
      <summary>
   sets the enabled state of the Entity. When disabled colliders are removed from the Physics system and components methods will not be called
   </summary>
      <param name="isEnabled">If set to <c>true</c> is enabled.</param>
      <returns>The enabled.</returns>
    </member>
    <member name="M:Nez.Entity.SetUpdateOrder(System.Int32)">
      <summary>
   sets the update order of this Entity. updateOrder is also used to sort tag lists on scene.entities
   </summary>
      <param name="updateOrder">Update order.</param>
      <returns>The update order.</returns>
    </member>
    <member name="M:Nez.Entity.Destroy">
      <summary>
   removes the Entity from the scene and destroys all children
   </summary>
    </member>
    <member name="M:Nez.Entity.DetachFromScene">
      <summary>
   detaches the Entity from the scene.
   the following lifecycle method will be called on the Entity: OnRemovedFromScene
   the following lifecycle method will be called on the Components: OnRemovedFromEntity
   </summary>
    </member>
    <member name="M:Nez.Entity.AttachToScene(Scene)">
      <summary>
   attaches an Entity that was previously detached to a new scene
   </summary>
      <param name="newScene">New scene.</param>
    </member>
    <member name="M:Nez.Entity.Clone(Vector2)">
      <summary>
   creates a deep clone of this Entity. Subclasses can override this method to copy any custom fields. When overriding,
   the CopyFrom method should be called which will clone all Components, Colliders and Transform children for you. Note
   that the cloned Entity will not be added to any Scene! You must add them yourself!
   </summary>
      <param name="position">The position.</param>
      <returns>Entity.</returns>
    </member>
    <member name="M:Nez.Entity.OnAddedToScene">
      <summary>
   Called when this entity is added to a scene after all pending entity changes are committed
   </summary>
    </member>
    <member name="M:Nez.Entity.OnRemovedFromScene">
      <summary>
   Called when this entity is removed from a scene
   </summary>
    </member>
    <member name="M:Nez.Entity.Update">
      <summary>
   called each frame as long as the Entity is enabled
   </summary>
    </member>
    <member name="M:Nez.Entity.DebugRender(Batcher)">
      <summary>
   called if Core.debugRenderEnabled is true by the default renderers. Custom renderers can choose to call it or not.
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="M:Nez.Entity.AddComponent``1(``0)">
      <summary>
   Adds a Component to the components list. Returns the Component.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="component">Component.</param>
      <returns>Scene.</returns>
    </member>
    <member name="M:Nez.Entity.AddComponent``1">
      <summary>
   Adds a Component to the components list. Returns the Component.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <returns>Scene.</returns>
    </member>
    <member name="M:Nez.Entity.GetComponent``1">
      <summary>
   Gets the first component of type T and returns it. If no components are found returns null.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <returns>The component.</returns>
    </member>
    <member name="M:Nez.Entity.TryGetComponent``1(``0@)">
      <summary>
   Tries to get the component of type T. If no components are found returns false.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="component">The component.</param>
      <returns>true if a component has been found.</returns>
    </member>
    <member name="M:Nez.Entity.HasComponent``1">
      <summary>
   checks to see if the Entity has the component
   </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
        <c>true</c> if this instance has component; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.Entity.GetOrCreateComponent``1">
      <summary>
   Gets the first Component of type T and returns it. If no Component is found the Component will be created.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <returns>The component.</returns>
    </member>
    <member name="M:Nez.Entity.GetComponent``1(System.Boolean)">
      <summary>
   Gets the first component of type T and returns it optionally skips checking un-initialized Components (Components who have not yet had their
   onAddedToEntity method called). If no components are found returns null.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="onlyReturnInitializedComponents">If set to <c>true</c> only return initialized components.</param>
      <returns>The component.</returns>
    </member>
    <member name="M:Nez.Entity.GetComponents``1(List{``0})">
      <summary>
   Gets all the components of type T without a List allocation
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="componentList">Component list.</param>
    </member>
    <member name="M:Nez.Entity.GetComponents``1">
      <summary>
   Gets all the components of type T. The returned List can be put back in the pool via ListPool.free.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <returns>The component.</returns>
    </member>
    <member name="M:Nez.Entity.RemoveComponent``1">
      <summary>
   removes the first Component of type T from the components list
   </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Entity.RemoveComponent(Component)">
      <summary>
   removes a Component from the components list
   </summary>
      <param name="component">The Component to remove</param>
    </member>
    <member name="M:Nez.Entity.RemoveAllComponents">
      <summary>
   removes all Components from the Entity
   </summary>
    </member>
    <member name="M:Nez.Entity.CompareTo(Entity)">
      <summary>
   Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
   </summary>
      <param name="other">An object to compare with this instance.</param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
   Value
   Meaning
   Less than zero
   This instance precedes <paramref name="other" /> in the sort order.
   Zero
   This instance occurs in the same position in the sort order as <paramref name="other" />.
   Greater than zero
   This instance follows <paramref name="other" /> in the sort order.</returns>
    </member>
    <member name="M:Nez.Entity.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.Scene">
      <summary>
   Class Scene.
   </summary>
    </member>
    <member name="T:Nez.Scene.SceneResolutionPolicy">
      <summary>
   Enum SceneResolutionPolicy
   </summary>
    </member>
    <member name="F:Nez.Scene.SceneResolutionPolicy.None">
      <summary>
   Default. RenderTarget matches the sceen size
   </summary>
    </member>
    <member name="F:Nez.Scene.SceneResolutionPolicy.ExactFit">
      <summary>
   The entire application is visible in the specified area without trying to preserve the original aspect ratio.
   Distortion can occur, and the application may appear stretched or compressed.
   </summary>
    </member>
    <member name="F:Nez.Scene.SceneResolutionPolicy.NoBorder">
      <summary>
   The entire application fills the specified area, without distortion but possibly with some cropping,
   while maintaining the original aspect ratio of the application.
   </summary>
    </member>
    <member name="F:Nez.Scene.SceneResolutionPolicy.NoBorderPixelPerfect">
      <summary>
   Pixel perfect version of NoBorder. Scaling is limited to integer values.
   </summary>
    </member>
    <member name="F:Nez.Scene.SceneResolutionPolicy.ShowAll">
      <summary>
   The entire application is visible in the specified area without distortion while maintaining the original
   aspect ratio of the application. Borders can appear on two sides of the application.
   </summary>
    </member>
    <member name="F:Nez.Scene.SceneResolutionPolicy.ShowAllPixelPerfect">
      <summary>
   Pixel perfect version of ShowAll. Scaling is limited to integer values.
   </summary>
    </member>
    <member name="F:Nez.Scene.SceneResolutionPolicy.FixedHeight">
      <summary>
   The application takes the height of the design resolution size and modifies the width of the internal
   canvas so that it fits the aspect ratio of the device.
   no distortion will occur however you must make sure your application works on different
   aspect ratios
   </summary>
    </member>
    <member name="F:Nez.Scene.SceneResolutionPolicy.FixedHeightPixelPerfect">
      <summary>
   Pixel perfect version of FixedHeight. Scaling is limited to integer values.
   </summary>
    </member>
    <member name="F:Nez.Scene.SceneResolutionPolicy.FixedWidth">
      <summary>
   The application takes the width of the design resolution size and modifies the height of the internal
   canvas so that it fits the aspect ratio of the device.
   no distortion will occur however you must make sure your application works on different
   aspect ratios
   </summary>
    </member>
    <member name="F:Nez.Scene.SceneResolutionPolicy.FixedWidthPixelPerfect">
      <summary>
   Pixel perfect version of FixedWidth. Scaling is limited to integer values.
   </summary>
    </member>
    <member name="F:Nez.Scene.SceneResolutionPolicy.BestFit">
      <summary>
   The application takes the width and height that best fits the design resolution with optional cropping inside of the "bleed area"
   and possible letter/pillar boxing. Works just like ShowAll except with horizontal/vertical bleed (padding). Gives you an area much
   like the old TitleSafeArea. Example: if design resolution is 1348x900 and bleed is 148x140 the safe area would be 1200x760 (design
   resolution - bleed).
   </summary>
    </member>
    <member name="F:Nez.Scene.Camera">
      <summary>
   default scene Camera
   </summary>
    </member>
    <member name="F:Nez.Scene.ClearColor">
      <summary>
   clear color that is used in preRender to clear the screen
   </summary>
    </member>
    <member name="F:Nez.Scene.LetterboxColor">
      <summary>
   clear color for the final render of the RenderTarget to the framebuffer
   </summary>
    </member>
    <member name="F:Nez.Scene.SamplerState">
      <summary>
   SamplerState used for the final draw of the RenderTarget to the framebuffer
   </summary>
    </member>
    <member name="F:Nez.Scene.Content">
      <summary>
   Scene-specific ContentManager. Use it to load up any resources that are needed only by this scene. If you have global/multi-scene
   resources you can use Core.contentManager to load them since Nez will not ever unload them.
   </summary>
    </member>
    <member name="F:Nez.Scene.EnablePostProcessing">
      <summary>
   global toggle for PostProcessors
   </summary>
    </member>
    <member name="F:Nez.Scene.Entities">
      <summary>
   The list of entities within this Scene
   </summary>
    </member>
    <member name="F:Nez.Scene.RenderableComponents">
      <summary>
   Manages a list of all the RenderableComponents that are currently on scene Entitys
   </summary>
    </member>
    <member name="P:Nez.Scene.SceneRenderTargetSize">
      <summary>
   gets the size of the sceneRenderTarget
   </summary>
      <value>The size of the scene render texture.</value>
    </member>
    <member name="P:Nez.Scene.SceneRenderTarget">
      <summary>
   accesses the main scene RenderTarget. Some Renderers that use multiple RenderTargets may need to render into them first and then
   render the result into the sceneRenderTarget.
   </summary>
      <value>The scene render target.</value>
    </member>
    <member name="F:Nez.Scene.PixelPerfectScale">
      <summary>
   if the ResolutionPolicy is pixel perfect this will be set to the scale calculated for it
   </summary>
    </member>
    <member name="P:Nez.Scene.FinalRenderDelegate">
      <summary>
   the final render to the screen can be deferred to this delegate if set. This is really only useful for cases where the final render
   might need a full screen size effect even though a small back buffer is used.
   </summary>
      <value>The final render delegate.</value>
    </member>
    <member name="M:Nez.Scene.SetDefaultDesignResolution(System.Int32,System.Int32,SceneResolutionPolicy,System.Int32,System.Int32)">
      <summary>
   sets the default design size and resolution policy that new scenes will use. horizontal/verticalBleed are only relevant for BestFit.
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <param name="sceneResolutionPolicy">Scene resolution policy.</param>
      <param name="horizontalBleed">Horizontal bleed size. Used only if resolution policy is set to <see cref="F:Nez.Scene.SceneResolutionPolicy.BestFit" />.</param>
      <param name="verticalBleed">Vertical bleed size. Used only if resolution policy is set to <see cref="F:Nez.Scene.SceneResolutionPolicy.BestFit" />.</param>
    </member>
    <member name="M:Nez.Scene.CreateWithDefaultRenderer(System.Nullable{Color})">
      <summary>
   helper that creates a scene with the DefaultRenderer attached and ready for use
   </summary>
      <param name="clearColor">Color of the clear.</param>
      <returns>The with default renderer.</returns>
    </member>
    <member name="M:Nez.Scene.CreateWithDefaultRenderer``1(System.Nullable{Color})">
      <summary>
   helper that creates a scene of type T with the DefaultRenderer attached and ready for use
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="clearColor">Color of the clear.</param>
      <returns>The with default renderer.</returns>
    </member>
    <member name="M:Nez.Scene.Create(System.Nullable{Color})">
      <summary>
   helper that creates a scene with no Renderer
   </summary>
      <param name="clearColor">Color of the clear.</param>
      <returns>The with default renderer.</returns>
    </member>
    <member name="M:Nez.Scene.Create``1(System.Nullable{Color})">
      <summary>
   helper that creates a scene of type T with no Renderer
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="clearColor">Color of the clear.</param>
      <returns>The with default renderer.</returns>
    </member>
    <member name="M:Nez.Scene.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Scene" /> class.
   </summary>
    </member>
    <member name="M:Nez.Scene.Initialize">
      <summary>
   override this in Scene subclasses and do your loading here. This is called from the contructor after the scene sets itself up but
   before begin is ever called.
   </summary>
    </member>
    <member name="M:Nez.Scene.OnStart">
      <summary>
   override this in Scene subclasses. this will be called when Core sets this scene as the active scene.
   </summary>
    </member>
    <member name="M:Nez.Scene.Unload">
      <summary>
   override this in Scene subclasses and do any unloading necessary here. this is called when Core removes this scene from the active slot.
   </summary>
    </member>
    <member name="M:Nez.Scene.Begin">
      <summary>
   Begins this instance.
   </summary>
    </member>
    <member name="M:Nez.Scene.End">
      <summary>
   Ends this instance.
   </summary>
    </member>
    <member name="M:Nez.Scene.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="M:Nez.Scene.SetDesignResolution(System.Int32,System.Int32,SceneResolutionPolicy,System.Int32,System.Int32)">
      <summary>
   sets the design size and resolution policy then updates the render textures
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <param name="sceneResolutionPolicy">Scene resolution policy.</param>
      <param name="horizontalBleed">Horizontal bleed size. Used only if resolution policy is set to <see cref="F:Nez.Scene.SceneResolutionPolicy.BestFit" />.</param>
      <param name="verticalBleed">Horizontal bleed size. Used only if resolution policy is set to <see cref="F:Nez.Scene.SceneResolutionPolicy.BestFit" />.</param>
    </member>
    <member name="M:Nez.Scene.RequestScreenshot(Action{Texture2D})">
      <summary>
   after the next draw completes this will clone the backbuffer and call callback with the clone. Note that you must dispose of the
   Texture2D when done with it!
   </summary>
      <param name="callback">Callback.</param>
    </member>
    <member name="M:Nez.Scene.AddSceneComponent``1">
      <summary>
   Adds and returns a SceneComponent to the components list
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <returns>Scene.</returns>
    </member>
    <member name="M:Nez.Scene.AddSceneComponent``1(``0)">
      <summary>
   Adds and returns a SceneComponent to the components list
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="component">The component.</param>
      <returns>Scene.</returns>
    </member>
    <member name="M:Nez.Scene.GetSceneComponent``1">
      <summary>
   Gets the first SceneComponent of type T and returns it. If no component is found returns null.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <returns>The component.</returns>
    </member>
    <member name="M:Nez.Scene.GetOrCreateSceneComponent``1">
      <summary>
   Gets the first SceneComponent of type T and returns it. If no SceneComponent is found the SceneComponent will be created.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <returns>The component.</returns>
    </member>
    <member name="M:Nez.Scene.RemoveSceneComponent``1">
      <summary>
   removes the first SceneComponent of type T from the components list
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <returns>
        <c>true</c>, if component was removed, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Scene.RemoveSceneComponent(SceneComponent)">
      <summary>
   removes a SceneComponent from the SceneComponents list
   </summary>
      <param name="component">The component.</param>
    </member>
    <member name="M:Nez.Scene.AddRenderer``1(``0)">
      <summary>
   adds a Renderer to the scene
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="renderer">Renderer.</param>
      <returns>The renderer.</returns>
    </member>
    <member name="M:Nez.Scene.GetRenderer``1">
      <summary>
   gets the first Renderer of Type T
   </summary>
      <typeparam name="T">
      </typeparam>
      <returns>The renderer.</returns>
    </member>
    <member name="M:Nez.Scene.RemoveRenderer(Renderer)">
      <summary>
   removes the Renderer from the scene
   </summary>
      <param name="renderer">Renderer.</param>
    </member>
    <member name="M:Nez.Scene.AddPostProcessor``1(``0)">
      <summary>
   adds a PostProcessor to the scene. Sets the scene field and calls PostProcessor.onAddedToScene so that PostProcessors can load
   resources using the scenes ContentManager.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="postProcessor">Post processor.</param>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.Scene.GetPostProcessor``1">
      <summary>
   gets the first PostProcessor of Type T
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <returns>The post processor.</returns>
    </member>
    <member name="M:Nez.Scene.RemovePostProcessor(PostProcessor)">
      <summary>
   removes a PostProcessor. Note that unload is not called when removing so if you no longer need the PostProcessor be sure to call
   unload to free resources.
   </summary>
      <param name="postProcessor">Step.</param>
    </member>
    <member name="M:Nez.Scene.CreateEntity(System.String)">
      <summary>
   add the Entity to this Scene, and return it
   </summary>
      <param name="name">The name.</param>
      <returns>Entity.</returns>
    </member>
    <member name="M:Nez.Scene.CreateEntity(System.String,Vector2)">
      <summary>
   add the Entity to this Scene at position, and return it
   </summary>
      <param name="name">Name.</param>
      <param name="position">Position.</param>
      <returns>The entity.</returns>
    </member>
    <member name="M:Nez.Scene.AddEntity(Entity)">
      <summary>
   adds an Entity to the Scene's Entities list
   </summary>
      <param name="entity">The Entity to add</param>
      <returns>Entity.</returns>
    </member>
    <member name="M:Nez.Scene.AddEntity``1(``0)">
      <summary>
   adds an Entity to the Scene's Entities list
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="entity">The Entity to add</param>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.Scene.DestroyAllEntities">
      <summary>
   removes all entities from the scene
   </summary>
    </member>
    <member name="M:Nez.Scene.FindEntity(System.String)">
      <summary>
   searches for and returns the first Entity with name
   </summary>
      <param name="name">Name.</param>
      <returns>The entity.</returns>
    </member>
    <member name="M:Nez.Scene.FindEntitiesWithTag(System.Int32)">
      <summary>
   returns all entities with the given tag
   </summary>
      <param name="tag">Tag.</param>
      <returns>The entities by tag.</returns>
    </member>
    <member name="M:Nez.Scene.EntitiesOfType``1">
      <summary>
   returns all entities of Type T
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <returns>The of type.</returns>
    </member>
    <member name="M:Nez.Scene.FindComponentOfType``1">
      <summary>
   returns the first enabled loaded component of Type T
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <returns>The component of type.</returns>
    </member>
    <member name="M:Nez.Scene.FindComponentsOfType``1">
      <summary>
   returns a list of all enabled loaded components of Type T
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <returns>The components of type.</returns>
    </member>
    <member name="T:Nez.SceneComponent">
      <summary>
   Class SceneComponent.
   Implements the <see cref="T:System.IComparable`1" /></summary>
      <seealso cref="T:System.IComparable`1" />
    </member>
    <member name="F:Nez.SceneComponent.Scene">
      <summary>
   the scene this SceneComponent is attached to
   </summary>
    </member>
    <member name="P:Nez.SceneComponent.Enabled">
      <summary>
   true if the SceneComponent is enabled. Changes in state result in onEnabled/onDisable being called.
   </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.SceneComponent.UpdateOrder">
      <summary>
   update order of the SceneComponents on this Scene
   </summary>
      <value>The order.</value>
    </member>
    <member name="M:Nez.SceneComponent.OnEnabled">
      <summary>
   called when this SceneComponent is enabled
   </summary>
    </member>
    <member name="M:Nez.SceneComponent.OnDisabled">
      <summary>
   called when the this SceneComponent is disabled
   </summary>
    </member>
    <member name="M:Nez.SceneComponent.OnRemovedFromScene">
      <summary>
   called when this SceneComponent is removed from the Scene
   </summary>
    </member>
    <member name="M:Nez.SceneComponent.Update">
      <summary>
   called each frame before the Entities are updated
   </summary>
    </member>
    <member name="M:Nez.SceneComponent.SetEnabled(System.Boolean)">
      <summary>
   enables/disables this SceneComponent
   </summary>
      <param name="isEnabled">If set to <c>true</c> is enabled.</param>
      <returns>The enabled.</returns>
    </member>
    <member name="M:Nez.SceneComponent.SetUpdateOrder(System.Int32)">
      <summary>
   sets the updateOrder for the SceneComponent and triggers a sort of the SceneComponents
   </summary>
      <param name="updateOrder">Update order.</param>
      <returns>The update order.</returns>
    </member>
    <member name="T:Nez.ScreenSpaceCamera">
      <summary>
   Class ScreenSpaceCamera.
   Implements the <see cref="T:Nez.Camera" /></summary>
      <seealso cref="T:Nez.Camera" />
    </member>
    <member name="T:Nez.Transform">
      <summary>
   Class Transform.
   </summary>
    </member>
    <member name="T:Nez.Transform.Component">
      <summary>
   Enum Component
   </summary>
    </member>
    <member name="F:Nez.Transform.Component.Position">
      <summary>
   The position
   </summary>
    </member>
    <member name="F:Nez.Transform.Component.Scale">
      <summary>
   The scale
   </summary>
    </member>
    <member name="F:Nez.Transform.Component.Rotation">
      <summary>
   The rotation
   </summary>
    </member>
    <member name="F:Nez.Transform.Entity">
      <summary>
   the Entity associated with this transform
   </summary>
    </member>
    <member name="P:Nez.Transform.Parent">
      <summary>
   the parent Transform of this Transform
   </summary>
      <value>The parent.</value>
    </member>
    <member name="P:Nez.Transform.ChildCount">
      <summary>
   total children of this Transform
   </summary>
      <value>The child count.</value>
    </member>
    <member name="P:Nez.Transform.Position">
      <summary>
   position of the transform in world space
   </summary>
      <value>The position.</value>
    </member>
    <member name="P:Nez.Transform.LocalPosition">
      <summary>
   position of the transform relative to the parent transform. If the transform has no parent, it is the same as Transform.position
   </summary>
      <value>The local position.</value>
    </member>
    <member name="P:Nez.Transform.Rotation">
      <summary>
   rotation of the transform in world space in radians
   </summary>
      <value>The rotation.</value>
    </member>
    <member name="P:Nez.Transform.RotationDegrees">
      <summary>
   rotation of the transform in world space in degrees
   </summary>
      <value>The rotation degrees.</value>
    </member>
    <member name="P:Nez.Transform.LocalRotation">
      <summary>
   the rotation of the transform relative to the parent transform's rotation. If the transform has no parent, it is the same as Transform.rotation
   </summary>
      <value>The local rotation.</value>
    </member>
    <member name="P:Nez.Transform.LocalRotationDegrees">
      <summary>
   rotation of the transform relative to the parent transform's rotation in degrees
   </summary>
      <value>The rotation degrees.</value>
    </member>
    <member name="P:Nez.Transform.Scale">
      <summary>
   global scale of the transform
   </summary>
      <value>The scale.</value>
    </member>
    <member name="P:Nez.Transform.LocalScale">
      <summary>
   the scale of the transform relative to the parent. If the transform has no parent, it is the same as Transform.scale
   </summary>
      <value>The local scale.</value>
    </member>
    <member name="P:Nez.Transform.WorldInverseTransform">
      <summary>
   Gets the world inverse transform.
   </summary>
      <value>The world inverse transform.</value>
    </member>
    <member name="P:Nez.Transform.LocalToWorldTransform">
      <summary>
   Gets the local to world transform.
   </summary>
      <value>The local to world transform.</value>
    </member>
    <member name="P:Nez.Transform.WorldToLocalTransform">
      <summary>
   Gets the world to local transform.
   </summary>
      <value>The world to local transform.</value>
    </member>
    <member name="M:Nez.Transform.#ctor(Entity)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Transform" /> class.
   </summary>
      <param name="entity">The entity.</param>
    </member>
    <member name="M:Nez.Transform.GetChild(System.Int32)">
      <summary>
   returns the Transform child at index
   </summary>
      <param name="index">Index.</param>
      <returns>The child.</returns>
    </member>
    <member name="M:Nez.Transform.SetParent(Transform)">
      <summary>
   sets the parent Transform of this Transform
   </summary>
      <param name="parent">Parent.</param>
      <returns>The parent.</returns>
    </member>
    <member name="M:Nez.Transform.SetPosition(Vector2)">
      <summary>
   sets the position of the transform in world space
   </summary>
      <param name="position">Position.</param>
      <returns>The position.</returns>
    </member>
    <member name="M:Nez.Transform.SetPosition(System.Single,System.Single)">
      <summary>
   Sets the position.
   </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <returns>Transform.</returns>
    </member>
    <member name="M:Nez.Transform.SetLocalPosition(Vector2)">
      <summary>
   sets the position of the transform relative to the parent transform. If the transform has no parent, it is the same
   as Transform.position
   </summary>
      <param name="localPosition">Local position.</param>
      <returns>The local position.</returns>
    </member>
    <member name="M:Nez.Transform.SetRotation(System.Single)">
      <summary>
   sets the rotation of the transform in world space in radians
   </summary>
      <param name="radians">Radians.</param>
      <returns>The rotation.</returns>
    </member>
    <member name="M:Nez.Transform.SetRotationDegrees(System.Single)">
      <summary>
   sets the rotation of the transform in world space in degrees
   </summary>
      <param name="degrees">The degrees.</param>
      <returns>The rotation.</returns>
    </member>
    <member name="M:Nez.Transform.SetLocalRotation(System.Single)">
      <summary>
   sets the the rotation of the transform relative to the parent transform's rotation. If the transform has no parent, it is the
   same as Transform.rotation
   </summary>
      <param name="radians">Radians.</param>
      <returns>The local rotation.</returns>
    </member>
    <member name="M:Nez.Transform.SetLocalRotationDegrees(System.Single)">
      <summary>
   sets the the rotation of the transform relative to the parent transform's rotation. If the transform has no parent, it is the
   same as Transform.rotation
   </summary>
      <param name="degrees">The degrees.</param>
      <returns>The local rotation.</returns>
    </member>
    <member name="M:Nez.Transform.LookAt(Vector2)">
      <summary>
   Rotate so the top of the sprite is facing <see cref="pos" /></summary>
      <param name="pos">The position to look at</param>
    </member>
    <member name="M:Nez.Transform.SetScale(Vector2)">
      <summary>
   sets the global scale of the transform
   </summary>
      <param name="scale">Scale.</param>
      <returns>The scale.</returns>
    </member>
    <member name="M:Nez.Transform.SetScale(System.Single)">
      <summary>
   sets the global scale of the transform
   </summary>
      <param name="scale">Scale.</param>
      <returns>The scale.</returns>
    </member>
    <member name="M:Nez.Transform.SetLocalScale(Vector2)">
      <summary>
   sets the scale of the transform relative to the parent. If the transform has no parent, it is the same as Transform.scale
   </summary>
      <param name="scale">Scale.</param>
      <returns>The local scale.</returns>
    </member>
    <member name="M:Nez.Transform.SetLocalScale(System.Single)">
      <summary>
   sets the scale of the transform relative to the parent. If the transform has no parent, it is the same as Transform.scale
   </summary>
      <param name="scale">Scale.</param>
      <returns>The local scale.</returns>
    </member>
    <member name="M:Nez.Transform.RoundPosition">
      <summary>
   rounds the position of the Transform
   </summary>
    </member>
    <member name="M:Nez.Transform.CopyFrom(Transform)">
      <summary>
   Copies from.
   </summary>
      <param name="transform">The transform.</param>
    </member>
    <member name="M:Nez.Transform.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.Batcher">
      <summary>
   Class Batcher.
   Implements the <see cref="T:Nez.GraphicsResource" /></summary>
      <seealso cref="T:Nez.GraphicsResource" />
    </member>
    <member name="P:Nez.Batcher.TransformMatrix">
      <summary>
   Matrix to be used when creating the projection matrix
   </summary>
      <value>The transform matrix.</value>
    </member>
    <member name="F:Nez.Batcher.ShouldRoundDestinations">
      <summary>
   If true, destination positions will be rounded before being drawn.
   </summary>
    </member>
    <member name="F:Nez.Batcher.UseFnaHalfPixelMatrix">
      <summary>
   The use fna half pixel matrix
   </summary>
   if true, the older FNA half-pixel offset will be used when creating the ortho matrix. Autoset to true for FNA.
</member>
    <member name="M:Nez.Batcher.#ctor(GraphicsDevice)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Batcher" /> class.
   </summary>
      <param name="graphicsDevice">The graphics device.</param>
    </member>
    <member name="M:Nez.Batcher.SetIgnoreRoundingDestinations(System.Boolean)">
      <summary>
   sets if position rounding should be ignored. Useful when you are drawing primitives for debugging.
   </summary>
      <param name="shouldIgnore">If set to <c>true</c> should ignore.</param>
    </member>
    <member name="M:Nez.Batcher.Begin">
      <summary>
   Begins this instance.
   </summary>
    </member>
    <member name="M:Nez.Batcher.Begin(Effect)">
      <summary>
   Begins the specified effect.
   </summary>
      <param name="effect">The effect.</param>
    </member>
    <member name="M:Nez.Batcher.Begin(Material)">
      <summary>
   Begins the specified material.
   </summary>
      <param name="material">The material.</param>
    </member>
    <member name="M:Nez.Batcher.Begin(Matrix)">
      <summary>
   Begins the specified transformation matrix.
   </summary>
      <param name="transformationMatrix">The transformation matrix.</param>
    </member>
    <member name="M:Nez.Batcher.Begin(BlendState)">
      <summary>
   Begins the specified blend state.
   </summary>
      <param name="blendState">State of the blend.</param>
    </member>
    <member name="M:Nez.Batcher.Begin(Material,Matrix)">
      <summary>
   Begins the specified material.
   </summary>
      <param name="material">The material.</param>
      <param name="transformationMatrix">The transformation matrix.</param>
    </member>
    <member name="M:Nez.Batcher.Begin(BlendState,SamplerState,DepthStencilState,RasterizerState)">
      <summary>
   Begins the specified blend state.
   </summary>
      <param name="blendState">State of the blend.</param>
      <param name="samplerState">State of the sampler.</param>
      <param name="depthStencilState">State of the depth stencil.</param>
      <param name="rasterizerState">State of the rasterizer.</param>
    </member>
    <member name="M:Nez.Batcher.Begin(BlendState,SamplerState,DepthStencilState,RasterizerState,Effect)">
      <summary>
   Begins the specified blend state.
   </summary>
      <param name="blendState">State of the blend.</param>
      <param name="samplerState">State of the sampler.</param>
      <param name="depthStencilState">State of the depth stencil.</param>
      <param name="rasterizerState">State of the rasterizer.</param>
      <param name="effect">The effect.</param>
    </member>
    <member name="M:Nez.Batcher.Begin(BlendState,SamplerState,DepthStencilState,RasterizerState,Effect,Matrix)">
      <summary>
   Begins the specified blend state.
   </summary>
      <param name="blendState">State of the blend.</param>
      <param name="samplerState">State of the sampler.</param>
      <param name="depthStencilState">State of the depth stencil.</param>
      <param name="rasterizerState">State of the rasterizer.</param>
      <param name="effect">The effect.</param>
      <param name="transformationMatrix">The transformation matrix.</param>
    </member>
    <member name="M:Nez.Batcher.Begin(BlendState,SamplerState,DepthStencilState,RasterizerState,Effect,Matrix,System.Boolean)">
      <summary>
   Begins the specified blend state.
   </summary>
      <param name="blendState">State of the blend.</param>
      <param name="samplerState">State of the sampler.</param>
      <param name="depthStencilState">State of the depth stencil.</param>
      <param name="rasterizerState">State of the rasterizer.</param>
      <param name="effect">The effect.</param>
      <param name="transformationMatrix">The transformation matrix.</param>
      <param name="disableBatching">if set to <c>true</c> [disable batching].</param>
    </member>
    <member name="M:Nez.Batcher.End">
      <summary>
   Ends this instance.
   </summary>
    </member>
    <member name="M:Nez.Batcher.Draw(Texture2D,Vector2)">
      <summary>
   Draws the specified texture.
   </summary>
      <param name="texture">The texture.</param>
      <param name="position">The position.</param>
    </member>
    <member name="M:Nez.Batcher.Draw(Texture2D,Vector2,Color)">
      <summary>
   Draws the specified texture.
   </summary>
      <param name="texture">The texture.</param>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.Batcher.Draw(Texture2D,Rectangle)">
      <summary>
   Draws the specified texture.
   </summary>
      <param name="texture">The texture.</param>
      <param name="destinationRectangle">The destination rectangle.</param>
    </member>
    <member name="M:Nez.Batcher.Draw(Texture2D,Rectangle,Color)">
      <summary>
   Draws the specified texture.
   </summary>
      <param name="texture">The texture.</param>
      <param name="destinationRectangle">The destination rectangle.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.Batcher.Draw(Texture2D,Rectangle,System.Nullable{Rectangle},Color)">
      <summary>
   Draws the specified texture.
   </summary>
      <param name="texture">The texture.</param>
      <param name="destinationRectangle">The destination rectangle.</param>
      <param name="sourceRectangle">The source rectangle.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.Batcher.Draw(Texture2D,Rectangle,System.Nullable{Rectangle},Color,SpriteEffects)">
      <summary>
   Draws the specified texture.
   </summary>
      <param name="texture">The texture.</param>
      <param name="destinationRectangle">The destination rectangle.</param>
      <param name="sourceRectangle">The source rectangle.</param>
      <param name="color">The color.</param>
      <param name="effects">The effects.</param>
    </member>
    <member name="M:Nez.Batcher.Draw(Texture2D,Rectangle,System.Nullable{Rectangle},Color,System.Single,SpriteEffects,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
   Draws the specified texture.
   </summary>
      <param name="texture">The texture.</param>
      <param name="destinationRectangle">The destination rectangle.</param>
      <param name="sourceRectangle">The source rectangle.</param>
      <param name="color">The color.</param>
      <param name="rotation">The rotation.</param>
      <param name="effects">The effects.</param>
      <param name="layerDepth">The layer depth.</param>
      <param name="skewTopX">The skew top x.</param>
      <param name="skewBottomX">The skew bottom x.</param>
      <param name="skewLeftY">The skew left y.</param>
      <param name="skewRightY">The skew right y.</param>
    </member>
    <member name="M:Nez.Batcher.Draw(Texture2D,Vector2,System.Nullable{Rectangle},Color)">
      <summary>
   Draws the specified texture.
   </summary>
      <param name="texture">The texture.</param>
      <param name="position">The position.</param>
      <param name="sourceRectangle">The source rectangle.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.Batcher.Draw(Texture2D,Vector2,System.Nullable{Rectangle},Color,System.Single,Vector2,System.Single,SpriteEffects,System.Single)">
      <summary>
   Draws the specified texture.
   </summary>
      <param name="texture">The texture.</param>
      <param name="position">The position.</param>
      <param name="sourceRectangle">The source rectangle.</param>
      <param name="color">The color.</param>
      <param name="rotation">The rotation.</param>
      <param name="origin">The origin.</param>
      <param name="scale">The scale.</param>
      <param name="effects">The effects.</param>
      <param name="layerDepth">The layer depth.</param>
    </member>
    <member name="M:Nez.Batcher.Draw(Sprite,Vector2,Color,System.Single,Vector2,System.Single,SpriteEffects,System.Single)">
      <summary>
   Draws the specified sprite.
   </summary>
      <param name="sprite">The sprite.</param>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
      <param name="rotation">The rotation.</param>
      <param name="origin">The origin.</param>
      <param name="scale">The scale.</param>
      <param name="effects">The effects.</param>
      <param name="layerDepth">The layer depth.</param>
    </member>
    <member name="M:Nez.Batcher.Draw(Texture2D,Vector2,System.Nullable{Rectangle},Color,System.Single,Vector2,Vector2,SpriteEffects,System.Single)">
      <summary>
   Draws the specified texture.
   </summary>
      <param name="texture">The texture.</param>
      <param name="position">The position.</param>
      <param name="sourceRectangle">The source rectangle.</param>
      <param name="color">The color.</param>
      <param name="rotation">The rotation.</param>
      <param name="origin">The origin.</param>
      <param name="scale">The scale.</param>
      <param name="effects">The effects.</param>
      <param name="layerDepth">The layer depth.</param>
    </member>
    <member name="M:Nez.Batcher.Draw(Sprite,Vector2,Color,System.Single,Vector2,Vector2,SpriteEffects,System.Single)">
      <summary>
   Draws the specified sprite.
   </summary>
      <param name="sprite">The sprite.</param>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
      <param name="rotation">The rotation.</param>
      <param name="origin">The origin.</param>
      <param name="scale">The scale.</param>
      <param name="effects">The effects.</param>
      <param name="layerDepth">The layer depth.</param>
    </member>
    <member name="M:Nez.Batcher.Draw(Texture2D,Vector2,System.Nullable{Rectangle},Color,System.Single,Vector2,Vector2,SpriteEffects,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
   Draws the specified texture.
   </summary>
      <param name="texture">The texture.</param>
      <param name="position">The position.</param>
      <param name="sourceRectangle">The source rectangle.</param>
      <param name="color">The color.</param>
      <param name="rotation">The rotation.</param>
      <param name="origin">The origin.</param>
      <param name="scale">The scale.</param>
      <param name="effects">The effects.</param>
      <param name="layerDepth">The layer depth.</param>
      <param name="skewTopX">The skew top x.</param>
      <param name="skewBottomX">The skew bottom x.</param>
      <param name="skewLeftY">The skew left y.</param>
      <param name="skewRightY">The skew right y.</param>
    </member>
    <member name="M:Nez.Batcher.Draw(Texture2D,Rectangle,System.Nullable{Rectangle},Color,System.Single,Vector2,SpriteEffects,System.Single)">
      <summary>
   Draws the specified texture.
   </summary>
      <param name="texture">The texture.</param>
      <param name="destinationRectangle">The destination rectangle.</param>
      <param name="sourceRectangle">The source rectangle.</param>
      <param name="color">The color.</param>
      <param name="rotation">The rotation.</param>
      <param name="origin">The origin.</param>
      <param name="effects">The effects.</param>
      <param name="layerDepth">The layer depth.</param>
    </member>
    <member name="M:Nez.Batcher.DrawRaw(Texture2D,Vector3[],Vector2[],Color[])">
      <summary>
   direct access to setting vert positions, UVs and colors. The order of elements is top-left, top-right, bottom-left, bottom-right
   </summary>
      <param name="texture">Texture.</param>
      <param name="verts">Verts.</param>
      <param name="textureCoords">Texture coords.</param>
      <param name="colors">Colors.</param>
      <returns>The raw.</returns>
    </member>
    <member name="M:Nez.Batcher.DrawRaw(Texture2D,Vector3[],Vector2[],Color)">
      <summary>
   direct access to setting vert positions, UVs and colors. The order of elements is top-left, top-right, bottom-left, bottom-right
   </summary>
      <param name="texture">Texture.</param>
      <param name="verts">Verts.</param>
      <param name="textureCoords">Texture coords.</param>
      <param name="color">Color.</param>
      <returns>The raw.</returns>
    </member>
    <member name="M:Nez.Batcher.DrawString(SpriteFont,System.String,Vector2,Color,System.Single,Vector2,Vector2,SpriteEffects,System.Single)">
      <summary>
   Draws the string.
   </summary>
      <param name="spriteFont">The sprite font.</param>
      <param name="text">The text.</param>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
      <param name="rotation">The rotation.</param>
      <param name="origin">The origin.</param>
      <param name="scale">The scale.</param>
      <param name="effects">The effects.</param>
      <param name="layerDepth">The layer depth.</param>
      <exception cref="T:System.NotImplementedException">SpriteFont is too locked down to use directly. Wrap it in a NezSpriteFont</exception>
    </member>
    <member name="M:Nez.Batcher.FlushBatch">
      <summary>
   Flushes the batch.
   </summary>
    </member>
    <member name="M:Nez.Batcher.EnableScissorTest(System.Boolean)">
      <summary>
   enables/disables scissor testing. If the RasterizerState changes it will cause a batch flush.
   </summary>
      <param name="shouldEnable">Should enable.</param>
      <returns>The scissor test.</returns>
    </member>
    <member name="T:Nez.BatcherDrawingExt">
      <summary>
   an assortment of helper methods to assist with drawing
   </summary>
    </member>
    <member name="M:Nez.BatcherDrawingExt.DrawLine(Batcher,Vector2,Vector2,Color)">
      <summary>
   Draws the line.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.BatcherDrawingExt.DrawLine(Batcher,Vector2,Vector2,Color,System.Single)">
      <summary>
   Draws the line.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <param name="color">The color.</param>
      <param name="thickness">The thickness.</param>
    </member>
    <member name="M:Nez.BatcherDrawingExt.DrawLine(Batcher,System.Single,System.Single,System.Single,System.Single,Color)">
      <summary>
   Draws the line.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="x1">The x1.</param>
      <param name="y1">The y1.</param>
      <param name="x2">The x2.</param>
      <param name="y2">The y2.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.BatcherDrawingExt.DrawPoints(Batcher,List{Vector2},Color,System.Single)">
      <summary>
   Draws a list of connected points
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="points">The points to connect with lines</param>
      <param name="color">The color to use</param>
      <param name="thickness">The thickness of the lines</param>
    </member>
    <member name="M:Nez.BatcherDrawingExt.DrawPoints(Batcher,Vector2[],Color,System.Single)">
      <summary>
   Draws a list of connected points
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="points">The points to connect with lines</param>
      <param name="color">The color to use</param>
      <param name="thickness">The thickness of the lines</param>
    </member>
    <member name="M:Nez.BatcherDrawingExt.DrawPoints(Batcher,Vector2,Vector2[],Color,System.Boolean,System.Single)">
      <summary>
   Draws a list of connected points
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="position">The position.</param>
      <param name="points">The points to connect with lines</param>
      <param name="color">The color to use</param>
      <param name="closePoly">If set to <c>true</c> the first and last points will be connected.</param>
      <param name="thickness">The thickness of the lines</param>
    </member>
    <member name="M:Nez.BatcherDrawingExt.DrawPolygon(Batcher,Vector2,Vector2[],Color,System.Boolean,System.Single)">
      <summary>
   Draws the polygon.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="position">The position.</param>
      <param name="points">The points.</param>
      <param name="color">The color.</param>
      <param name="closePoly">if set to <c>true</c> [close poly].</param>
      <param name="thickness">The thickness.</param>
    </member>
    <member name="M:Nez.BatcherDrawingExt.DrawLineAngle(Batcher,Vector2,System.Single,System.Single,Color)">
      <summary>
   Draws the line angle.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="start">The start.</param>
      <param name="radians">The radians.</param>
      <param name="length">The length.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.BatcherDrawingExt.DrawLineAngle(Batcher,Vector2,System.Single,System.Single,Color,System.Single)">
      <summary>
   Draws the line angle.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="start">The start.</param>
      <param name="radians">The radians.</param>
      <param name="length">The length.</param>
      <param name="color">The color.</param>
      <param name="thickness">The thickness.</param>
    </member>
    <member name="M:Nez.BatcherDrawingExt.DrawLineAngle(Batcher,System.Single,System.Single,System.Single,System.Single,Color)">
      <summary>
   Draws the line angle.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="startX">The start x.</param>
      <param name="startY">The start y.</param>
      <param name="radians">The radians.</param>
      <param name="length">The length.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.BatcherDrawingExt.DrawCircle(Batcher,Vector2,System.Single,Color,System.Single,System.Int32)">
      <summary>
   Draws the circle.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="position">The position.</param>
      <param name="radius">The radius.</param>
      <param name="color">The color.</param>
      <param name="thickness">The thickness.</param>
      <param name="resolution">The resolution.</param>
    </member>
    <member name="M:Nez.BatcherDrawingExt.DrawCircle(Batcher,System.Single,System.Single,System.Single,Color,System.Int32,System.Int32)">
      <summary>
   Draws the circle.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <param name="radius">The radius.</param>
      <param name="color">The color.</param>
      <param name="thickness">The thickness.</param>
      <param name="resolution">The resolution.</param>
    </member>
    <member name="M:Nez.BatcherDrawingExt.DrawRect(Batcher,System.Single,System.Single,System.Single,System.Single,Color)">
      <summary>
   Draws the rect.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.BatcherDrawingExt.DrawRect(Batcher,Vector2,System.Single,System.Single,Color)">
      <summary>
   Draws the rect.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="position">The position.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.BatcherDrawingExt.DrawRect(Batcher,Rectangle,Color)">
      <summary>
   Draws the rect.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="rect">The rect.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.BatcherDrawingExt.DrawHollowRect(Batcher,System.Single,System.Single,System.Single,System.Single,Color,System.Single)">
      <summary>
   Draws the hollow rect.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="color">The color.</param>
      <param name="thickness">The thickness.</param>
    </member>
    <member name="M:Nez.BatcherDrawingExt.DrawHollowRect(Batcher,Vector2,System.Single,System.Single,Color,System.Single)">
      <summary>
   Draws the hollow rect.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="position">The position.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="color">The color.</param>
      <param name="thickness">The thickness.</param>
    </member>
    <member name="M:Nez.BatcherDrawingExt.DrawHollowRect(Batcher,Rectangle,Color,System.Single)">
      <summary>
   Draws the hollow rect.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="rect">The rect.</param>
      <param name="color">The color.</param>
      <param name="thickness">The thickness.</param>
    </member>
    <member name="M:Nez.BatcherDrawingExt.DrawHollowRect(Batcher,RectangleF,Color,System.Single)">
      <summary>
   Draws the hollow rect.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="rect">The rect.</param>
      <param name="color">The color.</param>
      <param name="thickness">The thickness.</param>
    </member>
    <member name="M:Nez.BatcherDrawingExt.DrawPixel(Batcher,System.Single,System.Single,Color,System.Int32)">
      <summary>
   Draws the pixel.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <param name="color">The color.</param>
      <param name="size">The size.</param>
    </member>
    <member name="M:Nez.BatcherDrawingExt.DrawPixel(Batcher,Vector2,Color,System.Int32)">
      <summary>
   Draws the pixel.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
      <param name="size">The size.</param>
    </member>
    <member name="T:Nez.GraphicsResource">
      <summary>
   this class exists only so that we can sneak the Batcher through and have it work just like SpriteBatch with regard to resource handling.
   </summary>
    </member>
    <member name="P:Nez.GraphicsResource.GraphicsDevice">
      <summary>
   Gets the graphics device.
   </summary>
      <value>The graphics device.</value>
    </member>
    <member name="P:Nez.GraphicsResource.IsDisposed">
      <summary>
   Gets a value indicating whether this instance is disposed.
   </summary>
      <value>
        <c>true</c> if this instance is disposed; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:Nez.GraphicsResource.Dispose">
      <summary>
   Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
   </summary>
    </member>
    <member name="T:Nez.DeferredLighting.DeferredLightEffect">
      <summary>
   Class DeferredLightEffect.
   Implements the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /></summary>
      <seealso cref="T:Microsoft.Xna.Framework.Graphics.Effect" />
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.DeferredLighting.DeferredLightEffect" /> class.
   </summary>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.PrepareClearGBuffer">
      <summary>
   Prepares the clear g buffer.
   </summary>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.UpdateForCamera(Camera)">
      <summary>
   updates the camera matrixes in the Effect
   </summary>
      <param name="camera">Camera.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.UpdateForLight(DeferredLight)">
      <summary>
   updates the shader values for the light and sets the appropriate CurrentTechnique
   </summary>
      <param name="light">Light.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.UpdateForLight(PointLight)">
      <summary>
   updates the shader values for the light and sets the appropriate CurrentTechnique
   </summary>
      <param name="light">Light.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.UpdateForLight(SpotLight)">
      <summary>
   updates the shader values for the light and sets the appropriate CurrentTechnique
   </summary>
      <param name="light">Light.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.UpdateForLight(AreaLight)">
      <summary>
   updates the shader values for the light and sets the appropriate CurrentTechnique
   </summary>
      <param name="light">Light.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.UpdateForLight(DirLight)">
      <summary>
   updates the shader values for the light and sets the appropriate CurrentTechnique
   </summary>
      <param name="light">Light.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.SetClearColor(Color)">
      <summary>
   Sets the color of the clear.
   </summary>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.SetObjectToWorldMatrix(Matrix)">
      <summary>
   Sets the object to world matrix.
   </summary>
      <param name="objToWorld">The object to world.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.SetWorldToViewMatrix(Matrix)">
      <summary>
   Sets the world to view matrix.
   </summary>
      <param name="worldToView">The world to view.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.SetProjectionMatrix(Matrix)">
      <summary>
   Sets the projection matrix.
   </summary>
      <param name="projection">The projection.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.SetScreenToWorld(Matrix)">
      <summary>
   inverse of Camera.getViewProjectionMatrix
   </summary>
      <param name="screenToWorld">screenToWorld.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.SetNormalMap(Texture2D)">
      <summary>
   Sets the normal map.
   </summary>
      <param name="normalMap">The normal map.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.SetLightPosition(Vector3)">
      <summary>
   Sets the light position.
   </summary>
      <param name="lightPosition">The light position.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.SetColor(Color)">
      <summary>
   Sets the color.
   </summary>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.SetLightRadius(System.Single)">
      <summary>
   Sets the light radius.
   </summary>
      <param name="radius">The radius.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.SetLightIntensity(System.Single)">
      <summary>
   Sets the light intensity.
   </summary>
      <param name="intensity">The intensity.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.SetSpotLightDirection(Vector2)">
      <summary>
   directly sets the light direction
   </summary>
      <param name="lightDirection">Light direction.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.SetSpotLightDirection(System.Single)">
      <summary>
   sets the light direction using just an angle in degrees. 0 degrees points to theright, 90 degrees would be straight down, etc
   </summary>
      <param name="degrees">Degrees.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.SetSpotConeAngle(System.Single)">
      <summary>
   Sets the spot cone angle.
   </summary>
      <param name="coneAngle">The cone angle.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.SetSpecularIntensity(System.Single)">
      <summary>
   Sets the specular intensity.
   </summary>
      <param name="specIntensity">The spec intensity.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.SetSpecularPower(System.Single)">
      <summary>
   Sets the specular power.
   </summary>
      <param name="specPower">The spec power.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.SetAreaDirectionalLightDirection(Vector3)">
      <summary>
   Sets the area directional light direction.
   </summary>
      <param name="lightDir">The light dir.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.SetAmbientColor(Color)">
      <summary>
   Sets the color of the ambient.
   </summary>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightEffect.PrepareForFinalCombine(Texture2D,Texture2D,Texture2D)">
      <summary>
   sets the two textures required for the final combine and applies the pass
   </summary>
      <param name="diffuse">Diffuse.</param>
      <param name="lightMap">Light map.</param>
      <param name="normalMap">The normal map.</param>
    </member>
    <member name="T:Nez.DeferredLighting.DeferredSpriteEffect">
      <summary>
   effect used to render sprites that take part in deferred lighting. A normal map is required. The normal map can optionally use the alpha
   channel for self illumination by setitng useNormalAlphaChannelForSelfIllumination to true. Note that you need to turn off premultiplied
   alpha in the Pipeline tool when using the alpha for self illumination!
   </summary>
    </member>
    <member name="P:Nez.DeferredLighting.DeferredSpriteEffect.AlphaCutoff">
      <summary>
   alpha cutoff for the alpha test. defaults to 0.3
   </summary>
      <value>The alpha cutoff.</value>
    </member>
    <member name="P:Nez.DeferredLighting.DeferredSpriteEffect.UseNormalAlphaChannelForSelfIllumination">
      <summary>
   if true, the normal map alpha channel will be used for self illumination. Note that you need to turn off premultiplied
   alpha in the Pipeline tool when using the alpha for self illumination!
   </summary>
      <value>
        <c>true</c> if use normal alpha channel for self illumination; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.DeferredLighting.DeferredSpriteEffect.SelfIlluminationPower">
      <summary>
   controls the power of the self illumination where 0 is no contribution and 1 is fully self illuminated
   </summary>
      <value>The self illumination power parameter.</value>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredSpriteEffect.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.DeferredLighting.DeferredSpriteEffect" /> class.
   </summary>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredSpriteEffect.SetNormalMap(Texture2D)">
      <summary>
   Sets the normal map.
   </summary>
      <param name="normalMap">The normal map.</param>
      <returns>DeferredSpriteEffect.</returns>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredSpriteEffect.SetAlphaCutoff(System.Single)">
      <summary>
   alpha cutoff for the alpha test. defaults to 0.3
   </summary>
      <param name="alphaCutoff">Alpha cutoff.</param>
      <returns>The alpha cutoff.</returns>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredSpriteEffect.SetUseNormalAlphaChannelForSelfIllumination(System.Boolean)">
      <summary>
   if true, the normal map alpha channel will be used for self illumination. Note that you need to turn off premultiplied
   alpha in the Pipeline tool when using the alpha for self illumination!
   </summary>
      <param name="useNormalAlphaChannelForSelfIllumination">If set to <c>true</c> use normal alpha channel for self illumination.</param>
      <returns>The use normal alpha channel for self illumination.</returns>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredSpriteEffect.SetSelfIlluminationPower(System.Single)">
      <summary>
   controls the power of the self illumination where 0 is no contribution and 1 is fully self illuminated
   </summary>
      <param name="selfIlluminationPower">Self illumination power.</param>
      <returns>The self illumination power.</returns>
    </member>
    <member name="T:Nez.DeferredLighting.PolygonMesh">
      <summary>
   builds a Polygon from the passed in verts. Verts should be relative to 0,0 and contain the outer perimeter of the polygon. A center
   vert will be added and used to triangulate the polygon. If you need a transform matrix for the Polygon set the position/scale and
   then fetch the transformMatrix property.
   </summary>
    </member>
    <member name="M:Nez.DeferredLighting.PolygonMesh.CreateRectangle">
      <summary>
   Creates the rectangle.
   </summary>
      <returns>PolygonMesh.</returns>
    </member>
    <member name="M:Nez.DeferredLighting.PolygonMesh.CreateSymmetricalPolygon(System.Int32,System.Single)">
      <summary>
   creates a circular polygon
   </summary>
      <param name="vertCount">Vert count.</param>
      <param name="radius">Radius.</param>
      <returns>The symmetrical polygon.</returns>
    </member>
    <member name="M:Nez.DeferredLighting.PolygonMesh.CreateSymmetricalPolygon(System.Int32)">
      <summary>
   creates a circular polygon
   </summary>
      <param name="vertCount">Vert count.</param>
      <returns>The symmetrical polygon.</returns>
    </member>
    <member name="M:Nez.DeferredLighting.PolygonMesh.#ctor(Vector2[])">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.DeferredLighting.PolygonMesh" /> class.
   </summary>
      <param name="points">The points.</param>
    </member>
    <member name="M:Nez.DeferredLighting.PolygonMesh.Render">
      <summary>
   Renders this instance.
   </summary>
    </member>
    <member name="T:Nez.DeferredLighting.QuadMesh">
      <summary>
   Class QuadMesh.
   Implements the <see cref="T:System.IDisposable" /></summary>
      <seealso cref="T:System.IDisposable" />
    </member>
    <member name="M:Nez.DeferredLighting.QuadMesh.#ctor(GraphicsDevice)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.DeferredLighting.QuadMesh" /> class.
   </summary>
      <param name="device">The device.</param>
    </member>
    <member name="M:Nez.DeferredLighting.QuadMesh.Render">
      <summary>
   Renders this instance.
   </summary>
    </member>
    <member name="T:Nez.DeferredLighting.AreaLight">
      <summary>
   AreaLights work like DirLights except they only affect a specific area specified by the width/height. Note that Transform.scale
   will affect the size of an AreaLight.
   </summary>
    </member>
    <member name="P:Nez.DeferredLighting.AreaLight.Width">
      <summary>
   width of the RenderableComponent. subclasses that do not override the bounds property must implement this!
   </summary>
      <value>The width.</value>
    </member>
    <member name="P:Nez.DeferredLighting.AreaLight.Height">
      <summary>
   height of the RenderableComponent. subclasses that do not override the bounds property must implement this!
   </summary>
      <value>The height.</value>
    </member>
    <member name="F:Nez.DeferredLighting.AreaLight.Direction">
      <summary>
   direction of the light
   </summary>
    </member>
    <member name="F:Nez.DeferredLighting.AreaLight.Intensity">
      <summary>
   brightness of the light
   </summary>
    </member>
    <member name="M:Nez.DeferredLighting.AreaLight.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.DeferredLighting.AreaLight" /> class.
   </summary>
    </member>
    <member name="M:Nez.DeferredLighting.AreaLight.#ctor(System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.DeferredLighting.AreaLight" /> class.
   </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
    </member>
    <member name="M:Nez.DeferredLighting.AreaLight.SetWidth(System.Single)">
      <summary>
   Sets the width.
   </summary>
      <param name="width">The width.</param>
      <returns>AreaLight.</returns>
    </member>
    <member name="M:Nez.DeferredLighting.AreaLight.SetHeight(System.Single)">
      <summary>
   Sets the height.
   </summary>
      <param name="height">The height.</param>
      <returns>AreaLight.</returns>
    </member>
    <member name="M:Nez.DeferredLighting.AreaLight.SetDirection(Vector3)">
      <summary>
   Sets the direction.
   </summary>
      <param name="direction">The direction.</param>
      <returns>AreaLight.</returns>
    </member>
    <member name="M:Nez.DeferredLighting.AreaLight.SetIntensity(System.Single)">
      <summary>
   Sets the intensity.
   </summary>
      <param name="intensity">The intensity.</param>
      <returns>AreaLight.</returns>
    </member>
    <member name="T:Nez.DeferredLighting.DeferredLight">
      <summary>
   Class DeferredLight.
   Implements the <see cref="T:Nez.RenderableComponent" /></summary>
      <seealso cref="T:Nez.RenderableComponent" />
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLight.Render(Batcher,Camera)">
      <summary>
   we dont render lights normally so this method will do nothing and never be called. The DeferredLightingRenderer takes care of
   light rendering so that it can cache and reuse the light meshes.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="T:Nez.DeferredLighting.DirLight">
      <summary>
   directional light with a shortended name to avoid clashes with the XNA DirectionalLight. This light type has only a direction and is
   never culled. It is a global light and the only light that produces specular highlights.
   </summary>
    </member>
    <member name="P:Nez.DeferredLighting.DirLight.Bounds">
      <summary>
   the AABB that wraps this object. Used for camera culling.
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="F:Nez.DeferredLighting.DirLight.Direction">
      <summary>
   direction of the light
   </summary>
    </member>
    <member name="F:Nez.DeferredLighting.DirLight.SpecularIntensity">
      <summary>
   specular intensity. 0 - 1 range
   </summary>
    </member>
    <member name="F:Nez.DeferredLighting.DirLight.SpecularPower">
      <summary>
   specular power. this is the exponent passed to pow() of the projection from 0,0,-1 to the light-to-normal
   </summary>
    </member>
    <member name="M:Nez.DeferredLighting.DirLight.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.DeferredLighting.DirLight" /> class.
   </summary>
    </member>
    <member name="M:Nez.DeferredLighting.DirLight.#ctor(Color)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.DeferredLighting.DirLight" /> class.
   </summary>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DirLight.#ctor(Color,Vector3)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.DeferredLighting.DirLight" /> class.
   </summary>
      <param name="color">The color.</param>
      <param name="lightDirection">The light direction.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DirLight.SetDirection(Vector3)">
      <summary>
   Sets the direction.
   </summary>
      <param name="direction">The direction.</param>
      <returns>DirLight.</returns>
    </member>
    <member name="M:Nez.DeferredLighting.DirLight.SetSpecularIntensity(System.Single)">
      <summary>
   Sets the specular intensity.
   </summary>
      <param name="specularIntensity">The specular intensity.</param>
      <returns>DirLight.</returns>
    </member>
    <member name="M:Nez.DeferredLighting.DirLight.SetSpecularPower(System.Single)">
      <summary>
   Sets the specular power.
   </summary>
      <param name="specularPower">The specular power.</param>
      <returns>DirLight.</returns>
    </member>
    <member name="M:Nez.DeferredLighting.DirLight.DebugRender(Batcher)">
      <summary>
   we dont want to render our bounds so we just render a direction
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="T:Nez.DeferredLighting.PointLight">
      <summary>
   PointLights radiate light in a circle. Note that PointLights are affected by Transform.scale. The Transform.scale.X value is multiplied
   by the lights radius when sent to the GPU. It is expected that scale will be linear.
   </summary>
    </member>
    <member name="P:Nez.DeferredLighting.PointLight.Bounds">
      <summary>
   the AABB that wraps this object. Used for camera culling.
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="F:Nez.DeferredLighting.PointLight.ZPosition">
      <summary>
   "height" above the scene in the z direction
   </summary>
    </member>
    <member name="P:Nez.DeferredLighting.PointLight.Radius">
      <summary>
   how far does this light reaches
   </summary>
      <value>The radius.</value>
    </member>
    <member name="F:Nez.DeferredLighting.PointLight.Intensity">
      <summary>
   brightness of the light
   </summary>
    </member>
    <member name="M:Nez.DeferredLighting.PointLight.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.DeferredLighting.PointLight" /> class.
   </summary>
    </member>
    <member name="M:Nez.DeferredLighting.PointLight.#ctor(Color)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.DeferredLighting.PointLight" /> class.
   </summary>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.DeferredLighting.PointLight.SetZPosition(System.Single)">
      <summary>
   Sets the z position.
   </summary>
      <param name="z">The z.</param>
      <returns>PointLight.</returns>
    </member>
    <member name="M:Nez.DeferredLighting.PointLight.SetRadius(System.Single)">
      <summary>
   how far does this light reach
   </summary>
      <param name="radius">Radius.</param>
      <returns>The radius.</returns>
    </member>
    <member name="M:Nez.DeferredLighting.PointLight.SetIntensity(System.Single)">
      <summary>
   brightness of the light
   </summary>
      <param name="intensity">Intensity.</param>
      <returns>The intensity.</returns>
    </member>
    <member name="M:Nez.DeferredLighting.PointLight.DebugRender(Batcher)">
      <summary>
   renders the bounds only if there is no collider. Always renders a square on the origin.
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="T:Nez.DeferredLighting.SpotLight">
      <summary>
   Class SpotLight.
   Implements the <see cref="T:Nez.DeferredLighting.PointLight" /></summary>
      <seealso cref="T:Nez.DeferredLighting.PointLight" />
    </member>
    <member name="P:Nez.DeferredLighting.SpotLight.Direction">
      <summary>
   wrapper for entity.transform.rotation to ease in setting up direction of spots to point at specific locations
   </summary>
      <value>The direction.</value>
    </member>
    <member name="F:Nez.DeferredLighting.SpotLight.ConeAngle">
      <summary>
   angle in degrees of the cone
   </summary>
    </member>
    <member name="M:Nez.DeferredLighting.SpotLight.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.DeferredLighting.SpotLight" /> class.
   </summary>
    </member>
    <member name="M:Nez.DeferredLighting.SpotLight.#ctor(Color)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.DeferredLighting.SpotLight" /> class.
   </summary>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.DeferredLighting.SpotLight.SetZPosition(System.Single)">
      <summary>
   Sets the z position.
   </summary>
      <param name="z">The z.</param>
      <returns>SpotLight.</returns>
    </member>
    <member name="M:Nez.DeferredLighting.SpotLight.SetRadius(System.Single)">
      <summary>
   how far does this light reach
   </summary>
      <param name="radius">Radius.</param>
      <returns>The radius.</returns>
    </member>
    <member name="M:Nez.DeferredLighting.SpotLight.SetIntensity(System.Single)">
      <summary>
   brightness of the light
   </summary>
      <param name="intensity">Intensity.</param>
      <returns>The intensity.</returns>
    </member>
    <member name="M:Nez.DeferredLighting.SpotLight.SetConeAngle(System.Single)">
      <summary>
   Sets the cone angle.
   </summary>
      <param name="coneAngle">The cone angle.</param>
      <returns>SpotLight.</returns>
    </member>
    <member name="M:Nez.DeferredLighting.SpotLight.SetDirection(Vector2)">
      <summary>
   wrapper for entity.transform.rotation to ease in setting up direction of spots to point at specific locations
   </summary>
      <param name="direction">Direction.</param>
      <returns>The direction.</returns>
    </member>
    <member name="T:Nez.DeferredLighting.DeferredLightingRenderer">
      <summary>
   handles deferred lighting. This Renderer should be ordered after any of your Renderers that render to a RenderTexture. Any renderLayers
   rendered by this Renderer should have Renderables with DeferredSpriteMaterials (or null Material to use the default, diffuse only Material).
   </summary>
    </member>
    <member name="P:Nez.DeferredLighting.DeferredLightingRenderer.WantsToRenderToSceneRenderTarget">
      <summary>
   we do not want to render into the Scene render texture
   </summary>
      <value>true</value>
      <c>false</c>
    </member>
    <member name="F:Nez.DeferredLighting.DeferredLightingRenderer.RenderLayers">
      <summary>
   the renderLayers this Renderer will render
   </summary>
    </member>
    <member name="P:Nez.DeferredLighting.DeferredLightingRenderer.AmbientColor">
      <summary>
   ambient lighting color. Alpha is ignored
   </summary>
      <value>The color of the ambient.</value>
    </member>
    <member name="P:Nez.DeferredLighting.DeferredLightingRenderer.ClearColor">
      <summary>
   clear color for the diffuse portion of the gbuffer
   </summary>
      <value>The color of the clear.</value>
    </member>
    <member name="P:Nez.DeferredLighting.DeferredLightingRenderer.NullNormalMapTexture">
      <summary>
   single pixel texture of a neutral normal map. This will effectively make the object have only diffuse lighting if applied as the normal map.
   </summary>
      <value>The null normal map texture.</value>
    </member>
    <member name="F:Nez.DeferredLighting.DeferredLightingRenderer.EnableDebugBufferRender">
      <summary>
   if true, all stages of the deferred pipeline are rendered after the final combine
   </summary>
    </member>
    <member name="F:Nez.DeferredLighting.DeferredLightingRenderer.DiffuseRT">
      <summary>
   The diffuse rt
   </summary>
    </member>
    <member name="F:Nez.DeferredLighting.DeferredLightingRenderer.NormalRT">
      <summary>
   The normal rt
   </summary>
    </member>
    <member name="F:Nez.DeferredLighting.DeferredLightingRenderer.LightRT">
      <summary>
   The light rt
   </summary>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightingRenderer.#ctor(System.Int32,System.Int32,System.Int32[])">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.DeferredLighting.DeferredLightingRenderer" /> class.
   </summary>
      <param name="renderOrder">The render order.</param>
      <param name="lightLayer">The light layer.</param>
      <param name="renderLayers">The render layers.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightingRenderer.Render(Scene)">
      <summary>
   we override render completely here so we can do our thing with multiple render targets
   </summary>
      <param name="scene">scene.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightingRenderer.SetAmbientColor(Color)">
      <summary>
   ambient lighting color. Alpha is ignored
   </summary>
      <param name="color">Color.</param>
      <returns>The ambient color.</returns>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightingRenderer.SetClearColor(Color)">
      <summary>
   clear color for the diffuse portion of the gbuffer
   </summary>
      <param name="color">Color.</param>
      <returns>The clear color.</returns>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightingRenderer.OnSceneBackBufferSizeChanged(System.Int32,System.Int32)">
      <summary>
   called when the default scene RenderTarget is resized and when adding a Renderer if the scene has already began. default implementation
   calls through to RenderTexture.onSceneBackBufferSizeChanged
   so that it can size itself appropriately if necessary.
   </summary>
      <param name="newWidth">New width.</param>
      <param name="newHeight">New height.</param>
    </member>
    <member name="M:Nez.DeferredLighting.DeferredLightingRenderer.Unload">
      <summary>
   called when a scene is ended or this Renderer is removed from the Scene. use this for cleanup.
   </summary>
    </member>
    <member name="T:Nez.DeferredLighting.DeferredSpriteMaterial">
      <summary>
   Class DeferredSpriteMaterial.
   Implements the <see cref="T:Nez.Material`1" /></summary>
      <seealso cref="T:Nez.Material`1" />
    </member>
    <member name="M:Nez.DeferredLighting.DeferredSpriteMaterial.#ctor(Texture2D)">
      <summary>
   DeferredSpriteEffects require a normal map. If you want to forego the normal map and have just diffuse light use the
   DeferredLightingRenderer.nullNormalMapTexture.
   </summary>
      <param name="normalMap">Normal map.</param>
    </member>
    <member name="T:Nez.CrosshatchEffect">
      <summary>
   Class CrosshatchEffect.
   Implements the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /></summary>
      <seealso cref="T:Microsoft.Xna.Framework.Graphics.Effect" />
    </member>
    <member name="P:Nez.CrosshatchEffect.CrosshatchSize">
      <summary>
   size in pixels of the crosshatch. Should be an even number because the half size is also required. Defaults to 16.
   </summary>
      <value>The size of the cross hatch.</value>
    </member>
    <member name="M:Nez.CrosshatchEffect.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.CrosshatchEffect" /> class.
   </summary>
    </member>
    <member name="T:Nez.DissolveEffect">
      <summary>
   Class DissolveEffect.
   Implements the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /></summary>
      <seealso cref="T:Microsoft.Xna.Framework.Graphics.Effect" />
    </member>
    <member name="P:Nez.DissolveEffect.Progress">
      <summary>
   value from 0 - 1 that determines how much the dissolve effect will encompass
   </summary>
      <value>The progress.</value>
    </member>
    <member name="P:Nez.DissolveEffect.DissolveThreshold">
      <summary>
   determines how much area around the current dissolve threshold will be colored with dissolveThresholdColor
   </summary>
      <value>The dissolve threshold.</value>
    </member>
    <member name="P:Nez.DissolveEffect.DissolveThresholdColor">
      <summary>
   the Color that will appear on the threshold of the dissolve effect
   </summary>
      <value>The color of the dissolve threshold.</value>
    </member>
    <member name="P:Nez.DissolveEffect.DissolveTexture">
      <summary>
   the grayscale texture used to determine what is disolved
   </summary>
      <value>The dissolve texture.</value>
    </member>
    <member name="M:Nez.DissolveEffect.#ctor(Texture2D)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.DissolveEffect" /> class.
   </summary>
      <param name="dissolveTexture">The dissolve texture.</param>
    </member>
    <member name="T:Nez.DotsEffect">
      <summary>
   Class DotsEffect.
   Implements the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /></summary>
      <seealso cref="T:Microsoft.Xna.Framework.Graphics.Effect" />
    </member>
    <member name="P:Nez.DotsEffect.Scale">
      <summary>
   Gets or sets the scale.
   </summary>
      <value>The scale.</value>
    </member>
    <member name="P:Nez.DotsEffect.Angle">
      <summary>
   Gets or sets the angle.
   </summary>
      <value>The angle.</value>
    </member>
    <member name="M:Nez.DotsEffect.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.DotsEffect" /> class.
   </summary>
    </member>
    <member name="T:Nez.EffectResource">
      <summary>
   Class EffectResource.
   </summary>
    </member>
    <member name="M:Nez.EffectResource.GetFileResourceBytes(System.String)">
      <summary>
   fetches the raw byte data of a file from the Content folder. Used to keep the Effect subclass code simple and clean due to the Effect
   constructor requiring the byte[].
   </summary>
      <param name="path">Path.</param>
      <returns>The file resource bytes.</returns>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="T:Nez.GaussianBlurEffect">
      <summary>
   this effect requires that you render it twice. The first time horizontally (prepareForHorizontalBlur) and then
   vertically (prepareForVerticalBlur).
   </summary>
    </member>
    <member name="P:Nez.GaussianBlurEffect.BlurAmount">
      <summary>
   amount to blur. A range of 0.5 - 6 works well. Defaults to 2.
   </summary>
      <value>The blur amount.</value>
    </member>
    <member name="P:Nez.GaussianBlurEffect.HorizontalBlurDelta">
      <summary>
   horizontal delta for the blur. Typically 1 / backbuffer width
   </summary>
      <value>The horizontal blur delta.</value>
    </member>
    <member name="P:Nez.GaussianBlurEffect.VerticalBlurDelta">
      <summary>
   vertical delta for the blur. Typically 1 / backbuffer height
   </summary>
      <value>The vertical blur delta.</value>
    </member>
    <member name="M:Nez.GaussianBlurEffect.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.GaussianBlurEffect" /> class.
   </summary>
    </member>
    <member name="M:Nez.GaussianBlurEffect.PrepareForHorizontalBlur">
      <summary>
   prepares the Effect for performing a horizontal blur
   </summary>
    </member>
    <member name="M:Nez.GaussianBlurEffect.PrepareForVerticalBlur">
      <summary>
   prepares the Effect for performing a vertical blur
   </summary>
    </member>
    <member name="T:Nez.GrayscaleEffect">
      <summary>
   Class GrayscaleEffect.
   Implements the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /></summary>
      <seealso cref="T:Microsoft.Xna.Framework.Graphics.Effect" />
    </member>
    <member name="M:Nez.GrayscaleEffect.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.GrayscaleEffect" /> class.
   </summary>
    </member>
    <member name="T:Nez.NoiseEffect">
      <summary>
   Class NoiseEffect.
   Implements the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /></summary>
      <seealso cref="T:Microsoft.Xna.Framework.Graphics.Effect" />
    </member>
    <member name="P:Nez.NoiseEffect.Noise">
      <summary>
   Intensity of the noise. Defaults to 1.
   </summary>
      <value>The noise.</value>
    </member>
    <member name="M:Nez.NoiseEffect.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.NoiseEffect" /> class.
   </summary>
    </member>
    <member name="T:Nez.PaletteCyclerEffect">
      <summary>
   retro palette swap/cycle effect. If cycleSpeed is 0 (the default) this works as a plain old palette swap. It should be used with
   a grayscale texture and a paletteTexture that has a 1 pixel height.
   </summary>
    </member>
    <member name="P:Nez.PaletteCyclerEffect.PaletteTexture">
      <summary>
   palette lookup texture. Should be a 1D texture with a height of 1 pixel
   </summary>
      <value>The palette texture.</value>
    </member>
    <member name="P:Nez.PaletteCyclerEffect.CycleSpeed">
      <summary>
   gets or sets the cycle speed
   </summary>
      <value>The cycle speed.</value>
    </member>
    <member name="M:Nez.PaletteCyclerEffect.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.PaletteCyclerEffect" /> class.
   </summary>
    </member>
    <member name="M:Nez.PaletteCyclerEffect.UpdateTime">
      <summary>
   updates the _time param of the shader if cycleSpeed != 0
   </summary>
      <returns>The time.</returns>
    </member>
    <member name="T:Nez.PolygonLightEffect">
      <summary>
   Class PolygonLightEffect.
   Implements the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /></summary>
      <seealso cref="T:Microsoft.Xna.Framework.Graphics.Effect" />
    </member>
    <member name="P:Nez.PolygonLightEffect.ViewProjectionMatrix">
      <summary>
   Sets the view projection matrix.
   </summary>
      <value>The view projection matrix.</value>
    </member>
    <member name="P:Nez.PolygonLightEffect.LightSource">
      <summary>
   Sets the light source.
   </summary>
      <value>The light source.</value>
    </member>
    <member name="P:Nez.PolygonLightEffect.LightColor">
      <summary>
   Sets the color of the light.
   </summary>
      <value>The color of the light.</value>
    </member>
    <member name="P:Nez.PolygonLightEffect.LightRadius">
      <summary>
   Sets the light radius.
   </summary>
      <value>The light radius.</value>
    </member>
    <member name="M:Nez.PolygonLightEffect.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.PolygonLightEffect" /> class.
   </summary>
    </member>
    <member name="T:Nez.ReflectionEffect">
      <summary>
   Class ReflectionEffect.
   Implements the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /></summary>
      <seealso cref="T:Microsoft.Xna.Framework.Graphics.Effect" />
    </member>
    <member name="P:Nez.ReflectionEffect.ReflectionIntensity">
      <summary>
   0 - 1 range. Intensity of the reflection where 0 is none and 1 is full reflected
   </summary>
      <value>The reflection intensity.</value>
    </member>
    <member name="P:Nez.ReflectionEffect.NormalMagnitude">
      <summary>
   magnitude of the normal map contribution to the UV offset of the sampled RenderTarget. Default is 0.05. Very small numbers work best.
   </summary>
      <value>The normal magnitude.</value>
    </member>
    <member name="P:Nez.ReflectionEffect.NormalMap">
      <summary>
   optional normal map used to displace/refract the UV of the sampled RenderTarget.
   </summary>
      <value>The normal map.</value>
    </member>
    <member name="M:Nez.ReflectionEffect.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.ReflectionEffect" /> class.
   </summary>
    </member>
    <member name="T:Nez.ScanlinesEffect">
      <summary>
   Class ScanlinesEffect.
   Implements the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /></summary>
      <seealso cref="T:Microsoft.Xna.Framework.Graphics.Effect" />
    </member>
    <member name="P:Nez.ScanlinesEffect.Attenuation">
      <summary>
   Gets or sets the attenuation.
   </summary>
      <value>The attenuation.</value>
    </member>
    <member name="P:Nez.ScanlinesEffect.LinesFactor">
      <summary>
   Gets or sets the lines factor.
   </summary>
      <value>The lines factor.</value>
    </member>
    <member name="M:Nez.ScanlinesEffect.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.ScanlinesEffect" /> class.
   </summary>
    </member>
    <member name="T:Nez.SepiaEffect">
      <summary>
   Class SepiaEffect.
   Implements the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /></summary>
      <seealso cref="T:Microsoft.Xna.Framework.Graphics.Effect" />
    </member>
    <member name="P:Nez.SepiaEffect.SepiaTone">
      <summary>
   multiplied by the grayscale value for the final output. Defaults to 1.2f, 1.0f, 0.8f
   </summary>
      <value>The sepia tone.</value>
    </member>
    <member name="M:Nez.SepiaEffect.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.SepiaEffect" /> class.
   </summary>
    </member>
    <member name="T:Nez.SpriteAlphaTestEffect">
      <summary>
   Class SpriteAlphaTestEffect.
   Implements the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /></summary>
      <seealso cref="T:Microsoft.Xna.Framework.Graphics.Effect" />
    </member>
    <member name="T:Nez.SpriteAlphaTestEffect.AlphaTestCompareFunction">
      <summary>
   Enum AlphaTestCompareFunction
   </summary>
    </member>
    <member name="F:Nez.SpriteAlphaTestEffect.AlphaTestCompareFunction.Greater">
      <summary>
   The greater
   </summary>
    </member>
    <member name="F:Nez.SpriteAlphaTestEffect.AlphaTestCompareFunction.LessThan">
      <summary>
   The less than
   </summary>
    </member>
    <member name="F:Nez.SpriteAlphaTestEffect.AlphaTestCompareFunction.Always">
      <summary>
   The always
   </summary>
    </member>
    <member name="F:Nez.SpriteAlphaTestEffect.AlphaTestCompareFunction.Never">
      <summary>
   The never
   </summary>
    </member>
    <member name="P:Nez.SpriteAlphaTestEffect.ReferenceAlpha">
      <summary>
   alpha value used for the comparison. Should be in the 0 - 1 range. Defaults to 0.5f.
   </summary>
      <value>The reference alpha.</value>
    </member>
    <member name="P:Nez.SpriteAlphaTestEffect.CompareFunction">
      <summary>
   Gets or sets the compare function.
   </summary>
      <value>The compare function.</value>
    </member>
    <member name="M:Nez.SpriteAlphaTestEffect.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.SpriteAlphaTestEffect" /> class.
   </summary>
    </member>
    <member name="T:Nez.SpriteBlinkEffect">
      <summary>
   Class SpriteBlinkEffect.
   Implements the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /></summary>
      <seealso cref="T:Microsoft.Xna.Framework.Graphics.Effect" />
    </member>
    <member name="P:Nez.SpriteBlinkEffect.BlinkColor">
      <summary>
   color to blink the sprite. When the blinkColor has an alpha of 1 only the blink color will be shown. An alpha of 0 will result in
   just the sprite being displayed. Any value in between 0 and 1 will interpolate between the two colors.
   </summary>
      <value>The color of the blink.</value>
    </member>
    <member name="M:Nez.SpriteBlinkEffect.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.SpriteBlinkEffect" /> class.
   </summary>
    </member>
    <member name="T:Nez.SpriteEffect">
      <summary>
   Class SpriteEffect.
   Implements the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /></summary>
      <seealso cref="T:Microsoft.Xna.Framework.Graphics.Effect" />
    </member>
    <member name="M:Nez.SpriteEffect.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.SpriteEffect" /> class.
   </summary>
    </member>
    <member name="M:Nez.SpriteEffect.SetMatrixTransform(Matrix@)">
      <summary>
   Sets the matrix transform.
   </summary>
      <param name="matrixTransform">The matrix transform.</param>
    </member>
    <member name="T:Nez.SpriteLinesEffect">
      <summary>
   draws the sprite with just vertical or horizonal lines of the specified color. The effect works in screen space.
   </summary>
    </member>
    <member name="P:Nez.SpriteLinesEffect.LineColor">
      <summary>
   color of the lines. Defaults to red.
   </summary>
      <value>The color of the line.</value>
    </member>
    <member name="P:Nez.SpriteLinesEffect.LineSize">
      <summary>
   size of the lines in pixels. Defaults to 5.
   </summary>
      <value>The size of the line.</value>
    </member>
    <member name="P:Nez.SpriteLinesEffect.IsVertical">
      <summary>
   toggles vertical/horizontal lines
   </summary>
      <value>
        <c>true</c> if is vertical; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:Nez.SpriteLinesEffect.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.SpriteLinesEffect" /> class.
   </summary>
    </member>
    <member name="T:Nez.StencilLightEffect">
      <summary>
   Class StencilLightEffect.
   Implements the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /></summary>
      <seealso cref="T:Microsoft.Xna.Framework.Graphics.Effect" />
    </member>
    <member name="P:Nez.StencilLightEffect.LightPosition">
      <summary>
   Sets the light position.
   </summary>
      <value>The light position.</value>
    </member>
    <member name="P:Nez.StencilLightEffect.Color">
      <summary>
   Sets the color.
   </summary>
      <value>The color.</value>
    </member>
    <member name="P:Nez.StencilLightEffect.Radius">
      <summary>
   Sets the radius.
   </summary>
      <value>The radius.</value>
    </member>
    <member name="P:Nez.StencilLightEffect.ViewProjectionMatrix">
      <summary>
   Sets the view projection matrix.
   </summary>
      <value>The view projection matrix.</value>
    </member>
    <member name="M:Nez.StencilLightEffect.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.StencilLightEffect" /> class.
   </summary>
    </member>
    <member name="T:Nez.TwistEffect">
      <summary>
   Class TwistEffect.
   Implements the <see cref="T:Microsoft.Xna.Framework.Graphics.Effect" /></summary>
      <seealso cref="T:Microsoft.Xna.Framework.Graphics.Effect" />
    </member>
    <member name="P:Nez.TwistEffect.Radius">
      <summary>
   Gets or sets the radius.
   </summary>
      <value>The radius.</value>
    </member>
    <member name="P:Nez.TwistEffect.Angle">
      <summary>
   Gets or sets the angle.
   </summary>
      <value>The angle.</value>
    </member>
    <member name="P:Nez.TwistEffect.Offset">
      <summary>
   Gets or sets the offset.
   </summary>
      <value>The offset.</value>
    </member>
    <member name="M:Nez.TwistEffect.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.TwistEffect" /> class.
   </summary>
    </member>
    <member name="T:Nez.WaterReflectionEffect">
      <summary>
   Class WaterReflectionEffect.
   Implements the <see cref="T:Nez.ReflectionEffect" /></summary>
      <seealso cref="T:Nez.ReflectionEffect" />
    </member>
    <member name="P:Nez.WaterReflectionEffect.SparkleIntensity">
      <summary>
   defaults to 0.015. Waves are calculated by sampling the normal map twice. Any values generated that are sparkleIntensity greater
   than the actual uv value at the place of sampling will be colored sparkleColor.
   </summary>
      <value>The sparkle intensity.</value>
    </member>
    <member name="P:Nez.WaterReflectionEffect.SparkleColor">
      <summary>
   the color for the sparkly wave peaks
   </summary>
      <value>The color of the sparkle.</value>
    </member>
    <member name="P:Nez.WaterReflectionEffect.ScreenSpaceVerticalOffset">
      <summary>
   position in screen space of the top of the water plane
   </summary>
      <value>The screen space vertical offset.</value>
    </member>
    <member name="P:Nez.WaterReflectionEffect.PerspectiveCorrectionIntensity">
      <summary>
   defaults to 0.3. intensity of the perspective correction
   </summary>
      <value>The perspective correction intensity.</value>
    </member>
    <member name="P:Nez.WaterReflectionEffect.FirstDisplacementSpeed">
      <summary>
   defaults to 2. speed that the first displacment/normal uv is scrolled
   </summary>
      <value>The first displacement speed.</value>
    </member>
    <member name="P:Nez.WaterReflectionEffect.SecondDisplacementSpeed">
      <summary>
   defaults to 6. speed that the second displacment/normal uv is scrolled
   </summary>
      <value>The second displacement speed.</value>
    </member>
    <member name="P:Nez.WaterReflectionEffect.SecondDisplacementScale">
      <summary>
   defaults to 3. the normal map is sampled twice then combined. The 2nd sampling is scaled by this value.
   </summary>
      <value>The second displacement scale.</value>
    </member>
    <member name="M:Nez.WaterReflectionEffect.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.WaterReflectionEffect" /> class.
   </summary>
    </member>
    <member name="T:Nez.PaletteCyclerMaterial">
      <summary>
   Class PaletteCyclerMaterial.
   Implements the <see cref="T:Nez.Material`1" /></summary>
      <seealso cref="T:Nez.Material`1" />
    </member>
    <member name="M:Nez.PaletteCyclerMaterial.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.PaletteCyclerMaterial" /> class.
   </summary>
    </member>
    <member name="M:Nez.PaletteCyclerMaterial.OnPreRender(Camera)">
      <summary>
   called when the Material is initialy set right before Batcher.begin to allow any Effects that have parameters set if necessary
   based on the Camera Matrix such as to set the MatrixTransform via camera.viewProjectionMatrix mimicking what Batcher does. This will
   only be called if there is a non-null Effect.
   </summary>
      <param name="camera">Camera.</param>
    </member>
    <member name="T:Nez.BloomPostProcessor">
      <summary>
   Class BloomPostProcessor.
   Implements the <see cref="T:Nez.PostProcessor" /></summary>
      <seealso cref="T:Nez.PostProcessor" />
    </member>
    <member name="P:Nez.BloomPostProcessor.Settings">
      <summary>
   the settings used by the bloom and blur shaders. If changed, you must call setBloomSettings for the changes to take effect.
   </summary>
      <value>The settings.</value>
    </member>
    <member name="P:Nez.BloomPostProcessor.RenderTargetScale">
      <summary>
   scale of the internal RenderTargets. For high resolution renders a half sized RT is usually more than enough. Defaults to 1.
   </summary>
      <value>The render target scale.</value>
    </member>
    <member name="M:Nez.BloomPostProcessor.#ctor(System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.BloomPostProcessor" /> class.
   </summary>
      <param name="executionOrder">The execution order.</param>
    </member>
    <member name="M:Nez.BloomPostProcessor.OnAddedToScene(Scene)">
      <summary>
   called when the PostProcessor is added to the Scene. Subclasses must base!
   </summary>
      <param name="scene">Scene.</param>
    </member>
    <member name="M:Nez.BloomPostProcessor.Unload">
      <summary>
   called when a scene is ended or this PostProcessor is removed. use this for cleanup.
   </summary>
    </member>
    <member name="M:Nez.BloomPostProcessor.SetBloomSettings(BloomSettings)">
      <summary>
   sets the settings used by the bloom and blur shaders
   </summary>
      <param name="settings">Settings.</param>
    </member>
    <member name="M:Nez.BloomPostProcessor.OnSceneBackBufferSizeChanged(System.Int32,System.Int32)">
      <summary>
   called when the default scene RenderTarget is resized. If a PostProcessor is added to a scene before it begins this method will be
   called before the scene first renders. If the scene already started this will be called after onAddedToScene making it an ideal place
   to create any RenderTextures a PostProcessor might require.
   </summary>
      <param name="newWidth">New width.</param>
      <param name="newHeight">New height.</param>
    </member>
    <member name="M:Nez.BloomPostProcessor.Process(RenderTarget2D,RenderTarget2D)">
      <summary>
   this is the meat method here. The source passed in contains the full scene with any previous PostProcessors
   rendering. Render it into the destination RenderTarget. The drawFullScreenQuad methods are there to make
   the process even easier. The default implementation renders source into destination with effect.
   Note that destination might have a previous render! If your PostProcessor Effect is discarding you should clear
   the destination before writing to it!
   </summary>
      <param name="source">Source.</param>
      <param name="destination">Destination.</param>
    </member>
    <member name="T:Nez.BloomSettings">
      <summary>
   Class holds all the settings used to tweak the bloom effect.
   </summary>
    </member>
    <member name="F:Nez.BloomSettings.Threshold">
      <summary>
   The threshold
   </summary>
    </member>
    <member name="F:Nez.BloomSettings.BlurAmount">
      <summary>
   The blur amount
   </summary>
    </member>
    <member name="F:Nez.BloomSettings.Intensity">
      <summary>
   The intensity
   </summary>
    </member>
    <member name="F:Nez.BloomSettings.BaseIntensity">
      <summary>
   The base intensity
   </summary>
    </member>
    <member name="F:Nez.BloomSettings.Saturation">
      <summary>
   The saturation
   </summary>
    </member>
    <member name="F:Nez.BloomSettings.BaseSaturation">
      <summary>
   The base saturation
   </summary>
    </member>
    <member name="M:Nez.BloomSettings.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
   Constructs a new bloom settings descriptor.
   </summary>
      <param name="bloomThreshold">The bloom threshold.</param>
      <param name="blurAmount">The blur amount.</param>
      <param name="bloomIntensity">The bloom intensity.</param>
      <param name="baseIntensity">The base intensity.</param>
      <param name="bloomSaturation">The bloom saturation.</param>
      <param name="baseSaturation">The base saturation.</param>
    </member>
    <member name="F:Nez.BloomSettings.PresetSettings">
      <summary>
   Table of preset bloom settings. Note that BaseSat needs to be near 0 if the final render needs transparency!
   </summary>
    </member>
    <member name="T:Nez.CinematicLetterboxPostProcessor">
      <summary>
   Class CinematicLetterboxPostProcessor.
   Implements the <see cref="T:Nez.PostProcessor" /></summary>
      <seealso cref="T:Nez.PostProcessor" />
    </member>
    <member name="P:Nez.CinematicLetterboxPostProcessor.Color">
      <summary>
   color of the letterbox
   </summary>
      <value>The color.</value>
    </member>
    <member name="P:Nez.CinematicLetterboxPostProcessor.LetterboxSize">
      <summary>
   size in pixels of the letterbox
   </summary>
      <value>The size of the letterbox.</value>
    </member>
    <member name="M:Nez.CinematicLetterboxPostProcessor.#ctor(System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.CinematicLetterboxPostProcessor" /> class.
   </summary>
      <param name="executionOrder">The execution order.</param>
    </member>
    <member name="M:Nez.CinematicLetterboxPostProcessor.OnAddedToScene(Scene)">
      <summary>
   called when the PostProcessor is added to the Scene. Subclasses must base!
   </summary>
      <param name="scene">Scene.</param>
    </member>
    <member name="M:Nez.CinematicLetterboxPostProcessor.Unload">
      <summary>
   called when a scene is ended or this PostProcessor is removed. use this for cleanup.
   </summary>
    </member>
    <member name="M:Nez.CinematicLetterboxPostProcessor.AnimateIn(System.Single,System.Single,EaseType)">
      <summary>
   animates the letterbox in
   </summary>
      <param name="letterboxSize">Letterbox size.</param>
      <param name="duration">Duration.</param>
      <param name="easeType">Ease type.</param>
      <returns>The in.</returns>
    </member>
    <member name="M:Nez.CinematicLetterboxPostProcessor.AnimateOut(System.Single,EaseType)">
      <summary>
   animates the letterbox out
   </summary>
      <param name="duration">Duration.</param>
      <param name="easeType">Ease type.</param>
      <returns>The out.</returns>
    </member>
    <member name="T:Nez.GaussianBlurPostProcessor">
      <summary>
   Class GaussianBlurPostProcessor.
   Implements the <see cref="T:Nez.PostProcessor`1" /></summary>
      <seealso cref="T:Nez.PostProcessor`1" />
    </member>
    <member name="P:Nez.GaussianBlurPostProcessor.RenderTargetScale">
      <summary>
   scale of the internal RenderTargets. For high resolution renders a half sized RT is usually more than enough. Defaults to 1.
   </summary>
      <value>The render target scale.</value>
    </member>
    <member name="M:Nez.GaussianBlurPostProcessor.#ctor(System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.GaussianBlurPostProcessor" /> class.
   </summary>
      <param name="executionOrder">The execution order.</param>
    </member>
    <member name="M:Nez.GaussianBlurPostProcessor.OnAddedToScene(Scene)">
      <summary>
   called when the PostProcessor is added to the Scene. Subclasses must base!
   </summary>
      <param name="scene">Scene.</param>
    </member>
    <member name="M:Nez.GaussianBlurPostProcessor.Unload">
      <summary>
   Unloads this instance.
   </summary>
    </member>
    <member name="M:Nez.GaussianBlurPostProcessor.OnSceneBackBufferSizeChanged(System.Int32,System.Int32)">
      <summary>
   called when the default scene RenderTarget is resized. If a PostProcessor is added to a scene before it begins this method will be
   called before the scene first renders. If the scene already started this will be called after onAddedToScene making it an ideal place
   to create any RenderTextures a PostProcessor might require.
   </summary>
      <param name="newWidth">New width.</param>
      <param name="newHeight">New height.</param>
    </member>
    <member name="M:Nez.GaussianBlurPostProcessor.Process(RenderTarget2D,RenderTarget2D)">
      <summary>
   we have to override the default implementation here because we use a custom Effect subclass that differes from the effect
   field of the base class
   will be null.
   </summary>
      <param name="source">Source.</param>
      <param name="destination">Destination.</param>
    </member>
    <member name="T:Nez.HeatDistortionPostProcessor">
      <summary>
   Class HeatDistortionPostProcessor.
   Implements the <see cref="T:Nez.PostProcessor" /></summary>
      <seealso cref="T:Nez.PostProcessor" />
    </member>
    <member name="P:Nez.HeatDistortionPostProcessor.DistortionFactor">
      <summary>
   Gets or sets the distortion factor.
   </summary>
      <value>The distortion factor.</value>
    </member>
    <member name="P:Nez.HeatDistortionPostProcessor.RiseFactor">
      <summary>
   Gets or sets the rise factor.
   </summary>
      <value>The rise factor.</value>
    </member>
    <member name="P:Nez.HeatDistortionPostProcessor.DistortionTexture">
      <summary>
   Sets the distortion texture.
   </summary>
      <value>The distortion texture.</value>
    </member>
    <member name="M:Nez.HeatDistortionPostProcessor.#ctor(System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.HeatDistortionPostProcessor" /> class.
   </summary>
      <param name="executionOrder">The execution order.</param>
    </member>
    <member name="M:Nez.HeatDistortionPostProcessor.OnAddedToScene(Scene)">
      <summary>
   called when the PostProcessor is added to the Scene. Subclasses must base!
   </summary>
      <param name="scene">Scene.</param>
    </member>
    <member name="M:Nez.HeatDistortionPostProcessor.Unload">
      <summary>
   called when a scene is ended or this PostProcessor is removed. use this for cleanup.
   </summary>
    </member>
    <member name="M:Nez.HeatDistortionPostProcessor.Process(RenderTarget2D,RenderTarget2D)">
      <summary>
   this is the meat method here. The source passed in contains the full scene with any previous PostProcessors
   rendering. Render it into the destination RenderTarget. The drawFullScreenQuad methods are there to make
   the process even easier. The default implementation renders source into destination with effect.
   Note that destination might have a previous render! If your PostProcessor Effect is discarding you should clear
   the destination before writing to it!
   </summary>
      <param name="source">Source.</param>
      <param name="destination">Destination.</param>
    </member>
    <member name="T:Nez.PixelBloomPostProcessor">
      <summary>
   this PostProcessor expects that the layerRenderTarget is the top-most layer and that it contains
   </summary>
    </member>
    <member name="M:Nez.PixelBloomPostProcessor.#ctor(RenderTexture,System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.PixelBloomPostProcessor" /> class.
   </summary>
      <param name="layerRenderTexture">The layer render texture.</param>
      <param name="executionOrder">The execution order.</param>
    </member>
    <member name="M:Nez.PixelBloomPostProcessor.OnSceneBackBufferSizeChanged(System.Int32,System.Int32)">
      <summary>
   called when the default scene RenderTarget is resized. If a PostProcessor is added to a scene before it begins this method will be
   called before the scene first renders. If the scene already started this will be called after onAddedToScene making it an ideal place
   to create any RenderTextures a PostProcessor might require.
   </summary>
      <param name="newWidth">New width.</param>
      <param name="newHeight">New height.</param>
    </member>
    <member name="M:Nez.PixelBloomPostProcessor.Process(RenderTarget2D,RenderTarget2D)">
      <summary>
   this is the meat method here. The source passed in contains the full scene with any previous PostProcessors
   rendering. Render it into the destination RenderTarget. The drawFullScreenQuad methods are there to make
   the process even easier. The default implementation renders source into destination with effect.
   Note that destination might have a previous render! If your PostProcessor Effect is discarding you should clear
   the destination before writing to it!
   </summary>
      <param name="source">Source.</param>
      <param name="destination">Destination.</param>
    </member>
    <member name="M:Nez.PixelBloomPostProcessor.Unload">
      <summary>
   called when a scene is ended or this PostProcessor is removed. use this for cleanup.
   </summary>
    </member>
    <member name="T:Nez.PixelGlitchPostProcessor">
      <summary>
   glitch effect where the screen is divided into rows verticalSize high. Each row is shifted horizonalAmount left or right. It is best used
   by changing horizontalOffset every few frames for a second then going back to normal.
   </summary>
    </member>
    <member name="P:Nez.PixelGlitchPostProcessor.VerticalSize">
      <summary>
   vertical size in pixels or each row. default 5.0
   </summary>
      <value>The size of the vertical.</value>
    </member>
    <member name="P:Nez.PixelGlitchPostProcessor.HorizontalOffset">
      <summary>
   horizontal shift in pixels. default 10.0
   </summary>
      <value>The horizontal offset.</value>
    </member>
    <member name="M:Nez.PixelGlitchPostProcessor.#ctor(System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.PixelGlitchPostProcessor" /> class.
   </summary>
      <param name="executionOrder">The execution order.</param>
    </member>
    <member name="M:Nez.PixelGlitchPostProcessor.OnAddedToScene(Scene)">
      <summary>
   called when the PostProcessor is added to the Scene. Subclasses must base!
   </summary>
      <param name="scene">Scene.</param>
    </member>
    <member name="M:Nez.PixelGlitchPostProcessor.Unload">
      <summary>
   called when a scene is ended or this PostProcessor is removed. use this for cleanup.
   </summary>
    </member>
    <member name="M:Nez.PixelGlitchPostProcessor.OnSceneBackBufferSizeChanged(System.Int32,System.Int32)">
      <summary>
   called when the default scene RenderTarget is resized. If a PostProcessor is added to a scene before it begins this method will be
   called before the scene first renders. If the scene already started this will be called after onAddedToScene making it an ideal place
   to create any RenderTextures a PostProcessor might require.
   </summary>
      <param name="newWidth">New width.</param>
      <param name="newHeight">New height.</param>
    </member>
    <member name="T:Nez.PixelMosaicRenderDelegate">
      <summary>
   overlays a mosaic on top of the final render. Useful only for pixel perfect pixel art.
   </summary>
    </member>
    <member name="M:Nez.PixelMosaicRenderDelegate.OnAddedToScene(Scene)">
      <summary>
   called when added to the Scene
   </summary>
      <param name="scene">The scene.</param>
    </member>
    <member name="M:Nez.PixelMosaicRenderDelegate.OnSceneBackBufferSizeChanged(System.Int32,System.Int32)">
      <summary>
   called when the back buffer size changes
   </summary>
      <param name="newWidth">The new width.</param>
      <param name="newHeight">The new height.</param>
    </member>
    <member name="M:Nez.PixelMosaicRenderDelegate.HandleFinalRender(RenderTarget2D,Color,RenderTarget2D,Rectangle,SamplerState)">
      <summary>
   this gets called by a Scene so that the final render can be handled. The render should be done into finalRenderTarget.
   In most cases, finalRenderTarget will be null so the render will just be to the backbuffer. The only time finalRenderTarget
   will be set is the first frame of a SceneTransition where the transition has requested the previous Scene render.
   </summary>
      <param name="finalRenderTarget">The final render target.</param>
      <param name="letterboxColor">Color of the letterbox.</param>
      <param name="source">The source.</param>
      <param name="finalRenderDestinationRect">The final render destination rect.</param>
      <param name="samplerState">State of the sampler.</param>
    </member>
    <member name="M:Nez.PixelMosaicRenderDelegate.Unload">
      <summary>
   called when a Scene ends. Release any resources here.
   </summary>
    </member>
    <member name="T:Nez.PolyLightPostProcessor">
      <summary>
   post processor to assist with making blended poly lights. Usage is as follows:
   - render all sprite lights with a separate Renderer to a RenderTarget. The clear color of the Renderer is your ambient light color.
   - render all normal objects in standard fashion
   - add this PostProcessor with the RenderTarget from your lights Renderer
   </summary>
    </member>
    <member name="P:Nez.PolyLightPostProcessor.MultiplicativeFactor">
      <summary>
   multiplicative factor for the blend of the base and light render targets. Defaults to 1.
   </summary>
      <value>The multiplicative factor.</value>
    </member>
    <member name="P:Nez.PolyLightPostProcessor.EnableBlur">
      <summary>
   enables/disables a gaussian blur of the light texture before it is combined with the scene render
   </summary>
      <value>
        <c>true</c> if enable blur; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.PolyLightPostProcessor.BlurRenderTargetScale">
      <summary>
   scale of the internal RenderTargets used for the blur. For high resolution renders a half sized RT is usually more than enough.
   Defaults to 0.5.
   </summary>
      <value>The blur render target scale.</value>
    </member>
    <member name="P:Nez.PolyLightPostProcessor.BlurAmount">
      <summary>
   amount to blur. A range of 0.5 - 6 works well. Defaults to 2.
   </summary>
      <value>The blur amount.</value>
    </member>
    <member name="M:Nez.PolyLightPostProcessor.#ctor(System.Int32,RenderTexture)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.PolyLightPostProcessor" /> class.
   </summary>
      <param name="executionOrder">The execution order.</param>
      <param name="lightsRenderTexture">The lights render texture.</param>
    </member>
    <member name="M:Nez.PolyLightPostProcessor.SetMultiplicativeFactor(System.Single)">
      <summary>
   Sets the multiplicative factor.
   </summary>
      <param name="multiplicativeFactor">The multiplicative factor.</param>
      <returns>PolyLightPostProcessor.</returns>
    </member>
    <member name="M:Nez.PolyLightPostProcessor.SetEnableBlur(System.Boolean)">
      <summary>
   Sets the enable blur.
   </summary>
      <param name="enableBlur">if set to <c>true</c> [enable blur].</param>
      <returns>PolyLightPostProcessor.</returns>
    </member>
    <member name="M:Nez.PolyLightPostProcessor.SetBlurRenderTargetScale(System.Single)">
      <summary>
   Sets the blur render target scale.
   </summary>
      <param name="blurRenderTargetScale">The blur render target scale.</param>
      <returns>PolyLightPostProcessor.</returns>
    </member>
    <member name="M:Nez.PolyLightPostProcessor.SetBlurAmount(System.Single)">
      <summary>
   Sets the blur amount.
   </summary>
      <param name="blurAmount">The blur amount.</param>
      <returns>PolyLightPostProcessor.</returns>
    </member>
    <member name="M:Nez.PolyLightPostProcessor.OnAddedToScene(Scene)">
      <summary>
   called when the PostProcessor is added to the Scene. Subclasses must base!
   </summary>
      <param name="scene">Scene.</param>
    </member>
    <member name="M:Nez.PolyLightPostProcessor.Unload">
      <summary>
   called when a scene is ended or this PostProcessor is removed. use this for cleanup.
   </summary>
    </member>
    <member name="M:Nez.PolyLightPostProcessor.Process(RenderTarget2D,RenderTarget2D)">
      <summary>
   this is the meat method here. The source passed in contains the full scene with any previous PostProcessors
   rendering. Render it into the destination RenderTarget. The drawFullScreenQuad methods are there to make
   the process even easier. The default implementation renders source into destination with effect.
   Note that destination might have a previous render! If your PostProcessor Effect is discarding you should clear
   the destination before writing to it!
   </summary>
      <param name="source">Source.</param>
      <param name="destination">Destination.</param>
    </member>
    <member name="M:Nez.PolyLightPostProcessor.OnSceneBackBufferSizeChanged(System.Int32,System.Int32)">
      <summary>
   called when the default scene RenderTarget is resized. If a PostProcessor is added to a scene before it begins this method will be
   called before the scene first renders. If the scene already started this will be called after onAddedToScene making it an ideal place
   to create any RenderTextures a PostProcessor might require.
   </summary>
      <param name="newWidth">New width.</param>
      <param name="newHeight">New height.</param>
    </member>
    <member name="T:Nez.ScanlinesPostProcessor">
      <summary>
   Class ScanlinesPostProcessor.
   Implements the <see cref="T:Nez.PostProcessor`1" /></summary>
      <seealso cref="T:Nez.PostProcessor`1" />
    </member>
    <member name="M:Nez.ScanlinesPostProcessor.#ctor(System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.ScanlinesPostProcessor" /> class.
   </summary>
      <param name="executionOrder">The execution order.</param>
    </member>
    <member name="M:Nez.ScanlinesPostProcessor.OnAddedToScene(Scene)">
      <summary>
   called when the PostProcessor is added to the Scene. Subclasses must base!
   </summary>
      <param name="scene">Scene.</param>
    </member>
    <member name="M:Nez.ScanlinesPostProcessor.Unload">
      <summary>
   Unloads this instance.
   </summary>
    </member>
    <member name="T:Nez.SpriteLightPostProcessor">
      <summary>
   post processor to assist with making blended sprite lights. Usage is as follows:
   - render all sprite lights with a separate Renderer to a RenderTarget. The clear color of the Renderer is your ambient light color.
   - render all normal objects in standard fashion
   - add this PostProcessor with the RenderTarget from your lights Renderer
   </summary>
    </member>
    <member name="P:Nez.SpriteLightPostProcessor.MultiplicativeFactor">
      <summary>
   multiplicative factor for the blend of the base and light render targets. Defaults to 1.
   </summary>
      <value>The multiplicative factor.</value>
    </member>
    <member name="M:Nez.SpriteLightPostProcessor.#ctor(System.Int32,RenderTexture)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.SpriteLightPostProcessor" /> class.
   </summary>
      <param name="executionOrder">The execution order.</param>
      <param name="lightsRenderTexture">The lights render texture.</param>
    </member>
    <member name="M:Nez.SpriteLightPostProcessor.OnAddedToScene(Scene)">
      <summary>
   called when the PostProcessor is added to the Scene. Subclasses must base!
   </summary>
      <param name="scene">Scene.</param>
    </member>
    <member name="M:Nez.SpriteLightPostProcessor.Unload">
      <summary>
   called when a scene is ended or this PostProcessor is removed. use this for cleanup.
   </summary>
    </member>
    <member name="M:Nez.SpriteLightPostProcessor.Process(RenderTarget2D,RenderTarget2D)">
      <summary>
   this is the meat method here. The source passed in contains the full scene with any previous PostProcessors
   rendering. Render it into the destination RenderTarget. The drawFullScreenQuad methods are there to make
   the process even easier. The default implementation renders source into destination with effect.
   Note that destination might have a previous render! If your PostProcessor Effect is discarding you should clear
   the destination before writing to it!
   </summary>
      <param name="source">Source.</param>
      <param name="destination">Destination.</param>
    </member>
    <member name="M:Nez.SpriteLightPostProcessor.OnSceneBackBufferSizeChanged(System.Int32,System.Int32)">
      <summary>
   called when the default scene RenderTarget is resized. If a PostProcessor is added to a scene before it begins this method will be
   called before the scene first renders. If the scene already started this will be called after onAddedToScene making it an ideal place
   to create any RenderTextures a PostProcessor might require.
   </summary>
      <param name="newWidth">New width.</param>
      <param name="newHeight">New height.</param>
    </member>
    <member name="T:Nez.VignettePostProcessor">
      <summary>
   Class VignettePostProcessor.
   Implements the <see cref="T:Nez.PostProcessor" /></summary>
      <seealso cref="T:Nez.PostProcessor" />
    </member>
    <member name="P:Nez.VignettePostProcessor.Power">
      <summary>
   Gets or sets the power.
   </summary>
      <value>The power.</value>
    </member>
    <member name="P:Nez.VignettePostProcessor.Radius">
      <summary>
   Gets or sets the radius.
   </summary>
      <value>The radius.</value>
    </member>
    <member name="M:Nez.VignettePostProcessor.#ctor(System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VignettePostProcessor" /> class.
   </summary>
      <param name="executionOrder">The execution order.</param>
    </member>
    <member name="M:Nez.VignettePostProcessor.OnAddedToScene(Scene)">
      <summary>
   called when the PostProcessor is added to the Scene. Subclasses must base!
   </summary>
      <param name="scene">Scene.</param>
    </member>
    <member name="M:Nez.VignettePostProcessor.Unload">
      <summary>
   called when a scene is ended or this PostProcessor is removed. use this for cleanup.
   </summary>
    </member>
    <member name="T:Nez.IFinalRenderDelegate">
      <summary>
   optional interface that can be added to any object for special cases where the final render to screen needs to be overridden. Note that
   the Scene.screenshotRequestCallback will not function as expected if an IFinalRenderDelegate is present. This is because the
   screenshot will grab the RenderTarget before the IFinalRenderDelegate does its thing.
   </summary>
    </member>
    <member name="M:Nez.IFinalRenderDelegate.OnAddedToScene(Scene)">
      <summary>
   called when added to the Scene
   </summary>
      <param name="scene">The scene.</param>
    </member>
    <member name="M:Nez.IFinalRenderDelegate.OnSceneBackBufferSizeChanged(System.Int32,System.Int32)">
      <summary>
   called when the back buffer size changes
   </summary>
      <param name="newWidth">The new width.</param>
      <param name="newHeight">The new height.</param>
    </member>
    <member name="M:Nez.IFinalRenderDelegate.HandleFinalRender(RenderTarget2D,Color,RenderTarget2D,Rectangle,SamplerState)">
      <summary>
   this gets called by a Scene so that the final render can be handled. The render should be done into finalRenderTarget.
   In most cases, finalRenderTarget will be null so the render will just be to the backbuffer. The only time finalRenderTarget
   will be set is the first frame of a SceneTransition where the transition has requested the previous Scene render.
   </summary>
      <param name="finalRenderTarget">The final render target.</param>
      <param name="letterboxColor">Color of the letterbox.</param>
      <param name="source">The source.</param>
      <param name="finalRenderDestinationRect">The final render destination rect.</param>
      <param name="samplerState">State of the sampler.</param>
    </member>
    <member name="M:Nez.IFinalRenderDelegate.Unload">
      <summary>
   called when a Scene ends. Release any resources here.
   </summary>
    </member>
    <member name="T:Nez.PostProcessor">
      <summary>
   Post Processing step for rendering actions after everthing done.
   </summary>
    </member>
    <member name="F:Nez.PostProcessor.Enabled">
      <summary>
   Step is Enabled or not.
   </summary>
    </member>
    <member name="F:Nez.PostProcessor.ExecutionOrder">
      <summary>
   specifies the order in which the Renderers will be called by the scene
   </summary>
    </member>
    <member name="F:Nez.PostProcessor.Effect">
      <summary>
   The effect used to render with
   </summary>
    </member>
    <member name="F:Nez.PostProcessor.SamplerState">
      <summary>
   SamplerState used for the drawFullscreenQuad method
   </summary>
    </member>
    <member name="F:Nez.PostProcessor.BlendState">
      <summary>
   BlendState used by the drawFullsceenQuad method
   </summary>
    </member>
    <member name="M:Nez.PostProcessor.#ctor(System.Int32,Effect)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.PostProcessor" /> class.
   </summary>
      <param name="executionOrder">The execution order.</param>
      <param name="effect">The effect.</param>
    </member>
    <member name="M:Nez.PostProcessor.OnAddedToScene(Scene)">
      <summary>
   called when the PostProcessor is added to the Scene. Subclasses must base!
   </summary>
      <param name="scene">Scene.</param>
    </member>
    <member name="M:Nez.PostProcessor.OnSceneBackBufferSizeChanged(System.Int32,System.Int32)">
      <summary>
   called when the default scene RenderTarget is resized. If a PostProcessor is added to a scene before it begins this method will be
   called before the scene first renders. If the scene already started this will be called after onAddedToScene making it an ideal place
   to create any RenderTextures a PostProcessor might require.
   </summary>
      <param name="newWidth">New width.</param>
      <param name="newHeight">New height.</param>
    </member>
    <member name="M:Nez.PostProcessor.Process(RenderTarget2D,RenderTarget2D)">
      <summary>
   this is the meat method here. The source passed in contains the full scene with any previous PostProcessors
   rendering. Render it into the destination RenderTarget. The drawFullScreenQuad methods are there to make
   the process even easier. The default implementation renders source into destination with effect.
   Note that destination might have a previous render! If your PostProcessor Effect is discarding you should clear
   the destination before writing to it!
   </summary>
      <param name="source">Source.</param>
      <param name="destination">Destination.</param>
    </member>
    <member name="M:Nez.PostProcessor.Unload">
      <summary>
   called when a scene is ended or this PostProcessor is removed. use this for cleanup.
   </summary>
    </member>
    <member name="M:Nez.PostProcessor.CompareTo(PostProcessor)">
      <summary>
   Compares to.
   </summary>
      <param name="other">The other.</param>
      <returns>System.Int32.</returns>
    </member>
    <member name="T:Nez.PostProcessor`1">
      <summary>
   helper subclass for strongly typed Effects loaded from EffectResource. The effect will automatically be unloaded when the scene
   completes.
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="F:Nez.PostProcessor`1.Effect">
      <summary>
   The effect used to render the scene with
   </summary>
    </member>
    <member name="M:Nez.PostProcessor`1.#ctor(System.Int32,`0)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.PostProcessor`1" /> class.
   </summary>
      <param name="executionOrder">The execution order.</param>
      <param name="effect">The effect.</param>
    </member>
    <member name="M:Nez.PostProcessor`1.Process(RenderTarget2D,RenderTarget2D)">
      <summary>
   we have to override the default implementation here because we use a custom Effect subclass that differes from the effect
   field of the base class
   will be null.
   </summary>
      <param name="source">Source.</param>
      <param name="destination">Destination.</param>
    </member>
    <member name="M:Nez.PostProcessor`1.Unload">
      <summary>
   called when a scene is ended or this PostProcessor is removed. use this for cleanup.
   </summary>
    </member>
    <member name="T:Nez.ReflectionMaterial">
      <summary>
   used in conjunction with the ReflectionRenderer
   </summary>
    </member>
    <member name="F:Nez.ReflectionMaterial.RenderTexture">
      <summary>
   The render texture
   </summary>
    </member>
    <member name="M:Nez.ReflectionMaterial.#ctor(ReflectionRenderer)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.ReflectionMaterial" /> class.
   </summary>
      <param name="reflectionRenderer">The reflection renderer.</param>
    </member>
    <member name="M:Nez.ReflectionMaterial.OnPreRender(Camera)">
      <summary>
   called when the Material is initialy set right before Batcher.begin to allow any Effects that have parameters set if necessary
   based on the Camera Matrix such as to set the MatrixTransform via camera.viewProjectionMatrix mimicking what Batcher does. This will
   only be called if there is a non-null Effect.
   </summary>
      <param name="camera">Camera.</param>
    </member>
    <member name="T:Nez.ReflectionRenderer">
      <summary>
   assists in creating a mirror effect. To use the ReflectionRenderer do the following:
   - call createAndSetupScene being sure to pass in a renderOrder BEFORE the renderer that contains your reflective surface.
   - reflectableObjectRenderLayers should contain all the renderLayers that contain objects that you want reflected
   - create a ReflectionMaterial which you will use to render your reflective surfaces. Note that your reflective
   surfaces should NOT be rendered by the ReflectionRenderer! It needs to create a RenderTexture with just the objects to reflect.
   - you can optionally set a normal map on the ReflectionEffect for a refraction effect
   - move the ReflectionRenderer.camera around to get the desired offset for your reflections. You can also change the zoom of the Camera.
   </summary>
    </member>
    <member name="M:Nez.ReflectionRenderer.CreateAndSetupScene(Scene,System.Int32,System.Int32[])">
      <summary>
   Creates the and setup scene.
   </summary>
      <param name="scene">The scene.</param>
      <param name="renderOrder">The render order.</param>
      <param name="renderLayers">The render layers.</param>
      <returns>ReflectionRenderer.</returns>
    </member>
    <member name="M:Nez.ReflectionRenderer.OnSceneBackBufferSizeChanged(System.Int32,System.Int32)">
      <summary>
   called when the default scene RenderTarget is resized and when adding a Renderer if the scene has already began. default implementation
   calls through to RenderTexture.onSceneBackBufferSizeChanged
   so that it can size itself appropriately if necessary.
   </summary>
      <param name="newWidth">New width.</param>
      <param name="newHeight">New height.</param>
    </member>
    <member name="T:Nez.WaterReflectionMaterial">
      <summary>
   used by the WaterReflectionPlane
   </summary>
    </member>
    <member name="M:Nez.WaterReflectionMaterial.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.WaterReflectionMaterial" /> class.
   </summary>
    </member>
    <member name="M:Nez.WaterReflectionMaterial.OnPreRender(Camera)">
      <summary>
   called when the Material is initialy set right before Batcher.begin to allow any Effects that have parameters set if necessary
   based on the Camera Matrix such as to set the MatrixTransform via camera.viewProjectionMatrix mimicking what Batcher does. This will
   only be called if there is a non-null Effect.
   </summary>
      <param name="camera">Camera.</param>
    </member>
    <member name="T:Nez.DefaultRenderer">
      <summary>
   Class DefaultRenderer.
   Implements the <see cref="T:Nez.Renderer" /></summary>
      <seealso cref="T:Nez.Renderer" />
    </member>
    <member name="M:Nez.DefaultRenderer.#ctor(System.Int32,Camera)">
      <summary>
   renders all renderLayers
   </summary>
      <param name="renderOrder">Render order.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="M:Nez.DefaultRenderer.Render(Scene)">
      <summary>
   Renders the specified scene.
   </summary>
      <param name="scene">The scene.</param>
    </member>
    <member name="T:Nez.Renderer">
      <summary>
   Renderers are added to a Scene and handle all of the actual calls to RenderableComponent.render and Entity.debugRender.
   A simple Renderer could just start the Batcher.instanceGraphics.batcher or it could create its own local Batcher instance
   if it needs it for some kind of custom rendering.
   Note that it is a best practice to ensure all Renderers that render to a RenderTarget have lower renderOrders to avoid issues
   with clearing the back buffer (http://gamedev.stackexchange.com/questions/90396/monogame-setrendertarget-is-wiping-the-backbuffer).
   Giving them a negative renderOrder is a good strategy to deal with this.
   </summary>
    </member>
    <member name="F:Nez.Renderer.Material">
      <summary>
   Material used by the Batcher. Any RenderableComponent can override this.
   </summary>
    </member>
    <member name="F:Nez.Renderer.Camera">
      <summary>
   the Camera this renderer uses for rendering (really its transformMatrix and bounds for culling). This is a convenience field and isnt
   required. Renderer subclasses can pick the camera used when calling beginRender.
   </summary>
    </member>
    <member name="F:Nez.Renderer.RenderOrder">
      <summary>
   specifies the order in which the Renderers will be called by the scene
   </summary>
    </member>
    <member name="F:Nez.Renderer.RenderTexture">
      <summary>
   if renderTarget is not null this renderer will render into the RenderTarget instead of to the screen
   </summary>
    </member>
    <member name="F:Nez.Renderer.RenderTargetClearColor">
      <summary>
   if renderTarget is not null this Color will be used to clear the screen
   </summary>
    </member>
    <member name="F:Nez.Renderer.ShouldDebugRender">
      <summary>
   flag for this renderer that decides if it should debug render or not. The render method receives a bool (debugRenderEnabled)
   letting the renderer know if the global debug rendering is on/off. The renderer then uses the local bool to decide if it
   should debug render or not.
   </summary>
    </member>
    <member name="P:Nez.Renderer.WantsToRenderToSceneRenderTarget">
      <summary>
   if true, the Scene will call SetRenderTarget with the scene RenderTarget. The default implementaiton returns true if the Renderer
   has a renderTexture
   </summary>
      <value>
        <c>true</c> if wants to render to scene render target; otherwise, <c>false</c>.</value>
    </member>
    <member name="F:Nez.Renderer.WantsToRenderAfterPostProcessors">
      <summary>
   if true, the Scene will call the render method AFTER all PostProcessors have finished. This must be set to true BEFORE calling
   Scene.addRenderer to take effect and the Renderer should NOT have a renderTexture. The main reason for this type of Renderer
   is so that you can render your UI without post processing on top of the rest of your Scene. The ScreenSpaceRenderer is an
   example Renderer that sets this to true;
   </summary>
    </member>
    <member name="M:Nez.Renderer.OnAddedToScene(Scene)">
      <summary>
   called when the Renderer is added to the Scene
   </summary>
      <param name="scene">Scene.</param>
    </member>
    <member name="M:Nez.Renderer.Unload">
      <summary>
   called when a scene is ended or this Renderer is removed from the Scene. use this for cleanup.
   </summary>
    </member>
    <member name="M:Nez.Renderer.Render(Scene)">
      <summary>
   Renders the specified scene.
   </summary>
      <param name="scene">The scene.</param>
    </member>
    <member name="M:Nez.Renderer.OnSceneBackBufferSizeChanged(System.Int32,System.Int32)">
      <summary>
   called when the default scene RenderTarget is resized and when adding a Renderer if the scene has already began. default implementation
   calls through to RenderTexture.onSceneBackBufferSizeChanged
   so that it can size itself appropriately if necessary.
   </summary>
      <param name="newWidth">New width.</param>
      <param name="newHeight">New height.</param>
    </member>
    <member name="M:Nez.Renderer.CompareTo(Renderer)">
      <summary>
   Compares to.
   </summary>
      <param name="other">The other.</param>
      <returns>System.Int32.</returns>
    </member>
    <member name="T:Nez.RenderLayerExcludeRenderer">
      <summary>
   Renderer that only renders all but one renderLayer. Useful to keep UI rendering separate from the rest of the game when used in conjunction
   with a RenderLayerRenderer. Note that UI would most likely want to be rendered in screen space so the camera matrix shouldn't be passed to
   Batcher.Begin.
   </summary>
    </member>
    <member name="F:Nez.RenderLayerExcludeRenderer.ExcludedRenderLayers">
      <summary>
   The excluded render layers
   </summary>
    </member>
    <member name="M:Nez.RenderLayerExcludeRenderer.#ctor(System.Int32,System.Int32[])">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.RenderLayerExcludeRenderer" /> class.
   </summary>
      <param name="renderOrder">The render order.</param>
      <param name="excludedRenderLayers">The excluded render layers.</param>
    </member>
    <member name="M:Nez.RenderLayerExcludeRenderer.Render(Scene)">
      <summary>
   Renders the specified scene.
   </summary>
      <param name="scene">The scene.</param>
    </member>
    <member name="T:Nez.RenderLayerRenderer">
      <summary>
   Renderer that only renders the specified renderLayers. Useful to keep UI rendering separate from the rest of the game when used in conjunction
   with other RenderLayerRenderers rendering different renderLayers.
   </summary>
    </member>
    <member name="F:Nez.RenderLayerRenderer.RenderLayers">
      <summary>
   the renderLayers this Renderer will render
   </summary>
    </member>
    <member name="M:Nez.RenderLayerRenderer.#ctor(System.Int32,System.Int32[])">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.RenderLayerRenderer" /> class.
   </summary>
      <param name="renderOrder">The render order.</param>
      <param name="renderLayers">The render layers.</param>
    </member>
    <member name="M:Nez.RenderLayerRenderer.Render(Scene)">
      <summary>
   Renders the specified scene.
   </summary>
      <param name="scene">The scene.</param>
    </member>
    <member name="T:Nez.ScreenSpaceRenderer">
      <summary>
   Renderer that renders using its own Camera which doesnt move.
   </summary>
    </member>
    <member name="F:Nez.ScreenSpaceRenderer.RenderLayers">
      <summary>
   The render layers
   </summary>
    </member>
    <member name="M:Nez.ScreenSpaceRenderer.#ctor(System.Int32,System.Int32[])">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.ScreenSpaceRenderer" /> class.
   </summary>
      <param name="renderOrder">The render order.</param>
      <param name="renderLayers">The render layers.</param>
    </member>
    <member name="M:Nez.ScreenSpaceRenderer.Render(Scene)">
      <summary>
   Renders the specified scene.
   </summary>
      <param name="scene">The scene.</param>
    </member>
    <member name="M:Nez.ScreenSpaceRenderer.OnSceneBackBufferSizeChanged(System.Int32,System.Int32)">
      <summary>
   called when the default scene RenderTarget is resized and when adding a Renderer if the scene has already began. default implementation
   calls through to RenderTexture.onSceneBackBufferSizeChanged
   so that it can size itself appropriately if necessary.
   </summary>
      <param name="newWidth">New width.</param>
      <param name="newHeight">New height.</param>
    </member>
    <member name="T:Nez.StencilLightRenderer">
      <summary>
   StencilLightRenderer is used for 2d lights and shadows. This works by taking each light and doing the following:
   - clear the stencil buffer
   - project from the light position to create the shadow projection of the light
   - render the shadow project only to the stencil buffer writing a 1 for each touched pixel
   - render the lights additively only where the stencil is 0 (where the shadow projection did not hit)
   Setup:
   - add the StencilLightRenderer and have it render before other renderers
   - add all your StencilLights or textured lights to the StencilLightRenderer RenderLayer
   - you will then have access to StencilLightRenderer.RenderTexture which will contain your lightmap. You can then render it whenever you want
   either via a normal SpriteRenderer with multiplicative blending or via a PostProcessor
   </summary>
    </member>
    <member name="F:Nez.StencilLightRenderer.RenderLayer">
      <summary>
   the layer we will use for our lights
   </summary>
    </member>
    <member name="F:Nez.StencilLightRenderer.CollidesWithLayers">
      <summary>
   layer mask of all the layers this light should interact with. defaults to all layers.
   </summary>
    </member>
    <member name="M:Nez.StencilLightRenderer.#ctor(System.Int32,System.Int32,RenderTexture)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.StencilLightRenderer" /> class.
   </summary>
      <param name="renderOrder">The render order.</param>
      <param name="renderLayer">The render layer.</param>
      <param name="renderTexture">The render texture.</param>
    </member>
    <member name="M:Nez.StencilLightRenderer.Render(Scene)">
      <summary>
   Renders the specified scene.
   </summary>
      <param name="scene">The scene.</param>
    </member>
    <member name="T:Nez.Svg.FauxGraphicsPath">
      <summary>
   THIS IS A HORRIBLE ABOMINATION! PCLs dont have access to System.Drawing so this class is a wrapper for accessing the GraphicsPath class.
   It has the full public API that Nez needs for SVG files but the whole mess is all accessed via reflection. It is slow as all hell and not
   recommended for production use. It's only purpose is so that Nez works with SVG files out of the box to get up and running fast.
   </summary>
    </member>
    <member name="P:Nez.Svg.FauxGraphicsPath.PointCount">
      <summary>
   Gets the point count.
   </summary>
      <value>The point count.</value>
    </member>
    <member name="P:Nez.Svg.FauxGraphicsPath.PathPoints">
      <summary>
   Gets the path points.
   </summary>
      <value>The path points.</value>
    </member>
    <member name="P:Nez.Svg.FauxGraphicsPath.PathTypes">
      <summary>
   Gets the path types.
   </summary>
      <value>The path types.</value>
    </member>
    <member name="M:Nez.Svg.FauxGraphicsPath.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Svg.FauxGraphicsPath" /> class.
   </summary>
    </member>
    <member name="M:Nez.Svg.FauxGraphicsPath.StartFigure">
      <summary>
   Starts the figure.
   </summary>
    </member>
    <member name="M:Nez.Svg.FauxGraphicsPath.CloseFigure">
      <summary>
   Closes the figure.
   </summary>
    </member>
    <member name="M:Nez.Svg.FauxGraphicsPath.AddBezier(System.Object,System.Object,System.Object,System.Object)">
      <summary>
   Adds the bezier.
   </summary>
      <param name="first">The first.</param>
      <param name="second">The second.</param>
      <param name="third">The third.</param>
      <param name="fourth">The fourth.</param>
    </member>
    <member name="M:Nez.Svg.FauxGraphicsPath.AddLine(System.Object,System.Object)">
      <summary>
   Adds the line.
   </summary>
      <param name="first">The first.</param>
      <param name="second">The second.</param>
    </member>
    <member name="M:Nez.Svg.FauxGraphicsPath.Flatten(System.Object,System.Single)">
      <summary>
   Flattens the specified matrix.
   </summary>
      <param name="matrix">The matrix.</param>
      <param name="flatness">The flatness.</param>
    </member>
    <member name="M:Nez.Svg.FauxGraphicsPath.PathPointsAsVectors">
      <summary>
   Pathes the points as vectors.
   </summary>
      <returns>Vector2[].</returns>
    </member>
    <member name="T:Nez.Svg.ISvgPathBuilder">
      <summary>
   dummy interface used by SvgPath.getTransformedDrawingPoints to workaround PCL not having System.Drawing
   </summary>
    </member>
    <member name="M:Nez.Svg.ISvgPathBuilder.GetDrawingPoints(List{SvgPathSegment},System.Single)">
      <summary>
   Gets the drawing points.
   </summary>
      <param name="segments">The segments.</param>
      <param name="flatness">The flatness.</param>
      <returns>Vector2[].</returns>
    </member>
    <member name="T:Nez.Svg.SvgPath">
      <summary>
   representation of a path element. Note that the best way to get points from the path is to use the getTransformedPoints method. It uses
   System.Drawing to generate the path points from any type of path. The getOptimized*DrawingPoints methods only work for cubic bezier
   curves.
   SvgPath can be instantiated directly. You can then just set the 'd' property to have the path parsed.
   </summary>
    </member>
    <member name="P:Nez.Svg.SvgPath.D">
      <summary>
   Gets or sets the d.
   </summary>
      <value>The d.</value>
    </member>
    <member name="F:Nez.Svg.SvgPath.Segments">
      <summary>
   The segments
   </summary>
    </member>
    <member name="M:Nez.Svg.SvgPath.GetTransformedDrawingPoints(ISvgPathBuilder,System.Single)">
      <summary>
   gets the points that make up the path with any transforms present applied. The points can be used to approximate the path by
   drawing lines between them.
   Important notes: ISvgPathBuilder is a faux interface that is required because PCLs cannot access System.Drawing which is used
   to get the drawing points. In order to use this method you need to put the SvgPathBuilder in your main project and then pass in
   an SvgPathBuilder object to this method.
   </summary>
      <param name="pathBuilder">Path builder.</param>
      <param name="flatness">Flatness.</param>
      <returns>The transformed drawing points.</returns>
    </member>
    <member name="M:Nez.Svg.SvgPath.IsPathCubicBezier">
      <summary>
   returns true if all the segments are cubic curves
   </summary>
      <returns>
        <c>true</c>, if path bezier was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Svg.SvgPath.GetBezierSplineForPath">
      <summary>
   gets a BezierSpline for the SvgPath
   </summary>
      <returns>The bezier spline for path.</returns>
    </member>
    <member name="M:Nez.Svg.SvgPath.GetOptimizedDrawingPoints(System.Single)">
      <summary>
   gets optimized drawing points with extra points in curves and less in straight lines. Returns a pooled list that should be returned to the ListPool when done.
   </summary>
      <param name="distanceTolerance">Distance tolerance.</param>
      <returns>The optimized drawing points.</returns>
    </member>
    <member name="M:Nez.Svg.SvgPath.GetOptimizedTransformedDrawingPoints(System.Single)">
      <summary>
   gets optimized drawing points with extra points in curves and less in straight lines with any transforms present applied
   </summary>
      <param name="distanceTolerance">Distance tolerance.</param>
      <returns>The optimized drawing points.</returns>
    </member>
    <member name="T:Nez.Svg.SvgPathParser">
      <summary>
   Class SvgPathParser.
   </summary>
    </member>
    <member name="M:Nez.Svg.SvgPathParser.Parse(System.String)">
      <summary>
   parses the 'd' element of an SVG file and returns the command series
   </summary>
      <param name="path">Path.</param>
      <returns>List&lt;SvgPathSegment&gt;.</returns>
    </member>
    <member name="T:Nez.Svg.SvgPathSegment">
      <summary>
   base class for all of the different SVG path types. Note that arcs are not supported at this time.
   </summary>
    </member>
    <member name="T:Nez.Svg.SvgMoveToSegment">
      <summary>
   Class SvgMoveToSegment. This class cannot be inherited.
   Implements the <see cref="T:Nez.Svg.SvgPathSegment" /></summary>
      <seealso cref="T:Nez.Svg.SvgPathSegment" />
    </member>
    <member name="T:Nez.Svg.SvgLineSegment">
      <summary>
   Class SvgLineSegment. This class cannot be inherited.
   Implements the <see cref="T:Nez.Svg.SvgPathSegment" /></summary>
      <seealso cref="T:Nez.Svg.SvgPathSegment" />
    </member>
    <member name="T:Nez.Svg.SvgClosePathSegment">
      <summary>
   Class SvgClosePathSegment. This class cannot be inherited.
   Implements the <see cref="T:Nez.Svg.SvgPathSegment" /></summary>
      <seealso cref="T:Nez.Svg.SvgPathSegment" />
    </member>
    <member name="T:Nez.Svg.SvgQuadraticCurveSegment">
      <summary>
   Class SvgQuadraticCurveSegment. This class cannot be inherited.
   Implements the <see cref="T:Nez.Svg.SvgPathSegment" /></summary>
      <seealso cref="T:Nez.Svg.SvgPathSegment" />
    </member>
    <member name="T:Nez.Svg.SvgCubicCurveSegment">
      <summary>
   Class SvgCubicCurveSegment. This class cannot be inherited.
   Implements the <see cref="T:Nez.Svg.SvgPathSegment" /></summary>
      <seealso cref="T:Nez.Svg.SvgPathSegment" />
    </member>
    <member name="F:Nez.Svg.SvgPathSegment.Start">
      <summary>
   The start
   </summary>
    </member>
    <member name="M:Nez.Svg.SvgMoveToSegment.#ctor(Vector2)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Svg.SvgMoveToSegment" /> class.
   </summary>
      <param name="position">The position.</param>
    </member>
    <member name="M:Nez.Svg.SvgMoveToSegment.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="M:Nez.Svg.SvgLineSegment.#ctor(Vector2,Vector2)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Svg.SvgLineSegment" /> class.
   </summary>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
    </member>
    <member name="M:Nez.Svg.SvgLineSegment.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="M:Nez.Svg.SvgClosePathSegment.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="F:Nez.Svg.SvgQuadraticCurveSegment.ControlPoint">
      <summary>
   The control point
   </summary>
    </member>
    <member name="P:Nez.Svg.SvgQuadraticCurveSegment.FirstCtrlPoint">
      <summary>
   Gets the first control point.
   </summary>
      <value>The first control point.</value>
    </member>
    <member name="P:Nez.Svg.SvgQuadraticCurveSegment.SecondCtrlPoint">
      <summary>
   Gets the second control point.
   </summary>
      <value>The second control point.</value>
    </member>
    <member name="M:Nez.Svg.SvgQuadraticCurveSegment.#ctor(Vector2,Vector2,Vector2)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Svg.SvgQuadraticCurveSegment" /> class.
   </summary>
      <param name="start">The start.</param>
      <param name="controlPoint">The control point.</param>
      <param name="end">The end.</param>
    </member>
    <member name="M:Nez.Svg.SvgQuadraticCurveSegment.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="F:Nez.Svg.SvgCubicCurveSegment.FirstCtrlPoint">
      <summary>
   The first control point
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgCubicCurveSegment.SecondCtrlPoint">
      <summary>
   The second control point
   </summary>
    </member>
    <member name="M:Nez.Svg.SvgCubicCurveSegment.#ctor(Vector2,Vector2,Vector2,Vector2)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Svg.SvgCubicCurveSegment" /> class.
   </summary>
      <param name="start">The start.</param>
      <param name="firstCtrlPoint">The first control point.</param>
      <param name="secondCtrlPoint">The second control point.</param>
      <param name="end">The end.</param>
    </member>
    <member name="M:Nez.Svg.SvgCubicCurveSegment.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.Svg.SvgReflectionPathBuilder">
      <summary>
   helper class used to parse paths and also fetch the drawing points from a series of SvgPathSegments. This is an insanely slow way
   to build paths since it is stuck using reflection for everything. It is highly recommended that you use the SvgPathBuilder class
   instead, which must be manually placed in your project.
   </summary>
    </member>
    <member name="M:Nez.Svg.SvgReflectionPathBuilder.GetDrawingPoints(List{SvgPathSegment},System.Single)">
      <summary>
   takes in a parsed path and returns a list of points that can be used to draw the path
   </summary>
      <param name="segments">Segments.</param>
      <param name="flatness">The flatness.</param>
      <returns>The drawing points.</returns>
    </member>
    <member name="T:Nez.Svg.SvgCircle">
      <summary>
   Class SvgCircle.
   Implements the <see cref="T:Nez.Svg.SvgElement" /></summary>
      <seealso cref="T:Nez.Svg.SvgElement" />
    </member>
    <member name="F:Nez.Svg.SvgCircle.Radius">
      <summary>
   The radius
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgCircle.CenterY">
      <summary>
   The center y
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgCircle.CenterX">
      <summary>
   The center x
   </summary>
    </member>
    <member name="T:Nez.Svg.SvgEllipse">
      <summary>
   Class SvgEllipse.
   Implements the <see cref="T:Nez.Svg.SvgElement" /></summary>
      <seealso cref="T:Nez.Svg.SvgElement" />
    </member>
    <member name="F:Nez.Svg.SvgEllipse.RadiusX">
      <summary>
   The radius x
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgEllipse.RadiusY">
      <summary>
   The radius y
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgEllipse.CenterY">
      <summary>
   The center y
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgEllipse.CenterX">
      <summary>
   The center x
   </summary>
    </member>
    <member name="T:Nez.Svg.SvgImage">
      <summary>
   represents the image tag in an SVG document. This class will do its best to load the image from the href attribute. It will check for
   embedded images, web-based images and then fall back to using the href to load from a ContentManager.
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgImage.X">
      <summary>
   The x
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgImage.Y">
      <summary>
   The y
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgImage.Width">
      <summary>
   The width
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgImage.Height">
      <summary>
   The height
   </summary>
    </member>
    <member name="P:Nez.Svg.SvgImage.Rect">
      <summary>
   the rect encompassing this image. Note that the rect is with no transforms applied.
   </summary>
      <value>The rect.</value>
    </member>
    <member name="F:Nez.Svg.SvgImage.Href">
      <summary>
   The href
   </summary>
    </member>
    <member name="M:Nez.Svg.SvgImage.GetTexture(NezContentManager)">
      <summary>
   attempts to get a texture for the image
   - first it will check the href for a png file name. If it finds one it will load it with the ContentManager passed in
   - next it will see if the href is a url and if so it will load it
   - next it checks for an embedded, base64 image. It will load that if it finds one
   </summary>
      <param name="content">Content.</param>
      <returns>The texture.</returns>
      <exception cref="T:System.Exception">Found a texture in an SVG file but the USE_HTTPCLIENT build define is not set and/or HTTP Client is not referenced</exception>
    </member>
    <member name="T:Nez.Svg.SvgLine">
      <summary>
   Class SvgLine.
   Implements the <see cref="T:Nez.Svg.SvgElement" /></summary>
      <seealso cref="T:Nez.Svg.SvgElement" />
    </member>
    <member name="F:Nez.Svg.SvgLine.X1">
      <summary>
   The x1
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgLine.Y1">
      <summary>
   The y1
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgLine.X2">
      <summary>
   The x2
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgLine.Y2">
      <summary>
   The y2
   </summary>
    </member>
    <member name="P:Nez.Svg.SvgLine.Start">
      <summary>
   Gets the start.
   </summary>
      <value>The start.</value>
    </member>
    <member name="P:Nez.Svg.SvgLine.End">
      <summary>
   Gets the end.
   </summary>
      <value>The end.</value>
    </member>
    <member name="M:Nez.Svg.SvgLine.GetTransformedPoints">
      <summary>
   Gets the transformed points.
   </summary>
      <returns>Vector2[].</returns>
    </member>
    <member name="T:Nez.Svg.SvgPolygon">
      <summary>
   Class SvgPolygon.
   Implements the <see cref="T:Nez.Svg.SvgElement" /></summary>
      <seealso cref="T:Nez.Svg.SvgElement" />
    </member>
    <member name="F:Nez.Svg.SvgPolygon.CenterX">
      <summary>
   The center x
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgPolygon.CenterY">
      <summary>
   The center y
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgPolygon.Sides">
      <summary>
   The sides
   </summary>
    </member>
    <member name="P:Nez.Svg.SvgPolygon.PointsAttribute">
      <summary>
   Gets or sets the points attribute.
   </summary>
      <value>The points attribute.</value>
    </member>
    <member name="F:Nez.Svg.SvgPolygon.Points">
      <summary>
   The points
   </summary>
    </member>
    <member name="M:Nez.Svg.SvgPolygon.GetTransformedPoints">
      <summary>
   Gets the transformed points.
   </summary>
      <returns>Vector2[].</returns>
    </member>
    <member name="M:Nez.Svg.SvgPolygon.GetRelativePoints">
      <summary>
   gets the points relative to the center. SVG by default uses absolute positions for points.
   </summary>
      <returns>The relative points.</returns>
    </member>
    <member name="T:Nez.Svg.SvgPolyline">
      <summary>
   Class SvgPolyline.
   Implements the <see cref="T:Nez.Svg.SvgElement" /></summary>
      <seealso cref="T:Nez.Svg.SvgElement" />
    </member>
    <member name="P:Nez.Svg.SvgPolyline.PointsAttribute">
      <summary>
   Gets or sets the points attribute.
   </summary>
      <value>The points attribute.</value>
    </member>
    <member name="F:Nez.Svg.SvgPolyline.Points">
      <summary>
   The points
   </summary>
    </member>
    <member name="M:Nez.Svg.SvgPolyline.GetTransformedPoints">
      <summary>
   Gets the transformed points.
   </summary>
      <returns>Vector2[].</returns>
    </member>
    <member name="T:Nez.Svg.SvgRectangle">
      <summary>
   Class SvgRectangle.
   Implements the <see cref="T:Nez.Svg.SvgElement" /></summary>
      <seealso cref="T:Nez.Svg.SvgElement" />
    </member>
    <member name="F:Nez.Svg.SvgRectangle.X">
      <summary>
   The x
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgRectangle.Y">
      <summary>
   The y
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgRectangle.Width">
      <summary>
   The width
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgRectangle.Height">
      <summary>
   The height
   </summary>
    </member>
    <member name="P:Nez.Svg.SvgRectangle.Center">
      <summary>
   Gets the center.
   </summary>
      <value>The center.</value>
    </member>
    <member name="M:Nez.Svg.SvgRectangle.GetTransformedPoints">
      <summary>
   gets the points for the rectangle with all transforms applied
   </summary>
      <returns>The transformed points.</returns>
    </member>
    <member name="T:Nez.Svg.SvgMatrix">
      <summary>
   Class SvgMatrix.
   Implements the <see cref="T:Nez.Svg.SvgTransform" /></summary>
      <seealso cref="T:Nez.Svg.SvgTransform" />
    </member>
    <member name="M:Nez.Svg.SvgMatrix.#ctor(List{System.Single})">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Svg.SvgMatrix" /> class.
   </summary>
      <param name="points">The points.</param>
    </member>
    <member name="M:Nez.Svg.SvgMatrix.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.Svg.SvgRotate">
      <summary>
   Class SvgRotate.
   Implements the <see cref="T:Nez.Svg.SvgTransform" /></summary>
      <seealso cref="T:Nez.Svg.SvgTransform" />
    </member>
    <member name="F:Nez.Svg.SvgRotate.Angle">
      <summary>
   The angle
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgRotate.CenterX">
      <summary>
   The center x
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgRotate.CenterY">
      <summary>
   The center y
   </summary>
    </member>
    <member name="M:Nez.Svg.SvgRotate.#ctor(System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Svg.SvgRotate" /> class.
   </summary>
      <param name="angle">The angle.</param>
    </member>
    <member name="M:Nez.Svg.SvgRotate.#ctor(System.Single,System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Svg.SvgRotate" /> class.
   </summary>
      <param name="angle">The angle.</param>
      <param name="centerX">The center x.</param>
      <param name="centerY">The center y.</param>
    </member>
    <member name="M:Nez.Svg.SvgRotate.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.Svg.SvgScale">
      <summary>
   Class SvgScale.
   Implements the <see cref="T:Nez.Svg.SvgTransform" /></summary>
      <seealso cref="T:Nez.Svg.SvgTransform" />
    </member>
    <member name="M:Nez.Svg.SvgScale.#ctor(System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Svg.SvgScale" /> class.
   </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
    </member>
    <member name="M:Nez.Svg.SvgScale.#ctor(System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Svg.SvgScale" /> class.
   </summary>
      <param name="x">The x.</param>
    </member>
    <member name="M:Nez.Svg.SvgScale.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.Svg.SvgShear">
      <summary>
   Class SvgShear.
   Implements the <see cref="T:Nez.Svg.SvgTransform" /></summary>
      <seealso cref="T:Nez.Svg.SvgTransform" />
    </member>
    <member name="M:Nez.Svg.SvgShear.#ctor(System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Svg.SvgShear" /> class.
   </summary>
      <param name="shearX">The shear x.</param>
      <param name="shearY">The shear y.</param>
    </member>
    <member name="M:Nez.Svg.SvgShear.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.Svg.SvgSkew">
      <summary>
   Class SvgSkew.
   Implements the <see cref="T:Nez.Svg.SvgTransform" /></summary>
      <seealso cref="T:Nez.Svg.SvgTransform" />
    </member>
    <member name="M:Nez.Svg.SvgSkew.#ctor(System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Svg.SvgSkew" /> class.
   </summary>
      <param name="angleX">The angle x.</param>
      <param name="angleY">The angle y.</param>
    </member>
    <member name="M:Nez.Svg.SvgSkew.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.Svg.SvgTransform">
      <summary>
   Class SvgTransform.
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgTransform.Matrix">
      <summary>
   The matrix
   </summary>
    </member>
    <member name="T:Nez.Svg.SvgTransformConverter">
      <summary>
   helpers for converting the transform string into SvgTransform objects
   </summary>
    </member>
    <member name="M:Nez.Svg.SvgTransformConverter.ParseTransforms(System.String)">
      <summary>
   Parses the transforms.
   </summary>
      <param name="transforms">The transforms.</param>
      <returns>List&lt;SvgTransform&gt;.</returns>
      <exception cref="T:System.FormatException">Translate transforms must be in the format 'translate(x [,y])'</exception>
      <exception cref="T:System.FormatException">Rotate transforms must be in the format 'rotate(angle [cx cy ])'</exception>
      <exception cref="T:System.FormatException">Scale transforms must be in the format 'scale(x [,y])'</exception>
      <exception cref="T:System.FormatException">Matrix transforms must be in the format 'matrix(m11, m12, m21, m22, dx, dy)'</exception>
      <exception cref="T:System.FormatException">Shear transforms must be in the format 'shear(x [,y])'</exception>
    </member>
    <member name="T:Nez.Svg.SvgTranslate">
      <summary>
   Class SvgTranslate.
   Implements the <see cref="T:Nez.Svg.SvgTransform" /></summary>
      <seealso cref="T:Nez.Svg.SvgTransform" />
    </member>
    <member name="M:Nez.Svg.SvgTranslate.#ctor(System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Svg.SvgTranslate" /> class.
   </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
    </member>
    <member name="M:Nez.Svg.SvgTranslate.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.Svg.SvgDebugComponent">
      <summary>
   assists in debugging the data from an SVG file. All the supported shapes will be displayed.
   </summary>
    </member>
    <member name="P:Nez.Svg.SvgDebugComponent.Bounds">
      <summary>
   the AABB that wraps this object. Used for camera culling.
   </summary>
      <value>The bounds.</value>
    </member>
    <member name="F:Nez.Svg.SvgDebugComponent.SvgDoc">
      <summary>
   The SVG document
   </summary>
    </member>
    <member name="M:Nez.Svg.SvgDebugComponent.#ctor(System.String,ISvgPathBuilder)">
      <summary>
   beware! If pathBuilder is null the SvgReflectionPathBuilder will be used and it is slow as dirt.
   </summary>
      <param name="pathToSvgFile">Path to svg file relative to the Content folder</param>
      <param name="pathBuilder">Path builder.</param>
    </member>
    <member name="M:Nez.Svg.SvgDebugComponent.Render(Batcher,Camera)">
      <summary>
   called by a Renderer. The Camera can be used for culling and the Batcher instance to draw with.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="camera">Camera.</param>
    </member>
    <member name="T:Nez.Svg.SvgDocument">
      <summary>
   handles parsing out groups, paths, rects, lines, circles, ellipses, polygons, polylines and images. This is just a small subset of the SVG
   spec! Only the basics are parsed out since this is not designed to be an image viewer.
   </summary>
    </member>
    <member name="P:Nez.Svg.SvgDocument.WidthAttribute">
      <summary>
   Gets or sets the width attribute.
   </summary>
      <value>The width attribute.</value>
    </member>
    <member name="F:Nez.Svg.SvgDocument.Width">
      <summary>
   The width
   </summary>
    </member>
    <member name="P:Nez.Svg.SvgDocument.HeightAttribute">
      <summary>
   Gets or sets the height attribute.
   </summary>
      <value>The height attribute.</value>
    </member>
    <member name="F:Nez.Svg.SvgDocument.Height">
      <summary>
   The height
   </summary>
    </member>
    <member name="M:Nez.Svg.SvgDocument.Open(Stream)">
      <summary>
   Opens the specified stream.
   </summary>
      <param name="stream">The stream.</param>
      <returns>SvgDocument.</returns>
    </member>
    <member name="T:Nez.Svg.SvgElement">
      <summary>
   base class for all SVG elements. Has some helpers for parsing colors and dealing with transforms.
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgElement.Id">
      <summary>
   The identifier
   </summary>
    </member>
    <member name="P:Nez.Svg.SvgElement.StrokeAttribute">
      <summary>
   Gets or sets the stroke attribute.
   </summary>
      <value>The stroke attribute.</value>
    </member>
    <member name="F:Nez.Svg.SvgElement.StrokeColor">
      <summary>
   The stroke color
   </summary>
    </member>
    <member name="P:Nez.Svg.SvgElement.FillAttribute">
      <summary>
   Gets or sets the fill attribute.
   </summary>
      <value>The fill attribute.</value>
    </member>
    <member name="F:Nez.Svg.SvgElement.FillColor">
      <summary>
   The fill color
   </summary>
    </member>
    <member name="P:Nez.Svg.SvgElement.StrokeWidthAttribute">
      <summary>
   Gets or sets the stroke width attribute.
   </summary>
      <value>The stroke width attribute.</value>
    </member>
    <member name="F:Nez.Svg.SvgElement.StrokeWidth">
      <summary>
   The stroke width
   </summary>
    </member>
    <member name="P:Nez.Svg.SvgElement.TransformAttribute">
      <summary>
   Gets or sets the transform attribute.
   </summary>
      <value>The transform attribute.</value>
    </member>
    <member name="M:Nez.Svg.SvgElement.GetCombinedMatrix">
      <summary>
   Gets the combined matrix.
   </summary>
      <returns>Matrix2D.</returns>
    </member>
    <member name="P:Nez.Svg.SvgElement.RotationDegrees">
      <summary>
   helper property that just loops through all the transforms and if there is an SvgRotate transform it will return that angle
   </summary>
      <value>The rotation degrees.</value>
    </member>
    <member name="T:Nez.Svg.SvgGroup">
      <summary>
   container in SVG. The 'g' XML tag.
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgGroup.Title">
      <summary>
   The title
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgGroup.Groups">
      <summary>
   The groups
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgGroup.Paths">
      <summary>
   The paths
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgGroup.Rectangles">
      <summary>
   The rectangles
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgGroup.Lines">
      <summary>
   The lines
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgGroup.Circles">
      <summary>
   The circles
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgGroup.Ellipses">
      <summary>
   The ellipses
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgGroup.Polygons">
      <summary>
   The polygons
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgGroup.Polylines">
      <summary>
   The polylines
   </summary>
    </member>
    <member name="F:Nez.Svg.SvgGroup.Images">
      <summary>
   The images
   </summary>
    </member>
    <member name="T:Nez.Textures.GaussianBlur">
      <summary>
   Class GaussianBlur.
   </summary>
    </member>
    <member name="M:Nez.Textures.GaussianBlur.CreateBlurredTexture(Texture2D,System.Double)">
      <summary>
   creates a new texture that is a gaussian blurred version of the original
   </summary>
      <param name="image">Image.</param>
      <param name="deviation">Deviation.</param>
      <returns>The blurred texture.</returns>
    </member>
    <member name="M:Nez.Textures.GaussianBlur.CreateBlurredTexture(Color[],System.Int32,System.Int32,System.Double)">
      <summary>
   Creates the blurred texture.
   </summary>
      <param name="srcData">The source data.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="deviation">The deviation.</param>
      <returns>Color[].</returns>
    </member>
    <member name="M:Nez.Textures.GaussianBlur.CreateBlurredGrayscaleTexture(Texture2D,System.Double)">
      <summary>
   creates a new texture that is a gaussian blurred version of the original in grayscale
   </summary>
      <param name="image">Image.</param>
      <param name="deviation">Deviation.</param>
      <returns>The blurred texture.</returns>
    </member>
    <member name="M:Nez.Textures.GaussianBlur.CreateBlurredGrayscaleTexture(Color[],System.Int32,System.Int32,System.Double)">
      <summary>
   Creates the blurred grayscale texture.
   </summary>
      <param name="srcData">The source data.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="deviation">The deviation.</param>
      <returns>Color[].</returns>
    </member>
    <member name="T:Nez.Textures.NinePatchSprite">
      <summary>
   Class NinePatchSprite.
   Implements the <see cref="T:Nez.Textures.Sprite" /></summary>
      <seealso cref="T:Nez.Textures.Sprite" />
    </member>
    <member name="F:Nez.Textures.NinePatchSprite.Left">
      <summary>
   The left
   </summary>
    </member>
    <member name="F:Nez.Textures.NinePatchSprite.Right">
      <summary>
   The right
   </summary>
    </member>
    <member name="F:Nez.Textures.NinePatchSprite.Top">
      <summary>
   The top
   </summary>
    </member>
    <member name="F:Nez.Textures.NinePatchSprite.Bottom">
      <summary>
   The bottom
   </summary>
    </member>
    <member name="F:Nez.Textures.NinePatchSprite.NinePatchRects">
      <summary>
   The nine patch rects
   </summary>
    </member>
    <member name="F:Nez.Textures.NinePatchSprite.HasPadding">
      <summary>
   used to indicate if this nine patch has additional padding information
   </summary>
    </member>
    <member name="F:Nez.Textures.NinePatchSprite.PadLeft">
      <summary>
   The pad left
   </summary>
    </member>
    <member name="F:Nez.Textures.NinePatchSprite.PadRight">
      <summary>
   The pad right
   </summary>
    </member>
    <member name="F:Nez.Textures.NinePatchSprite.PadTop">
      <summary>
   The pad top
   </summary>
    </member>
    <member name="F:Nez.Textures.NinePatchSprite.PadBottom">
      <summary>
   The pad bottom
   </summary>
    </member>
    <member name="M:Nez.Textures.NinePatchSprite.#ctor(Texture2D,Rectangle,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Textures.NinePatchSprite" /> class.
   </summary>
      <param name="texture">The texture.</param>
      <param name="sourceRect">The source rect.</param>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <param name="top">The top.</param>
      <param name="bottom">The bottom.</param>
    </member>
    <member name="M:Nez.Textures.NinePatchSprite.#ctor(Texture2D,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Textures.NinePatchSprite" /> class.
   </summary>
      <param name="texture">The texture.</param>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <param name="top">The top.</param>
      <param name="bottom">The bottom.</param>
    </member>
    <member name="M:Nez.Textures.NinePatchSprite.#ctor(Sprite,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Textures.NinePatchSprite" /> class.
   </summary>
      <param name="sprite">The sprite.</param>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <param name="top">The top.</param>
      <param name="bottom">The bottom.</param>
    </member>
    <member name="T:Nez.Textures.RenderTarget">
      <summary>
   Class RenderTarget.
   Implements the <see cref="T:Nez.GlobalManager" /></summary>
      <seealso cref="T:Nez.GlobalManager" />
    </member>
    <member name="M:Nez.Textures.RenderTarget.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Textures.RenderTarget" /> class.
   </summary>
    </member>
    <member name="M:Nez.Textures.RenderTarget.GetTemporary(System.Int32,System.Int32)">
      <summary>
   gets a temporary RenderTarget2D from the pool. When done using it call releaseTemporary to put it back in the pool. Note that the
   contents of the RenderTarget2D could be anything at all so clear it if you need to before using it.
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <returns>The temporary.</returns>
    </member>
    <member name="M:Nez.Textures.RenderTarget.GetTemporary(System.Int32,System.Int32,DepthFormat)">
      <summary>
   gets a temporary RenderTarget2D from the pool. When done using it call releaseTemporary to put it back in the pool. Note that the
   contents of the RenderTarget2D could be anything at all so clear it if you need to before using it.
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <param name="depthFormat">Depth format.</param>
      <returns>The temporary.</returns>
    </member>
    <member name="M:Nez.Textures.RenderTarget.ReleaseTemporary(RenderTarget2D)">
      <summary>
   puts a temporary RenderTarget2D back in the pool. Do not attempt to put RenderTarget2Ds in the pool that were not acquired via getTemporary.
   </summary>
      <param name="renderTarget">Render target.</param>
    </member>
    <member name="M:Nez.Textures.RenderTarget.Create">
      <summary>
   helper for creating a full screen RenderTarget2D
   </summary>
      <returns>RenderTarget2D.</returns>
    </member>
    <member name="M:Nez.Textures.RenderTarget.Create(DepthFormat)">
      <summary>
   helper for creating a full screen RenderTarget2D with a specific DepthFormat
   </summary>
      <param name="preferredDepthFormat">Preferred depth format.</param>
      <returns>RenderTarget2D.</returns>
    </member>
    <member name="M:Nez.Textures.RenderTarget.Create(System.Int32,System.Int32)">
      <summary>
   helper for creating a RenderTarget2D
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <returns>RenderTarget2D.</returns>
    </member>
    <member name="M:Nez.Textures.RenderTarget.Create(System.Int32,System.Int32,DepthFormat)">
      <summary>
   helper for creating a RenderTarget2D
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <param name="preferredDepthFormat">Preferred depth format.</param>
      <returns>RenderTarget2D.</returns>
    </member>
    <member name="M:Nez.Textures.RenderTarget.Create(System.Int32,System.Int32,SurfaceFormat,DepthFormat)">
      <summary>
   helper for creating a RenderTarget2D
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <param name="preferredFormat">Preferred format.</param>
      <param name="preferredDepthFormat">Preferred depth format.</param>
      <returns>RenderTarget2D.</returns>
    </member>
    <member name="M:Nez.Textures.RenderTarget.Update">
      <summary>
   called each frame before Scene.update
   </summary>
    </member>
    <member name="T:Nez.Textures.RenderTexture">
      <summary>
   wrapper for a RenderTarget2D that optionally takes care of resizing itself automatcially when the screen size changes
   </summary>
    </member>
    <member name="T:Nez.Textures.RenderTexture.RenderTextureResizeBehavior">
      <summary>
   handles what should happen when onSceneBackBufferSizeChanged. Defaults to SizeToSceneRenderTarget
   </summary>
    </member>
    <member name="F:Nez.Textures.RenderTexture.RenderTextureResizeBehavior.None">
      <summary>
   The none
   </summary>
    </member>
    <member name="F:Nez.Textures.RenderTexture.RenderTextureResizeBehavior.SizeToSceneRenderTarget">
      <summary>
   The size to scene render target
   </summary>
    </member>
    <member name="F:Nez.Textures.RenderTexture.RenderTextureResizeBehavior.SizeToScreen">
      <summary>
   The size to screen
   </summary>
    </member>
    <member name="F:Nez.Textures.RenderTexture.RenderTarget">
      <summary>
   the RenderTarget2D this RenderTexture manages
   </summary>
    </member>
    <member name="F:Nez.Textures.RenderTexture.ResizeBehavior">
      <summary>
   resize behavior that should occur when onSceneBackBufferSizeChanged is called
   </summary>
    </member>
    <member name="M:Nez.Textures.RenderTexture.#ctor">
      <summary>
   helper for creating a full screen RenderTarget2D
   </summary>
    </member>
    <member name="M:Nez.Textures.RenderTexture.#ctor(DepthFormat)">
      <summary>
   helper for creating a full screen RenderTarget2D with a specific DepthFormat
   </summary>
      <param name="preferredDepthFormat">Preferred depth format.</param>
    </member>
    <member name="M:Nez.Textures.RenderTexture.#ctor(System.Int32,System.Int32)">
      <summary>
   helper for creating a RenderTarget2D
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
    </member>
    <member name="M:Nez.Textures.RenderTexture.#ctor(System.Int32,System.Int32,DepthFormat)">
      <summary>
   helper for creating a RenderTarget2D
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <param name="preferredDepthFormat">Preferred depth format.</param>
    </member>
    <member name="M:Nez.Textures.RenderTexture.#ctor(System.Int32,System.Int32,SurfaceFormat,DepthFormat)">
      <summary>
   helper for creating a RenderTarget2D
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <param name="preferredFormat">Preferred format.</param>
      <param name="preferredDepthFormat">Preferred depth format.</param>
    </member>
    <member name="M:Nez.Textures.RenderTexture.OnSceneBackBufferSizeChanged(System.Int32,System.Int32)">
      <summary>
   called by Renderers automatically when appropriate. Lets the resizeBehavior kick in so auto resizing can occur
   </summary>
      <param name="newWidth">New width.</param>
      <param name="newHeight">New height.</param>
    </member>
    <member name="M:Nez.Textures.RenderTexture.ResizeToFitBackbuffer">
      <summary>
   resizes the RenderTarget2D to match the back buffer size
   </summary>
    </member>
    <member name="M:Nez.Textures.RenderTexture.Resize(System.Int32,System.Int32)">
      <summary>
   resizes the RenderTarget2D to the specified size
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
    </member>
    <member name="M:Nez.Textures.RenderTexture.Dispose">
      <summary>
   Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
   </summary>
    </member>
    <member name="M:Nez.Textures.RenderTexture.op_Implicit(RenderTexture)~RenderTarget2D">
      <summary>
   Performs an implicit conversion from <see cref="T:Nez.Textures.RenderTexture" /> to <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D" />.
   </summary>
      <param name="tex">The tex.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="T:Nez.Textures.Sprite">
      <summary>
   represents a single element in a texture atlas consisting of a texture and the source rectangle for the frame
   </summary>
    </member>
    <member name="F:Nez.Textures.Sprite.Texture2D">
      <summary>
   the actual Texture2D
   </summary>
    </member>
    <member name="F:Nez.Textures.Sprite.SourceRect">
      <summary>
   rectangle in the Texture2D for this element
   </summary>
    </member>
    <member name="F:Nez.Textures.Sprite.Uvs">
      <summary>
   UVs for the texture region
   </summary>
    </member>
    <member name="F:Nez.Textures.Sprite.Center">
      <summary>
   center of the sourceRect if it had a 0,0 origin. This is basically the center in sourceRect-space.
   </summary>
      <value>The center.</value>
    </member>
    <member name="F:Nez.Textures.Sprite.Origin">
      <summary>
   the origin that a RenderableComponent should use when using this Sprite. Defaults to the center.
   </summary>
    </member>
    <member name="M:Nez.Textures.Sprite.#ctor(Texture2D,Rectangle,Vector2)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Textures.Sprite" /> class.
   </summary>
      <param name="texture">The texture.</param>
      <param name="sourceRect">The source rect.</param>
      <param name="origin">The origin.</param>
    </member>
    <member name="M:Nez.Textures.Sprite.#ctor(Texture2D,Rectangle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Textures.Sprite" /> class.
   </summary>
      <param name="texture">The texture.</param>
      <param name="sourceRect">The source rect.</param>
    </member>
    <member name="M:Nez.Textures.Sprite.#ctor(Texture2D)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Textures.Sprite" /> class.
   </summary>
      <param name="texture">The texture.</param>
    </member>
    <member name="M:Nez.Textures.Sprite.#ctor(Texture2D,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Textures.Sprite" /> class.
   </summary>
      <param name="texture">The texture.</param>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
    </member>
    <member name="M:Nez.Textures.Sprite.#ctor(Texture2D,System.Single,System.Single,System.Single,System.Single)">
      <summary>
   convenience constructor that casts floats to ints for the sourceRect
   </summary>
      <param name="texture">Texture.</param>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
    </member>
    <member name="M:Nez.Textures.Sprite.GenerateNinePatchRects(Rectangle,Rectangle[],System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
   generates nine patch Rectangles. destArray should have 9 elements. renderRect is the final area in which the nine patch will be rendered.
   To just get the source rects for rendering pass in the Sprite.sourceRect. Pass in a larger Rectangle to get final destination
   rendering Rectangles.
   </summary>
      <param name="renderRect">Render rect.</param>
      <param name="destArray">Destination array.</param>
      <param name="marginLeft">Margin left.</param>
      <param name="marginRight">Margin right.</param>
      <param name="marginTop">Margin top.</param>
      <param name="marginBottom">Margin bottom.</param>
    </member>
    <member name="M:Nez.Textures.Sprite.Clone">
      <summary>
   clones the Sprite
   </summary>
      <returns>Sprite.</returns>
    </member>
    <member name="M:Nez.Textures.Sprite.SpritesFromAtlas(Texture2D,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
   provides a List of Sprites given an atlas with equally spaced rows/columns of sprites
   </summary>
      <param name="texture">Texture.</param>
      <param name="cellWidth">Cell width.</param>
      <param name="cellHeight">Cell height.</param>
      <param name="cellOffset">the first cell to include while processing. 0 based indexing.</param>
      <param name="maxCellsToInclude">Max cells to included.</param>
      <returns>The from atlas.</returns>
    </member>
    <member name="M:Nez.Textures.Sprite.op_Implicit(Sprite)~Texture2D">
      <summary>
   Performs an implicit conversion from <see cref="T:Nez.Textures.Sprite" /> to <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D" />.
   </summary>
      <param name="tex">The tex.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Nez.Textures.Sprite.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.Textures.TextureUtils">
      <summary>
   various utilties for creating textures on the fly. These can be pretty heavy on the CPU so it's best to not try to use them every frame.
   </summary>
    </member>
    <member name="T:Nez.Textures.TextureUtils.EdgeDetectionFilter">
      <summary>
   Enum EdgeDetectionFilter
   </summary>
    </member>
    <member name="F:Nez.Textures.TextureUtils.EdgeDetectionFilter.Sobel">
      <summary>
   The sobel
   </summary>
    </member>
    <member name="F:Nez.Textures.TextureUtils.EdgeDetectionFilter.Scharr">
      <summary>
   The scharr
   </summary>
    </member>
    <member name="F:Nez.Textures.TextureUtils.EdgeDetectionFilter.FiveTap">
      <summary>
   The five tap
   </summary>
    </member>
    <member name="M:Nez.Textures.TextureUtils.TextureFromStreamPreMultiplied(Stream)">
      <summary>
   loads a Texture2D and premultiplies the alpha
   </summary>
      <param name="stream">The stream.</param>
      <returns>Texture2D.</returns>
    </member>
    <member name="M:Nez.Textures.TextureUtils.CreateFlatHeightmap(Texture2D,Color,Color)">
      <summary>
   processes each pixel of the passed in Texture and in the output texture transparent pixels will be transparentColor and opaque pixels
   will be opaqueColor. This is useful for creating normal maps for rim lighting by applying a grayscale blur then using createNormalMap*
   by doing something like the following. The first step is used only for making rim lighting normal maps:
   - var maskTex = createFlatHeightmap( tex, Color.White, Color.Black )
   - var blurredTex = createBlurredGrayscaleTexture( maskTex, 1 )
   - createNormalMap( blurredTex, 50f )
   </summary>
      <param name="image">Image.</param>
      <param name="opaqueColor">Opaque color.</param>
      <param name="transparentColor">Transparent color.</param>
      <returns>The flat heightmap.</returns>
    </member>
    <member name="M:Nez.Textures.TextureUtils.CreateFlatHeightmap(Color[],Color,Color)">
      <summary>
   Creates the flat heightmap.
   </summary>
      <param name="srcData">The source data.</param>
      <param name="opaqueColor">Color of the opaque.</param>
      <param name="transparentColor">Color of the transparent.</param>
      <returns>Color[].</returns>
    </member>
    <member name="M:Nez.Textures.TextureUtils.CreateBlurredGrayscaleTexture(Texture2D,System.Double)">
      <summary>
   creates a new texture that is a gaussian blurred version of the original in grayscale
   </summary>
      <param name="image">Image.</param>
      <param name="deviation">Deviation.</param>
      <returns>The blurred texture.</returns>
    </member>
    <member name="M:Nez.Textures.TextureUtils.CreateBlurredTexture(Color[],System.Int32,System.Int32,System.Double)">
      <summary>
   Creates the blurred texture.
   </summary>
      <param name="srcData">The source data.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="deviation">The deviation.</param>
      <returns>Color[].</returns>
    </member>
    <member name="M:Nez.Textures.TextureUtils.CreateBlurredTexture(Texture2D,System.Double)">
      <summary>
   creates a new texture that is a gaussian blurred version of the original
   </summary>
      <param name="image">Image.</param>
      <param name="deviation">Deviation.</param>
      <returns>The blurred texture.</returns>
    </member>
    <member name="M:Nez.Textures.TextureUtils.CreateBlurredGrayscaleTexture(Color[],System.Int32,System.Int32,System.Double)">
      <summary>
   Creates the blurred grayscale texture.
   </summary>
      <param name="srcData">The source data.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="deviation">The deviation.</param>
      <returns>Color[].</returns>
    </member>
    <member name="M:Nez.Textures.TextureUtils.CreateNormalMap(Texture2D,EdgeDetectionFilter,System.Single,System.Boolean,System.Boolean)">
      <summary>
   generates a normal map from a height map calculating it with a sobel filter
   </summary>
      <param name="image">Image.</param>
      <param name="filter">The filter.</param>
      <param name="normalStrength">Normal strength.</param>
      <param name="invertX">if set to <c>true</c> [invert x].</param>
      <param name="invertY">if set to <c>true</c> [invert y].</param>
      <returns>The sobel filter.</returns>
    </member>
    <member name="M:Nez.Textures.TextureUtils.CreateNormalMap(Color[],EdgeDetectionFilter,System.Int32,System.Int32,System.Single,System.Boolean,System.Boolean)">
      <summary>
   Creates the normal map.
   </summary>
      <param name="srcData">The source data.</param>
      <param name="filter">The filter.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="normalStrength">The normal strength.</param>
      <param name="invertX">if set to <c>true</c> [invert x].</param>
      <param name="invertY">if set to <c>true</c> [invert y].</param>
      <returns>Color[].</returns>
    </member>
    <member name="T:Nez.CrossFadeTransition">
      <summary>
   fades from the current Scene to the new Scene
   </summary>
    </member>
    <member name="F:Nez.CrossFadeTransition.FadeDuration">
      <summary>
   duration for the fade
   </summary>
    </member>
    <member name="F:Nez.CrossFadeTransition.FadeEaseType">
      <summary>
   ease equation to use for the cross fade
   </summary>
    </member>
    <member name="M:Nez.CrossFadeTransition.#ctor(Func{Scene})">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.CrossFadeTransition" /> class.
   </summary>
      <param name="sceneLoadAction">The scene load action.</param>
    </member>
    <member name="M:Nez.CrossFadeTransition.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.CrossFadeTransition" /> class.
   </summary>
    </member>
    <member name="M:Nez.CrossFadeTransition.OnBeginTransition">
      <summary>
   called after the previousSceneRender occurs for the first (and only) time. At this point you can load your new Scene after
   yielding one frame (so the first render call happens before scene loading).
   </summary>
      <returns>IEnumerator.</returns>
    </member>
    <member name="M:Nez.CrossFadeTransition.Render(Batcher)">
      <summary>
   do all of your rendering here.static This is a base implementation. Any special rendering should override
   this method.
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="T:Nez.FadeTransition">
      <summary>
   fades to fadeToColor then fades to the new Scene
   </summary>
    </member>
    <member name="F:Nez.FadeTransition.FadeToColor">
      <summary>
   the color we will fade to/from
   </summary>
    </member>
    <member name="F:Nez.FadeTransition.FadeOutDuration">
      <summary>
   duration to fade to fadeToColor
   </summary>
    </member>
    <member name="F:Nez.FadeTransition.DelayBeforeFadeInDuration">
      <summary>
   delay to start fading out
   </summary>
    </member>
    <member name="F:Nez.FadeTransition.FadeInDuration">
      <summary>
   duration to fade from fadeToColor to the new Scene
   </summary>
    </member>
    <member name="F:Nez.FadeTransition.FadeEaseType">
      <summary>
   ease equation to use for the fade
   </summary>
    </member>
    <member name="M:Nez.FadeTransition.#ctor(Func{Scene})">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.FadeTransition" /> class.
   </summary>
      <param name="sceneLoadAction">The scene load action.</param>
    </member>
    <member name="M:Nez.FadeTransition.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.FadeTransition" /> class.
   </summary>
    </member>
    <member name="M:Nez.FadeTransition.OnBeginTransition">
      <summary>
   called after the previousSceneRender occurs for the first (and only) time. At this point you can load your new Scene after
   yielding one frame (so the first render call happens before scene loading).
   </summary>
      <returns>IEnumerator.</returns>
    </member>
    <member name="M:Nez.FadeTransition.Render(Batcher)">
      <summary>
   do all of your rendering here.static This is a base implementation. Any special rendering should override
   this method.
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="T:Nez.ImageMaskTransition">
      <summary>
   uses an image to mask out part of the scene scaling it from max-to-min then from min-to-max with rotation. Note that the Texture
   should be loaded in the main Core.contentManager, not a Scene contentManager. The transition will unload it for you. The Texture
   should be transparent where it should be masked out and white where it should be masked in.
   </summary>
    </member>
    <member name="F:Nez.ImageMaskTransition.Duration">
      <summary>
   duration of the transition both in and out
   </summary>
    </member>
    <member name="F:Nez.ImageMaskTransition.DelayBeforeMaskOut">
      <summary>
   delay after the mask-in before the mark-out begins
   </summary>
    </member>
    <member name="F:Nez.ImageMaskTransition.MinScale">
      <summary>
   minimum scale of the mask
   </summary>
    </member>
    <member name="F:Nez.ImageMaskTransition.MaxScale">
      <summary>
   maximum scale of the mask
   </summary>
    </member>
    <member name="F:Nez.ImageMaskTransition.ScaleEaseType">
      <summary>
   ease equation to use for the scale animation
   </summary>
    </member>
    <member name="F:Nez.ImageMaskTransition.MinRotation">
      <summary>
   minimum rotation of the mask animation
   </summary>
    </member>
    <member name="F:Nez.ImageMaskTransition.MaxRotation">
      <summary>
   maximum rotation of the mask animation
   </summary>
    </member>
    <member name="F:Nez.ImageMaskTransition.RotationEaseType">
      <summary>
   ease equation to use for the rotation animation
   </summary>
    </member>
    <member name="M:Nez.ImageMaskTransition.#ctor(Func{Scene},Texture2D)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.ImageMaskTransition" /> class.
   </summary>
      <param name="sceneLoadAction">The scene load action.</param>
      <param name="maskTexture">The mask texture.</param>
    </member>
    <member name="M:Nez.ImageMaskTransition.#ctor(Texture2D)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.ImageMaskTransition" /> class.
   </summary>
      <param name="maskTexture">The mask texture.</param>
    </member>
    <member name="M:Nez.ImageMaskTransition.OnBeginTransition">
      <summary>
   called after the previousSceneRender occurs for the first (and only) time. At this point you can load your new Scene after
   yielding one frame (so the first render call happens before scene loading).
   </summary>
      <returns>IEnumerator.</returns>
    </member>
    <member name="M:Nez.ImageMaskTransition.PreRender(Batcher)">
      <summary>
   called before the Scene is rendered. This allows a transition to render to a RenderTarget if needed and avoids issues with MonoGame
   clearing the framebuffer when a RenderTarget is used.
   </summary>
      <param name="batcher">The batcher.</param>
    </member>
    <member name="M:Nez.ImageMaskTransition.Render(Batcher)">
      <summary>
   do all of your rendering here.static This is a base implementation. Any special rendering should override
   this method.
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="T:Nez.SceneTransition">
      <summary>
   SceneTransition is used to transition from one Scene to another or within a scene with an effect. If sceneLoadAction is null Nez
   will perform an in-Scene transition as opposed to loading a new Scene mid transition.
   The general gist of a transition is the following:
   - onBeginTransition will be called allowing you to yield for multipart transitions
   - for two part transitions with Effects you can yield on a call to TickEffectProgressProperty for part one to obscure the screen
   - next, yield a call to loadNextScene to load up the new Scene
   - finally, yield again on TickEffectProgressProperty to un-obscure the screen and show the new Scene
   </summary>
    </member>
    <member name="F:Nez.SceneTransition.PreviousSceneRender">
      <summary>
   contains the last render of the previous Scene. Can be used to obscure the screen while loading a new Scene.
   </summary>
    </member>
    <member name="F:Nez.SceneTransition.WantsPreviousSceneRender">
      <summary>
   if true, Nez will render the previous scene into previousSceneRender so that you can use it with your transition
   </summary>
    </member>
    <member name="F:Nez.SceneTransition.LoadSceneOnBackgroundThread">
      <summary>
   if true, the next Scene will be loaded on a background thread. Note that if raw PNG files are used they cannot be loaded
   on a background thread.
   </summary>
    </member>
    <member name="F:Nez.SceneTransition.OnScreenObscured">
      <summary>
   called when loadNextScene is executing. This is useful when doing inter-Scene transitions so that you know when you can more the
   Camera or reset any Entities
   </summary>
    </member>
    <member name="F:Nez.SceneTransition.OnTransitionCompleted">
      <summary>
   called when the Transition has completed it's execution, so that other work can be called, such as Starting another transition.
   </summary>
    </member>
    <member name="M:Nez.SceneTransition.OnBeginTransition">
      <summary>
   called after the previousSceneRender occurs for the first (and only) time. At this point you can load your new Scene after
   yielding one frame (so the first render call happens before scene loading).
   </summary>
      <returns>IEnumerator.</returns>
    </member>
    <member name="M:Nez.SceneTransition.PreRender(Batcher)">
      <summary>
   called before the Scene is rendered. This allows a transition to render to a RenderTarget if needed and avoids issues with MonoGame
   clearing the framebuffer when a RenderTarget is used.
   </summary>
      <param name="batcher">The batcher.</param>
    </member>
    <member name="M:Nez.SceneTransition.Render(Batcher)">
      <summary>
   do all of your rendering here.static This is a base implementation. Any special rendering should override
   this method.
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="M:Nez.SceneTransition.TickEffectProgressProperty(Effect,System.Single,EaseType,System.Boolean)">
      <summary>
   the most common type of transition seems to be one that ticks progress from 0 - 1. This method takes care of that for you
   if your transition needs to have a _progress property ticked after the scene loads.
   </summary>
      <param name="effect">The effect.</param>
      <param name="duration">duration</param>
      <param name="easeType">Type of the ease.</param>
      <param name="reverseDirection">if true, _progress will go from 1 to 0. If false, it goes form 0 to 1</param>
      <returns>IEnumerator.</returns>
    </member>
    <member name="T:Nez.SquaresTransition">
      <summary>
   builds up a cover of squares then removes them
   </summary>
    </member>
    <member name="P:Nez.SquaresTransition.SquareColor">
      <summary>
   color of the squares
   </summary>
      <value>The color of the square.</value>
    </member>
    <member name="P:Nez.SquaresTransition.Smoothness">
      <summary>
   Sets the smoothness.
   </summary>
      <value>The smoothness.</value>
    </member>
    <member name="P:Nez.SquaresTransition.Size">
      <summary>
   size of the squares. If you want perfect squares use size, size / aspectRatio_of_screen
   </summary>
      <value>The size.</value>
    </member>
    <member name="F:Nez.SquaresTransition.SquaresInDuration">
      <summary>
   duration for squares to populate the screen
   </summary>
    </member>
    <member name="F:Nez.SquaresTransition.DelayBeforeSquaresInDuration">
      <summary>
   delay before removing squares
   </summary>
    </member>
    <member name="F:Nez.SquaresTransition.SquaresOutDuration">
      <summary>
   duration for squares to unpopulate screen
   </summary>
    </member>
    <member name="F:Nez.SquaresTransition.EaseType">
      <summary>
   ease equation to use for the animation
   </summary>
    </member>
    <member name="M:Nez.SquaresTransition.#ctor(Func{Scene})">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.SquaresTransition" /> class.
   </summary>
      <param name="sceneLoadAction">The scene load action.</param>
    </member>
    <member name="M:Nez.SquaresTransition.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.SquaresTransition" /> class.
   </summary>
    </member>
    <member name="M:Nez.SquaresTransition.OnBeginTransition">
      <summary>
   called after the previousSceneRender occurs for the first (and only) time. At this point you can load your new Scene after
   yielding one frame (so the first render call happens before scene loading).
   </summary>
      <returns>IEnumerator.</returns>
    </member>
    <member name="M:Nez.SquaresTransition.Render(Batcher)">
      <summary>
   do all of your rendering here.static This is a base implementation. Any special rendering should override
   this method.
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="T:Nez.TextureWipeTransition">
      <summary>
   uses a texture (transitionTexture) to control a wipe animation. the blue channel of the texture determines if color is shown or the
   previous scenes render. Sample textures are
   based on: https://www.youtube.com/watch?v=LnAoD7hgDxw
   </summary>
    </member>
    <member name="P:Nez.TextureWipeTransition.Opacity">
      <summary>
   opacity of the wipe
   </summary>
      <value>The opacity.</value>
    </member>
    <member name="P:Nez.TextureWipeTransition.Color">
      <summary>
   color to wipe to
   </summary>
      <value>The color.</value>
    </member>
    <member name="P:Nez.TextureWipeTransition.TransitionTexture">
      <summary>
   texture used for the transition. During the transition whenever the blue channel of this texture is less than progress (which is ticked
   from 0 - 1) the color will be used else the previous scene render will be used
   </summary>
      <value>The transition texture.</value>
    </member>
    <member name="P:Nez.TextureWipeTransition.UseRedGreenChannelsForDistortion">
      <summary>
   if true, the red and green channels of the transitionTexture will be used to offset the texture lookup during the transition
   </summary>
      <value>
        <c>true</c> if use red green channels for distortion; otherwise, <c>false</c>.</value>
    </member>
    <member name="F:Nez.TextureWipeTransition.Duration">
      <summary>
   duration for the wind transition
   </summary>
    </member>
    <member name="F:Nez.TextureWipeTransition.EaseType">
      <summary>
   ease equation to use for the animation
   </summary>
    </member>
    <member name="M:Nez.TextureWipeTransition.#ctor(Func{Scene},Texture2D)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.TextureWipeTransition" /> class.
   </summary>
      <param name="sceneLoadAction">The scene load action.</param>
      <param name="transitionTexture">The transition texture.</param>
    </member>
    <member name="M:Nez.TextureWipeTransition.#ctor(Func{Scene})">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.TextureWipeTransition" /> class.
   </summary>
      <param name="sceneLoadAction">The scene load action.</param>
    </member>
    <member name="M:Nez.TextureWipeTransition.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.TextureWipeTransition" /> class.
   </summary>
    </member>
    <member name="M:Nez.TextureWipeTransition.#ctor(Texture2D)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.TextureWipeTransition" /> class.
   </summary>
      <param name="transitionTexture">The transition texture.</param>
    </member>
    <member name="M:Nez.TextureWipeTransition.OnBeginTransition">
      <summary>
   called after the previousSceneRender occurs for the first (and only) time. At this point you can load your new Scene after
   yielding one frame (so the first render call happens before scene loading).
   </summary>
      <returns>IEnumerator.</returns>
    </member>
    <member name="M:Nez.TextureWipeTransition.Render(Batcher)">
      <summary>
   do all of your rendering here.static This is a base implementation. Any special rendering should override
   this method.
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="T:Nez.TransformTransition">
      <summary>
   Class TransformTransition.
   Implements the <see cref="T:Nez.SceneTransition" /></summary>
      <seealso cref="T:Nez.SceneTransition" />
    </member>
    <member name="T:Nez.TransformTransition.TransformTransitionType">
      <summary>
   Enum TransformTransitionType
   </summary>
    </member>
    <member name="F:Nez.TransformTransition.TransformTransitionType.ZoomOut">
      <summary>
   The zoom out
   </summary>
    </member>
    <member name="F:Nez.TransformTransition.TransformTransitionType.ZoomIn">
      <summary>
   The zoom in
   </summary>
    </member>
    <member name="F:Nez.TransformTransition.TransformTransitionType.SlideRight">
      <summary>
   The slide right
   </summary>
    </member>
    <member name="F:Nez.TransformTransition.TransformTransitionType.SlideLeft">
      <summary>
   The slide left
   </summary>
    </member>
    <member name="F:Nez.TransformTransition.TransformTransitionType.SlideUp">
      <summary>
   The slide up
   </summary>
    </member>
    <member name="F:Nez.TransformTransition.TransformTransitionType.SlideDown">
      <summary>
   The slide down
   </summary>
    </member>
    <member name="F:Nez.TransformTransition.TransformTransitionType.SlideBottomRight">
      <summary>
   The slide bottom right
   </summary>
    </member>
    <member name="F:Nez.TransformTransition.TransformTransitionType.SlideBottomLeft">
      <summary>
   The slide bottom left
   </summary>
    </member>
    <member name="F:Nez.TransformTransition.TransformTransitionType.SlideTopRight">
      <summary>
   The slide top right
   </summary>
    </member>
    <member name="F:Nez.TransformTransition.TransformTransitionType.SlideTopLeft">
      <summary>
   The slide top left
   </summary>
    </member>
    <member name="F:Nez.TransformTransition.Duration">
      <summary>
   duration for the animation
   </summary>
    </member>
    <member name="F:Nez.TransformTransition.TransitionEaseType">
      <summary>
   ease equation for the transition
   </summary>
    </member>
    <member name="M:Nez.TransformTransition.#ctor(Func{Scene},TransformTransitionType)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.TransformTransition" /> class.
   </summary>
      <param name="sceneLoadAction">The scene load action.</param>
      <param name="transitionType">Type of the transition.</param>
    </member>
    <member name="M:Nez.TransformTransition.#ctor(TransformTransitionType)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.TransformTransition" /> class.
   </summary>
      <param name="transitionType">Type of the transition.</param>
    </member>
    <member name="M:Nez.TransformTransition.OnBeginTransition">
      <summary>
   called after the previousSceneRender occurs for the first (and only) time. At this point you can load your new Scene after
   yielding one frame (so the first render call happens before scene loading).
   </summary>
      <returns>IEnumerator.</returns>
    </member>
    <member name="M:Nez.TransformTransition.Render(Batcher)">
      <summary>
   do all of your rendering here.static This is a base implementation. Any special rendering should override
   this method.
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="T:Nez.WindTransition">
      <summary>
   sweeps wind accross the screen revealing the new Scene
   </summary>
    </member>
    <member name="P:Nez.WindTransition.WindSegments">
      <summary>
   how many wind segments should be used. Defaults to 100. (1 - 1000)
   </summary>
      <value>The wind segments.</value>
    </member>
    <member name="P:Nez.WindTransition.Size">
      <summary>
   size of the wind streaks. defaults to 0.3. (0.1 - 1)
   </summary>
      <value>The size.</value>
    </member>
    <member name="F:Nez.WindTransition.Duration">
      <summary>
   duration for the wind transition
   </summary>
    </member>
    <member name="F:Nez.WindTransition.EaseType">
      <summary>
   ease equation to use for the animation
   </summary>
    </member>
    <member name="M:Nez.WindTransition.#ctor(Func{Scene})">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.WindTransition" /> class.
   </summary>
      <param name="sceneLoadAction">The scene load action.</param>
    </member>
    <member name="M:Nez.WindTransition.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.WindTransition" /> class.
   </summary>
    </member>
    <member name="M:Nez.WindTransition.OnBeginTransition">
      <summary>
   called after the previousSceneRender occurs for the first (and only) time. At this point you can load your new Scene after
   yielding one frame (so the first render call happens before scene loading).
   </summary>
      <returns>IEnumerator.</returns>
    </member>
    <member name="M:Nez.WindTransition.Render(Batcher)">
      <summary>
   do all of your rendering here.static This is a base implementation. Any special rendering should override
   this method.
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="T:Nez.Graphics">
      <summary>
   wrapper class that holds in instance of a Batcher and helpers so that it can be passed around and draw anything.
   </summary>
    </member>
    <member name="F:Nez.Graphics.Instance">
      <summary>
   The instance
   </summary>
    </member>
    <member name="F:Nez.Graphics.Batcher">
      <summary>
   All 2D rendering is done through this Batcher instance
   </summary>
    </member>
    <member name="F:Nez.Graphics.BitmapFont">
      <summary>
   default font is loaded up and stored here for easy access. Nez uses it for the DebugConsole
   </summary>
    </member>
    <member name="F:Nez.Graphics.PixelTexture">
      <summary>
   A sprite used to draw rectangles, lines, circles, etc.
   Will be generated at startup, but you can replace this with a sprite from your atlas to reduce texture swaps.
   Should be a 1x1 white pixel
   </summary>
    </member>
    <member name="M:Nez.Graphics.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Graphics" /> class.
   </summary>
    </member>
    <member name="M:Nez.Graphics.#ctor(BitmapFont)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Graphics" /> class.
   </summary>
      <param name="font">The font.</param>
    </member>
    <member name="M:Nez.Graphics.CreateSingleColorTexture(System.Int32,System.Int32,Color)">
      <summary>
   helper method that generates a single color texture of the given dimensions
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <param name="color">Color.</param>
      <returns>The single color texture.</returns>
    </member>
    <member name="M:Nez.Graphics.Unload">
      <summary>
   Unloads this instance.
   </summary>
    </member>
    <member name="T:Nez.Material`1">
      <summary>
   convenience subclass with a single property that casts the Effect for cleaner configuration
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:Nez.Material">
      <summary>
   Class Material.
   Implements the <see cref="T:Nez.Material" />
   Implements the <see cref="T:System.IDisposable" /></summary>
      <seealso cref="T:Nez.Material" />
      <seealso cref="T:System.IDisposable" />
    </member>
    <member name="P:Nez.Material`1.Effect">
      <summary>
   Gets or sets the effect.
   </summary>
      <value>The effect.</value>
    </member>
    <member name="M:Nez.Material`1.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Material`1" /> class.
   </summary>
    </member>
    <member name="M:Nez.Material`1.#ctor(`0)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Material`1" /> class.
   </summary>
      <param name="effect">The effect.</param>
    </member>
    <member name="F:Nez.Material.DefaultMaterial">
      <summary>
   default Material instance
   </summary>
    </member>
    <member name="F:Nez.Material.DefaultOpaqueMaterial">
      <summary>
   default opaque Material used for PostProcessors
   </summary>
    </member>
    <member name="F:Nez.Material.BlendState">
      <summary>
   BlendState used by the Batcher for the current RenderableComponent
   </summary>
    </member>
    <member name="F:Nez.Material.DepthStencilState">
      <summary>
   DepthStencilState used by the Batcher for the current RenderableComponent
   </summary>
    </member>
    <member name="F:Nez.Material.SamplerState">
      <summary>
   SamplerState used by the Batcher for the current RenderableComponent
   </summary>
    </member>
    <member name="F:Nez.Material.Effect">
      <summary>
   Effect used by the Batcher for the current RenderableComponent
   </summary>
    </member>
    <member name="M:Nez.Material.StencilWrite(System.Int32)">
      <summary>
   Stencils the write.
   </summary>
      <param name="stencilRef">The stencil reference.</param>
      <returns>Material.</returns>
    </member>
    <member name="M:Nez.Material.StencilRead(System.Int32)">
      <summary>
   Stencils the read.
   </summary>
      <param name="stencilRef">The stencil reference.</param>
      <returns>Material.</returns>
    </member>
    <member name="M:Nez.Material.BlendDarken">
      <summary>
   Blends the darken.
   </summary>
      <returns>Material.</returns>
    </member>
    <member name="M:Nez.Material.BlendLighten">
      <summary>
   Blends the lighten.
   </summary>
      <returns>Material.</returns>
    </member>
    <member name="M:Nez.Material.BlendScreen">
      <summary>
   Blends the screen.
   </summary>
      <returns>Material.</returns>
    </member>
    <member name="M:Nez.Material.BlendMultiply">
      <summary>
   Blends the multiply.
   </summary>
      <returns>Material.</returns>
    </member>
    <member name="M:Nez.Material.BlendMultiply2x">
      <summary>
   Blends the multiply2x.
   </summary>
      <returns>Material.</returns>
      <font color="red">Badly formed XML comment.</font>
    </member>
    <member name="M:Nez.Material.BlendLinearDodge">
      <summary>
   Blends the linear dodge.
   </summary>
      <returns>Material.</returns>
    </member>
    <member name="M:Nez.Material.BlendLinearBurn">
      <summary>
   Blends the linear burn.
   </summary>
      <returns>Material.</returns>
    </member>
    <member name="M:Nez.Material.BlendDifference">
      <summary>
   Blends the difference.
   </summary>
      <returns>Material.</returns>
    </member>
    <member name="M:Nez.Material.BlendSubtractive">
      <summary>
   Blends the subtractive.
   </summary>
      <returns>Material.</returns>
    </member>
    <member name="M:Nez.Material.BlendAdditive">
      <summary>
   Blends the additive.
   </summary>
      <returns>Material.</returns>
    </member>
    <member name="M:Nez.Material.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Material" /> class.
   </summary>
    </member>
    <member name="M:Nez.Material.#ctor(Effect)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Material" /> class.
   </summary>
      <param name="effect">The effect.</param>
    </member>
    <member name="M:Nez.Material.#ctor(BlendState,Effect)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Material" /> class.
   </summary>
      <param name="blendState">State of the blend.</param>
      <param name="effect">The effect.</param>
    </member>
    <member name="M:Nez.Material.#ctor(DepthStencilState,Effect)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Material" /> class.
   </summary>
      <param name="depthStencilState">State of the depth stencil.</param>
      <param name="effect">The effect.</param>
    </member>
    <member name="M:Nez.Material.Dispose">
      <summary>
   Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
   </summary>
    </member>
    <member name="M:Nez.Material.OnPreRender(Camera)">
      <summary>
   called when the Material is initialy set right before Batcher.begin to allow any Effects that have parameters set if necessary
   based on the Camera Matrix such as to set the MatrixTransform via camera.viewProjectionMatrix mimicking what Batcher does. This will
   only be called if there is a non-null Effect.
   </summary>
      <param name="camera">Camera.</param>
    </member>
    <member name="M:Nez.Material.CompareTo(Material)">
      <summary>
   very basic here. We only check if the pointers are the same
   </summary>
      <param name="other">Other.</param>
      <returns>The to.</returns>
    </member>
    <member name="M:Nez.Material.Clone">
      <summary>
   clones the Material. Note that the Effect is not cloned. It is the same instance as the original Material.
   </summary>
      <returns>Material.</returns>
    </member>
    <member name="T:Nez.PrimitiveBatch">
      <summary>
   batcher that draws vertex colored triangles
   </summary>
    </member>
    <member name="M:Nez.PrimitiveBatch.#ctor(System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.PrimitiveBatch" /> class.
   </summary>
      <param name="bufferSize">Size of the buffer.</param>
    </member>
    <member name="M:Nez.PrimitiveBatch.Dispose">
      <summary>
   Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
   </summary>
    </member>
    <member name="M:Nez.PrimitiveBatch.Begin">
      <summary>
   draws directly in screen space at full viewport size
   </summary>
    </member>
    <member name="M:Nez.PrimitiveBatch.Begin(Matrix@,Matrix@)">
      <summary>
   Begin is called to tell the PrimitiveBatch what kind of primitives will be drawn, and to prepare the graphics card to render those primitives.
   Use camera.projectionMatrix and camera.transformMatrix if the batch should be in camera space.
   </summary>
      <param name="projection">The projection.</param>
      <param name="view">The view.</param>
    </member>
    <member name="M:Nez.PrimitiveBatch.Begin(Matrix,Matrix)">
      <summary>
   Begin is called to tell the PrimitiveBatch what kind of primitives will be drawn, and to prepare the graphics card to render those primitives.
   Use camera.projectionMatrix and camera.transformMatrix if the batch should be in camera space.
   </summary>
      <param name="projection">The projection.</param>
      <param name="view">The view.</param>
    </member>
    <member name="M:Nez.PrimitiveBatch.End">
      <summary>
   End is called once all the primitives have been drawn using AddVertex.
   it will call Flush to actually submit the draw call to the graphics card, and
   then tell the basic effect to end.
   </summary>
      <exception cref="T:System.InvalidOperationException">Begin must be called before End can be called.</exception>
    </member>
    <member name="M:Nez.PrimitiveBatch.AddVertex(Vector2,Color,PrimitiveType)">
      <summary>
   Adds the vertex.
   </summary>
      <param name="vertex">The vertex.</param>
      <param name="color">The color.</param>
      <param name="primitiveType">Type of the primitive.</param>
    </member>
    <member name="M:Nez.PrimitiveBatch.DrawRectangle(System.Single,System.Single,System.Single,System.Single,Color)">
      <summary>
   Draws the rectangle.
   </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.PrimitiveBatch.DrawRectangle(Rectangle@,Color)">
      <summary>
   Draws the rectangle.
   </summary>
      <param name="rect">The rect.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.PrimitiveBatch.DrawPolygon(Vector2[],System.Int32,Color)">
      <summary>
   Draws the polygon.
   </summary>
      <param name="vertices">The vertices.</param>
      <param name="count">The count.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.PrimitiveBatch.DrawPolygon(Vector2,Vector2[],Color)">
      <summary>
   Draws the polygon.
   </summary>
      <param name="position">The position.</param>
      <param name="vertices">The vertices.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.PrimitiveBatch.DrawCircle(Vector2,System.Single,Color,System.Int32)">
      <summary>
   Draws the circle.
   </summary>
      <param name="center">The center.</param>
      <param name="radius">The radius.</param>
      <param name="color">The color.</param>
      <param name="circleSegments">The circle segments.</param>
    </member>
    <member name="M:Nez.PrimitiveBatch.DrawArrow(Vector2,Vector2,System.Single,System.Single,System.Boolean,Color)">
      <summary>
   Draws the arrow.
   </summary>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <param name="length">The length.</param>
      <param name="width">The width.</param>
      <param name="drawStartIndicator">if set to <c>true</c> [draw start indicator].</param>
      <param name="color">The color.</param>
    </member>
    <member name="T:Nez.ScissorStack">
      <summary>
   A stack of Rectangle objects to be used for clipping via GraphicsDevice.ScissorRectangle. When a new
   Rectangle is pushed onto the stack, it will be merged with the current top of stack.The minimum area of overlap is then set as
   the real top of the stack.
   </summary>
    </member>
    <member name="M:Nez.ScissorStack.PushScissors(Rectangle)">
      <summary>
   Pushes the scissors.
   </summary>
      <param name="scissor">The scissor.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.ScissorStack.PopScissors">
      <summary>
   Pops the current scissor rectangle from the stack and sets the new scissor area to the new top of stack rectangle.
   Any drawing should be flushed before popping scissors.
   </summary>
      <returns>The scissors.</returns>
    </member>
    <member name="M:Nez.ScissorStack.CalculateScissors(Camera,Matrix,Rectangle)">
      <summary>
   Calculates a screen space scissor rectangle using the given Camera. If the Camera is null than the scissor will
   be calculated only with the batchTransform
   </summary>
      <param name="camera">Camera.</param>
      <param name="batchTransform">Batch transform.</param>
      <param name="scissor">Area.</param>
      <returns>The scissors.</returns>
    </member>
    <member name="M:Nez.ScissorStack.CalculateScissors(Camera,Matrix2D,Rectangle)">
      <summary>
   Calculates a screen space scissor rectangle using the given Camera. If the Camera is null than the scissor will
   be calculated only with the batchTransform
   </summary>
      <param name="camera">Camera.</param>
      <param name="batchTransform">Batch transform.</param>
      <param name="scissor">Area.</param>
      <returns>The scissors.</returns>
    </member>
    <member name="T:Nez.VirtualAxis">
      <summary>
   A virtual input represented as a float between -1 and 1
   </summary>
    </member>
    <member name="T:Nez.VirtualAxis.Node">
      <summary>
   Class Node.
   Implements the <see cref="T:Nez.VirtualInputNode" /></summary>
      <seealso cref="T:Nez.VirtualInputNode" />
    </member>
    <member name="T:Nez.VirtualAxis.GamePadLeftStickX">
      <summary>
   Class GamePadLeftStickX.
   Implements the <see cref="T:Nez.VirtualAxis.Node" /></summary>
      <seealso cref="T:Nez.VirtualAxis.Node" />
    </member>
    <member name="T:Nez.VirtualAxis.GamePadLeftStickY">
      <summary>
   Class GamePadLeftStickY.
   Implements the <see cref="T:Nez.VirtualAxis.Node" /></summary>
      <seealso cref="T:Nez.VirtualAxis.Node" />
    </member>
    <member name="T:Nez.VirtualAxis.GamePadRightStickX">
      <summary>
   Class GamePadRightStickX.
   Implements the <see cref="T:Nez.VirtualAxis.Node" /></summary>
      <seealso cref="T:Nez.VirtualAxis.Node" />
    </member>
    <member name="T:Nez.VirtualAxis.GamePadRightStickY">
      <summary>
   Class GamePadRightStickY.
   Implements the <see cref="T:Nez.VirtualAxis.Node" /></summary>
      <seealso cref="T:Nez.VirtualAxis.Node" />
    </member>
    <member name="T:Nez.VirtualAxis.GamePadDpadLeftRight">
      <summary>
   Class GamePadDpadLeftRight.
   Implements the <see cref="T:Nez.VirtualAxis.Node" /></summary>
      <seealso cref="T:Nez.VirtualAxis.Node" />
    </member>
    <member name="T:Nez.VirtualAxis.GamePadDpadUpDown">
      <summary>
   Class GamePadDpadUpDown.
   Implements the <see cref="T:Nez.VirtualAxis.Node" /></summary>
      <seealso cref="T:Nez.VirtualAxis.Node" />
    </member>
    <member name="T:Nez.VirtualAxis.KeyboardKeys">
      <summary>
   Class KeyboardKeys.
   Implements the <see cref="T:Nez.VirtualAxis.Node" /></summary>
      <seealso cref="T:Nez.VirtualAxis.Node" />
    </member>
    <member name="F:Nez.VirtualAxis.Nodes">
      <summary>
   The nodes
   </summary>
    </member>
    <member name="P:Nez.VirtualAxis.Value">
      <summary>
   Gets the value.
   </summary>
      <value>The value.</value>
    </member>
    <member name="M:Nez.VirtualAxis.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualAxis" /> class.
   </summary>
    </member>
    <member name="M:Nez.VirtualAxis.#ctor(Node[])">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualAxis" /> class.
   </summary>
      <param name="nodes">The nodes.</param>
    </member>
    <member name="M:Nez.VirtualAxis.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="M:Nez.VirtualAxis.op_Implicit(VirtualAxis)~System.Single">
      <summary>
   Performs an implicit conversion from <see cref="T:Nez.VirtualAxis" /> to <see cref="T:System.Single" />.
   </summary>
      <param name="axis">The axis.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="P:Nez.VirtualAxis.Node.Value">
      <summary>
   Gets the value.
   </summary>
      <value>The value.</value>
    </member>
    <member name="P:Nez.VirtualAxis.Node.DirectionJustPushed">
      <summary>
   Gets the direction just pushed.
   </summary>
      <value>The direction just pushed.</value>
    </member>
    <member name="M:Nez.VirtualAxis.Node.JustPushed(System.Int32)">
      <summary>
   Justs the pushed.
   </summary>
      <param name="direction">The direction.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.VirtualAxis.Node.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="F:Nez.VirtualAxis.GamePadLeftStickX.GamepadIndex">
      <summary>
   The gamepad index
   </summary>
    </member>
    <member name="F:Nez.VirtualAxis.GamePadLeftStickX.Deadzone">
      <summary>
   The deadzone
   </summary>
    </member>
    <member name="M:Nez.VirtualAxis.GamePadLeftStickX.#ctor(System.Int32,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualAxis.GamePadLeftStickX" /> class.
   </summary>
      <param name="gamepadIndex">Index of the gamepad.</param>
      <param name="deadzone">The deadzone.</param>
    </member>
    <member name="P:Nez.VirtualAxis.GamePadLeftStickX.Value">
      <summary>
   Gets the value.
   </summary>
      <value>The value.</value>
    </member>
    <member name="F:Nez.VirtualAxis.GamePadLeftStickY.InvertResult">
      <summary>
   if true, pressing up will return -1 and down will return 1 matching GamePadDpadUpDown
   </summary>
    </member>
    <member name="F:Nez.VirtualAxis.GamePadLeftStickY.GamepadIndex">
      <summary>
   The gamepad index
   </summary>
    </member>
    <member name="F:Nez.VirtualAxis.GamePadLeftStickY.Deadzone">
      <summary>
   The deadzone
   </summary>
    </member>
    <member name="M:Nez.VirtualAxis.GamePadLeftStickY.#ctor(System.Int32,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualAxis.GamePadLeftStickY" /> class.
   </summary>
      <param name="gamepadIndex">Index of the gamepad.</param>
      <param name="deadzone">The deadzone.</param>
    </member>
    <member name="P:Nez.VirtualAxis.GamePadLeftStickY.Value">
      <summary>
   Gets the value.
   </summary>
      <value>The value.</value>
    </member>
    <member name="F:Nez.VirtualAxis.GamePadRightStickX.GamepadIndex">
      <summary>
   The gamepad index
   </summary>
    </member>
    <member name="F:Nez.VirtualAxis.GamePadRightStickX.Deadzone">
      <summary>
   The deadzone
   </summary>
    </member>
    <member name="M:Nez.VirtualAxis.GamePadRightStickX.#ctor(System.Int32,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualAxis.GamePadRightStickX" /> class.
   </summary>
      <param name="gamepadIndex">Index of the gamepad.</param>
      <param name="deadzone">The deadzone.</param>
    </member>
    <member name="P:Nez.VirtualAxis.GamePadRightStickX.Value">
      <summary>
   Gets the value.
   </summary>
      <value>The value.</value>
    </member>
    <member name="F:Nez.VirtualAxis.GamePadRightStickY.GamepadIndex">
      <summary>
   The gamepad index
   </summary>
    </member>
    <member name="F:Nez.VirtualAxis.GamePadRightStickY.Deadzone">
      <summary>
   The deadzone
   </summary>
    </member>
    <member name="M:Nez.VirtualAxis.GamePadRightStickY.#ctor(System.Int32,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualAxis.GamePadRightStickY" /> class.
   </summary>
      <param name="gamepadIndex">Index of the gamepad.</param>
      <param name="deadzone">The deadzone.</param>
    </member>
    <member name="P:Nez.VirtualAxis.GamePadRightStickY.Value">
      <summary>
   Gets the value.
   </summary>
      <value>The value.</value>
    </member>
    <member name="F:Nez.VirtualAxis.GamePadDpadLeftRight.GamepadIndex">
      <summary>
   The gamepad index
   </summary>
    </member>
    <member name="M:Nez.VirtualAxis.GamePadDpadLeftRight.#ctor(System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualAxis.GamePadDpadLeftRight" /> class.
   </summary>
      <param name="gamepadIndex">Index of the gamepad.</param>
    </member>
    <member name="P:Nez.VirtualAxis.GamePadDpadLeftRight.Value">
      <summary>
   Gets the value.
   </summary>
      <value>The value.</value>
    </member>
    <member name="F:Nez.VirtualAxis.GamePadDpadUpDown.GamepadIndex">
      <summary>
   The gamepad index
   </summary>
    </member>
    <member name="M:Nez.VirtualAxis.GamePadDpadUpDown.#ctor(System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualAxis.GamePadDpadUpDown" /> class.
   </summary>
      <param name="gamepadIndex">Index of the gamepad.</param>
    </member>
    <member name="P:Nez.VirtualAxis.GamePadDpadUpDown.Value">
      <summary>
   Gets the value.
   </summary>
      <value>The value.</value>
    </member>
    <member name="F:Nez.VirtualAxis.KeyboardKeys.OverlapBehavior">
      <summary>
   The overlap behavior
   </summary>
    </member>
    <member name="F:Nez.VirtualAxis.KeyboardKeys.Positive">
      <summary>
   The positive
   </summary>
    </member>
    <member name="F:Nez.VirtualAxis.KeyboardKeys.Negative">
      <summary>
   The negative
   </summary>
    </member>
    <member name="M:Nez.VirtualAxis.KeyboardKeys.#ctor(OverlapBehavior,Keys,Keys)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualAxis.KeyboardKeys" /> class.
   </summary>
      <param name="overlapBehavior">The overlap behavior.</param>
      <param name="negative">The negative.</param>
      <param name="positive">The positive.</param>
    </member>
    <member name="M:Nez.VirtualAxis.KeyboardKeys.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="P:Nez.VirtualAxis.KeyboardKeys.Value">
      <summary>
   Gets the value.
   </summary>
      <value>The value.</value>
    </member>
    <member name="T:Nez.VirtualButton">
      <summary>
   A virtual input that is represented as a boolean. As well as simply checking the current button state, you can ask whether
   it was just pressed or released this frame. You can also keep the button press stored in a buffer for a limited time, or
   until it is consumed by calling consumeBuffer()
   </summary>
    </member>
    <member name="T:Nez.VirtualButton.Node">
      <summary>
   Class Node.
   Implements the <see cref="T:Nez.VirtualInputNode" /></summary>
      <seealso cref="T:Nez.VirtualInputNode" />
    </member>
    <member name="T:Nez.VirtualButton.KeyboardKey">
      <summary>
   Class KeyboardKey.
   Implements the <see cref="T:Nez.VirtualButton.Node" /></summary>
      <seealso cref="T:Nez.VirtualButton.Node" />
    </member>
    <member name="T:Nez.VirtualButton.KeyboardModifiedKey">
      <summary>
   works like KeyboardKey except the modifier key must also be down for isDown/isPressed to be true. isReleased checks only key.
   </summary>
    </member>
    <member name="T:Nez.VirtualButton.GamePadButton">
      <summary>
   Class GamePadButton.
   Implements the <see cref="T:Nez.VirtualButton.Node" /></summary>
      <seealso cref="T:Nez.VirtualButton.Node" />
    </member>
    <member name="T:Nez.VirtualButton.GamePadLeftTrigger">
      <summary>
   Class GamePadLeftTrigger.
   Implements the <see cref="T:Nez.VirtualButton.Node" /></summary>
      <seealso cref="T:Nez.VirtualButton.Node" />
    </member>
    <member name="T:Nez.VirtualButton.GamePadRightTrigger">
      <summary>
   Class GamePadRightTrigger.
   Implements the <see cref="T:Nez.VirtualButton.Node" /></summary>
      <seealso cref="T:Nez.VirtualButton.Node" />
    </member>
    <member name="T:Nez.VirtualButton.GamePadDPadRight">
      <summary>
   Class GamePadDPadRight.
   Implements the <see cref="T:Nez.VirtualButton.Node" /></summary>
      <seealso cref="T:Nez.VirtualButton.Node" />
    </member>
    <member name="T:Nez.VirtualButton.GamePadDPadLeft">
      <summary>
   Class GamePadDPadLeft.
   Implements the <see cref="T:Nez.VirtualButton.Node" /></summary>
      <seealso cref="T:Nez.VirtualButton.Node" />
    </member>
    <member name="T:Nez.VirtualButton.GamePadDPadUp">
      <summary>
   Class GamePadDPadUp.
   Implements the <see cref="T:Nez.VirtualButton.Node" /></summary>
      <seealso cref="T:Nez.VirtualButton.Node" />
    </member>
    <member name="T:Nez.VirtualButton.GamePadDPadDown">
      <summary>
   Class GamePadDPadDown.
   Implements the <see cref="T:Nez.VirtualButton.Node" /></summary>
      <seealso cref="T:Nez.VirtualButton.Node" />
    </member>
    <member name="T:Nez.VirtualButton.MouseLeftButton">
      <summary>
   Class MouseLeftButton.
   Implements the <see cref="T:Nez.VirtualButton.Node" /></summary>
      <seealso cref="T:Nez.VirtualButton.Node" />
    </member>
    <member name="T:Nez.VirtualButton.MouseRightButton">
      <summary>
   Class MouseRightButton.
   Implements the <see cref="T:Nez.VirtualButton.Node" /></summary>
      <seealso cref="T:Nez.VirtualButton.Node" />
    </member>
    <member name="T:Nez.VirtualButton.MouseMiddleButton">
      <summary>
   Class MouseMiddleButton.
   Implements the <see cref="T:Nez.VirtualButton.Node" /></summary>
      <seealso cref="T:Nez.VirtualButton.Node" />
    </member>
    <member name="T:Nez.VirtualButton.MouseFirstExtendedButton">
      <summary>
   Class MouseFirstExtendedButton.
   Implements the <see cref="T:Nez.VirtualButton.Node" /></summary>
      <seealso cref="T:Nez.VirtualButton.Node" />
    </member>
    <member name="T:Nez.VirtualButton.MouseSecondExtendedButton">
      <summary>
   Class MouseSecondExtendedButton.
   Implements the <see cref="T:Nez.VirtualButton.Node" /></summary>
      <seealso cref="T:Nez.VirtualButton.Node" />
    </member>
    <member name="F:Nez.VirtualButton.Nodes">
      <summary>
   The nodes
   </summary>
    </member>
    <member name="F:Nez.VirtualButton.BufferTime">
      <summary>
   The buffer time
   </summary>
    </member>
    <member name="F:Nez.VirtualButton.FirstRepeatTime">
      <summary>
   The first repeat time
   </summary>
    </member>
    <member name="F:Nez.VirtualButton.MultiRepeatTime">
      <summary>
   The multi repeat time
   </summary>
    </member>
    <member name="P:Nez.VirtualButton.IsRepeating">
      <summary>
   Gets a value indicating whether this instance is repeating.
   </summary>
      <value>
        <c>true</c> if this instance is repeating; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:Nez.VirtualButton.#ctor(System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualButton" /> class.
   </summary>
      <param name="bufferTime">The buffer time.</param>
    </member>
    <member name="M:Nez.VirtualButton.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualButton" /> class.
   </summary>
    </member>
    <member name="M:Nez.VirtualButton.#ctor(System.Single,Node[])">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualButton" /> class.
   </summary>
      <param name="bufferTime">The buffer time.</param>
      <param name="nodes">The nodes.</param>
    </member>
    <member name="M:Nez.VirtualButton.#ctor(Node[])">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualButton" /> class.
   </summary>
      <param name="nodes">The nodes.</param>
    </member>
    <member name="M:Nez.VirtualButton.SetRepeat(System.Single)">
      <summary>
   Sets the repeat.
   </summary>
      <param name="repeatTime">The repeat time.</param>
    </member>
    <member name="M:Nez.VirtualButton.SetRepeat(System.Single,System.Single)">
      <summary>
   Sets the repeat.
   </summary>
      <param name="firstRepeatTime">The first repeat time.</param>
      <param name="multiRepeatTime">The multi repeat time.</param>
    </member>
    <member name="M:Nez.VirtualButton.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="P:Nez.VirtualButton.IsDown">
      <summary>
   Gets a value indicating whether this instance is down.
   </summary>
      <value>
        <c>true</c> if this instance is down; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.IsPressed">
      <summary>
   Gets a value indicating whether this instance is pressed.
   </summary>
      <value>
        <c>true</c> if this instance is pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.IsReleased">
      <summary>
   Gets a value indicating whether this instance is released.
   </summary>
      <value>
        <c>true</c> if this instance is released; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:Nez.VirtualButton.ConsumeBuffer">
      <summary>
   Consumes the buffer.
   </summary>
    </member>
    <member name="M:Nez.VirtualButton.AddKeyboardKey(Keys)">
      <summary>
   adds a keyboard key to this VirtualButton
   </summary>
      <param name="key">Key.</param>
      <returns>The keyboard key.</returns>
    </member>
    <member name="M:Nez.VirtualButton.AddKeyboardKey(Keys,Keys)">
      <summary>
   adds a keyboard key with modifier to this VirtualButton. modifier must be in the down state for isPressed/isDown to be true.
   </summary>
      <param name="key">Key.</param>
      <param name="modifier">Modifier.</param>
      <returns>The keyboard key.</returns>
    </member>
    <member name="M:Nez.VirtualButton.AddGamePadButton(System.Int32,Buttons)">
      <summary>
   adds a GamePad buttons press to this VirtualButton
   </summary>
      <param name="gamepadIndex">Gamepad index.</param>
      <param name="button">Button.</param>
      <returns>The game pad button.</returns>
    </member>
    <member name="M:Nez.VirtualButton.AddGamePadLeftTrigger(System.Int32,System.Single)">
      <summary>
   adds a GamePad left trigger press to this VirtualButton
   </summary>
      <param name="gamepadIndex">Gamepad index.</param>
      <param name="threshold">Threshold.</param>
      <returns>The game pad left trigger.</returns>
    </member>
    <member name="M:Nez.VirtualButton.AddGamePadRightTrigger(System.Int32,System.Single)">
      <summary>
   adds a GamePad right trigger press to this VirtualButton
   </summary>
      <param name="gamepadIndex">Gamepad index.</param>
      <param name="threshold">Threshold.</param>
      <returns>The game pad right trigger.</returns>
    </member>
    <member name="M:Nez.VirtualButton.AddGamePadDPad(System.Int32,Direction)">
      <summary>
   adds a GamePad DPad press to this VirtualButton
   </summary>
      <param name="gamepadIndex">Gamepad index.</param>
      <param name="direction">Direction.</param>
      <returns>The game pad DP ad.</returns>
    </member>
    <member name="M:Nez.VirtualButton.AddMouseLeftButton">
      <summary>
   adds a left mouse click to this VirtualButton
   </summary>
      <returns>The mouse left button.</returns>
    </member>
    <member name="M:Nez.VirtualButton.AddMouseRightButton">
      <summary>
   adds a right mouse click to this VirtualButton
   </summary>
      <returns>The mouse right button.</returns>
    </member>
    <member name="M:Nez.VirtualButton.AddMouseMiddleButton">
      <summary>
   adds a right mouse click to this VirtualButton
   </summary>
      <returns>The mouse right button.</returns>
    </member>
    <member name="M:Nez.VirtualButton.AddMouseFirstExtendedButton">
      <summary>
   adds a right mouse click to this VirtualButton
   </summary>
      <returns>The mouse right button.</returns>
    </member>
    <member name="M:Nez.VirtualButton.AddMouseSecondExtendedButton">
      <summary>
   adds a right mouse click to this VirtualButton
   </summary>
      <returns>The mouse right button.</returns>
    </member>
    <member name="M:Nez.VirtualButton.op_Implicit(VirtualButton)~System.Boolean">
      <summary>
   Performs an implicit conversion from <see cref="T:Nez.VirtualButton" /> to <see cref="T:System.Boolean" />.
   </summary>
      <param name="button">The button.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="P:Nez.VirtualButton.Node.IsDown">
      <summary>
   Gets a value indicating whether this instance is down.
   </summary>
      <value>
        <c>true</c> if this instance is down; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.Node.IsPressed">
      <summary>
   Gets a value indicating whether this instance is pressed.
   </summary>
      <value>
        <c>true</c> if this instance is pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.Node.IsReleased">
      <summary>
   Gets a value indicating whether this instance is released.
   </summary>
      <value>
        <c>true</c> if this instance is released; otherwise, <c>false</c>.</value>
    </member>
    <member name="F:Nez.VirtualButton.KeyboardKey.Key">
      <summary>
   The key
   </summary>
    </member>
    <member name="M:Nez.VirtualButton.KeyboardKey.#ctor(Keys)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualButton.KeyboardKey" /> class.
   </summary>
      <param name="key">The key.</param>
    </member>
    <member name="P:Nez.VirtualButton.KeyboardKey.IsDown">
      <summary>
   Gets a value indicating whether this instance is down.
   </summary>
      <value>
        <c>true</c> if this instance is down; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.KeyboardKey.IsPressed">
      <summary>
   Gets a value indicating whether this instance is pressed.
   </summary>
      <value>
        <c>true</c> if this instance is pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.KeyboardKey.IsReleased">
      <summary>
   Gets a value indicating whether this instance is released.
   </summary>
      <value>
        <c>true</c> if this instance is released; otherwise, <c>false</c>.</value>
    </member>
    <member name="F:Nez.VirtualButton.KeyboardModifiedKey.Key">
      <summary>
   The key
   </summary>
    </member>
    <member name="F:Nez.VirtualButton.KeyboardModifiedKey.Modifier">
      <summary>
   The modifier
   </summary>
    </member>
    <member name="M:Nez.VirtualButton.KeyboardModifiedKey.#ctor(Keys,Keys)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualButton.KeyboardModifiedKey" /> class.
   </summary>
      <param name="key">The key.</param>
      <param name="modifier">The modifier.</param>
    </member>
    <member name="P:Nez.VirtualButton.KeyboardModifiedKey.IsDown">
      <summary>
   Gets a value indicating whether this instance is down.
   </summary>
      <value>
        <c>true</c> if this instance is down; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.KeyboardModifiedKey.IsPressed">
      <summary>
   Gets a value indicating whether this instance is pressed.
   </summary>
      <value>
        <c>true</c> if this instance is pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.KeyboardModifiedKey.IsReleased">
      <summary>
   Gets a value indicating whether this instance is released.
   </summary>
      <value>
        <c>true</c> if this instance is released; otherwise, <c>false</c>.</value>
    </member>
    <member name="F:Nez.VirtualButton.GamePadButton.GamepadIndex">
      <summary>
   The gamepad index
   </summary>
    </member>
    <member name="F:Nez.VirtualButton.GamePadButton.Button">
      <summary>
   The button
   </summary>
    </member>
    <member name="M:Nez.VirtualButton.GamePadButton.#ctor(System.Int32,Buttons)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualButton.GamePadButton" /> class.
   </summary>
      <param name="gamepadIndex">Index of the gamepad.</param>
      <param name="button">The button.</param>
    </member>
    <member name="P:Nez.VirtualButton.GamePadButton.IsDown">
      <summary>
   Gets a value indicating whether this instance is down.
   </summary>
      <value>
        <c>true</c> if this instance is down; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.GamePadButton.IsPressed">
      <summary>
   Gets a value indicating whether this instance is pressed.
   </summary>
      <value>
        <c>true</c> if this instance is pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.GamePadButton.IsReleased">
      <summary>
   Gets a value indicating whether this instance is released.
   </summary>
      <value>
        <c>true</c> if this instance is released; otherwise, <c>false</c>.</value>
    </member>
    <member name="F:Nez.VirtualButton.GamePadLeftTrigger.GamepadIndex">
      <summary>
   The gamepad index
   </summary>
    </member>
    <member name="F:Nez.VirtualButton.GamePadLeftTrigger.Threshold">
      <summary>
   The threshold
   </summary>
    </member>
    <member name="M:Nez.VirtualButton.GamePadLeftTrigger.#ctor(System.Int32,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualButton.GamePadLeftTrigger" /> class.
   </summary>
      <param name="gamepadIndex">Index of the gamepad.</param>
      <param name="threshold">The threshold.</param>
    </member>
    <member name="P:Nez.VirtualButton.GamePadLeftTrigger.IsDown">
      <summary>
   Gets a value indicating whether this instance is down.
   </summary>
      <value>
        <c>true</c> if this instance is down; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.GamePadLeftTrigger.IsPressed">
      <summary>
   Gets a value indicating whether this instance is pressed.
   </summary>
      <value>
        <c>true</c> if this instance is pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.GamePadLeftTrigger.IsReleased">
      <summary>
   Gets a value indicating whether this instance is released.
   </summary>
      <value>
        <c>true</c> if this instance is released; otherwise, <c>false</c>.</value>
    </member>
    <member name="F:Nez.VirtualButton.GamePadRightTrigger.GamepadIndex">
      <summary>
   The gamepad index
   </summary>
    </member>
    <member name="F:Nez.VirtualButton.GamePadRightTrigger.Threshold">
      <summary>
   The threshold
   </summary>
    </member>
    <member name="M:Nez.VirtualButton.GamePadRightTrigger.#ctor(System.Int32,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualButton.GamePadRightTrigger" /> class.
   </summary>
      <param name="gamepadIndex">Index of the gamepad.</param>
      <param name="threshold">The threshold.</param>
    </member>
    <member name="P:Nez.VirtualButton.GamePadRightTrigger.IsDown">
      <summary>
   Gets a value indicating whether this instance is down.
   </summary>
      <value>
        <c>true</c> if this instance is down; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.GamePadRightTrigger.IsPressed">
      <summary>
   Gets a value indicating whether this instance is pressed.
   </summary>
      <value>
        <c>true</c> if this instance is pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.GamePadRightTrigger.IsReleased">
      <summary>
   Gets a value indicating whether this instance is released.
   </summary>
      <value>
        <c>true</c> if this instance is released; otherwise, <c>false</c>.</value>
    </member>
    <member name="F:Nez.VirtualButton.GamePadDPadRight.GamepadIndex">
      <summary>
   The gamepad index
   </summary>
    </member>
    <member name="M:Nez.VirtualButton.GamePadDPadRight.#ctor(System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualButton.GamePadDPadRight" /> class.
   </summary>
      <param name="gamepadIndex">Index of the gamepad.</param>
    </member>
    <member name="P:Nez.VirtualButton.GamePadDPadRight.IsDown">
      <summary>
   Gets a value indicating whether this instance is down.
   </summary>
      <value>
        <c>true</c> if this instance is down; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.GamePadDPadRight.IsPressed">
      <summary>
   Gets a value indicating whether this instance is pressed.
   </summary>
      <value>
        <c>true</c> if this instance is pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.GamePadDPadRight.IsReleased">
      <summary>
   Gets a value indicating whether this instance is released.
   </summary>
      <value>
        <c>true</c> if this instance is released; otherwise, <c>false</c>.</value>
    </member>
    <member name="F:Nez.VirtualButton.GamePadDPadLeft.GamepadIndex">
      <summary>
   The gamepad index
   </summary>
    </member>
    <member name="M:Nez.VirtualButton.GamePadDPadLeft.#ctor(System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualButton.GamePadDPadLeft" /> class.
   </summary>
      <param name="gamepadIndex">Index of the gamepad.</param>
    </member>
    <member name="P:Nez.VirtualButton.GamePadDPadLeft.IsDown">
      <summary>
   Gets a value indicating whether this instance is down.
   </summary>
      <value>
        <c>true</c> if this instance is down; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.GamePadDPadLeft.IsPressed">
      <summary>
   Gets a value indicating whether this instance is pressed.
   </summary>
      <value>
        <c>true</c> if this instance is pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.GamePadDPadLeft.IsReleased">
      <summary>
   Gets a value indicating whether this instance is released.
   </summary>
      <value>
        <c>true</c> if this instance is released; otherwise, <c>false</c>.</value>
    </member>
    <member name="F:Nez.VirtualButton.GamePadDPadUp.GamepadIndex">
      <summary>
   The gamepad index
   </summary>
    </member>
    <member name="M:Nez.VirtualButton.GamePadDPadUp.#ctor(System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualButton.GamePadDPadUp" /> class.
   </summary>
      <param name="gamepadIndex">Index of the gamepad.</param>
    </member>
    <member name="P:Nez.VirtualButton.GamePadDPadUp.IsDown">
      <summary>
   Gets a value indicating whether this instance is down.
   </summary>
      <value>
        <c>true</c> if this instance is down; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.GamePadDPadUp.IsPressed">
      <summary>
   Gets a value indicating whether this instance is pressed.
   </summary>
      <value>
        <c>true</c> if this instance is pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.GamePadDPadUp.IsReleased">
      <summary>
   Gets a value indicating whether this instance is released.
   </summary>
      <value>
        <c>true</c> if this instance is released; otherwise, <c>false</c>.</value>
    </member>
    <member name="F:Nez.VirtualButton.GamePadDPadDown.GamepadIndex">
      <summary>
   The gamepad index
   </summary>
    </member>
    <member name="M:Nez.VirtualButton.GamePadDPadDown.#ctor(System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualButton.GamePadDPadDown" /> class.
   </summary>
      <param name="gamepadIndex">Index of the gamepad.</param>
    </member>
    <member name="P:Nez.VirtualButton.GamePadDPadDown.IsDown">
      <summary>
   Gets a value indicating whether this instance is down.
   </summary>
      <value>
        <c>true</c> if this instance is down; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.GamePadDPadDown.IsPressed">
      <summary>
   Gets a value indicating whether this instance is pressed.
   </summary>
      <value>
        <c>true</c> if this instance is pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.GamePadDPadDown.IsReleased">
      <summary>
   Gets a value indicating whether this instance is released.
   </summary>
      <value>
        <c>true</c> if this instance is released; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.MouseLeftButton.IsDown">
      <summary>
   Gets a value indicating whether this instance is down.
   </summary>
      <value>
        <c>true</c> if this instance is down; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.MouseLeftButton.IsPressed">
      <summary>
   Gets a value indicating whether this instance is pressed.
   </summary>
      <value>
        <c>true</c> if this instance is pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.MouseLeftButton.IsReleased">
      <summary>
   Gets a value indicating whether this instance is released.
   </summary>
      <value>
        <c>true</c> if this instance is released; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.MouseRightButton.IsDown">
      <summary>
   Gets a value indicating whether this instance is down.
   </summary>
      <value>
        <c>true</c> if this instance is down; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.MouseRightButton.IsPressed">
      <summary>
   Gets a value indicating whether this instance is pressed.
   </summary>
      <value>
        <c>true</c> if this instance is pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.MouseRightButton.IsReleased">
      <summary>
   Gets a value indicating whether this instance is released.
   </summary>
      <value>
        <c>true</c> if this instance is released; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.MouseMiddleButton.IsDown">
      <summary>
   Gets a value indicating whether this instance is down.
   </summary>
      <value>
        <c>true</c> if this instance is down; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.MouseMiddleButton.IsPressed">
      <summary>
   Gets a value indicating whether this instance is pressed.
   </summary>
      <value>
        <c>true</c> if this instance is pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.MouseMiddleButton.IsReleased">
      <summary>
   Gets a value indicating whether this instance is released.
   </summary>
      <value>
        <c>true</c> if this instance is released; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.MouseFirstExtendedButton.IsDown">
      <summary>
   Gets a value indicating whether this instance is down.
   </summary>
      <value>
        <c>true</c> if this instance is down; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.MouseFirstExtendedButton.IsPressed">
      <summary>
   Gets a value indicating whether this instance is pressed.
   </summary>
      <value>
        <c>true</c> if this instance is pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.MouseFirstExtendedButton.IsReleased">
      <summary>
   Gets a value indicating whether this instance is released.
   </summary>
      <value>
        <c>true</c> if this instance is released; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.MouseSecondExtendedButton.IsDown">
      <summary>
   Gets a value indicating whether this instance is down.
   </summary>
      <value>
        <c>true</c> if this instance is down; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.MouseSecondExtendedButton.IsPressed">
      <summary>
   Gets a value indicating whether this instance is pressed.
   </summary>
      <value>
        <c>true</c> if this instance is pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualButton.MouseSecondExtendedButton.IsReleased">
      <summary>
   Gets a value indicating whether this instance is released.
   </summary>
      <value>
        <c>true</c> if this instance is released; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Nez.VirtualInput">
      <summary>
   Represents a virtual button, axis or joystick whose state is determined by the state of its VirtualInputNodes
   </summary>
    </member>
    <member name="T:Nez.VirtualInput.OverlapBehavior">
      <summary>
   Enum OverlapBehavior
   </summary>
    </member>
    <member name="T:Nez.VirtualInputNode">
      <summary>
   Add these to your VirtualInput to define how it determines its current input state.
   For example, if you want to check whether a keyboard key is pressed, create a VirtualButton and add to it a VirtualButton.KeyboardKey
   </summary>
    </member>
    <member name="F:Nez.VirtualInput.OverlapBehavior.CancelOut">
      <summary>
   duplicate input will result in canceling each other out and no input will be recorded. Example: press left arrow key and while
   holding it down press right arrow. This will result in canceling each other out.
   </summary>
    </member>
    <member name="F:Nez.VirtualInput.OverlapBehavior.TakeOlder">
      <summary>
   the first input found will be used
   </summary>
    </member>
    <member name="F:Nez.VirtualInput.OverlapBehavior.TakeNewer">
      <summary>
   the last input found will be used
   </summary>
    </member>
    <member name="M:Nez.VirtualInput.Deregister">
      <summary>
   deregisters the VirtualInput from the Input system. Call this when you are done polling the VirtualInput
   </summary>
    </member>
    <member name="M:Nez.VirtualInput.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="M:Nez.VirtualInputNode.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="T:Nez.VirtualIntegerAxis">
      <summary>
   A virtual input that is represented as a int that is either -1, 0, or 1. It corresponds to input that can range from on to nuetral to off
   such as GamePad DPad left/right. Can also use two keyboard Keys as the positive/negative checks.
   </summary>
    </member>
    <member name="F:Nez.VirtualIntegerAxis.Nodes">
      <summary>
   The nodes
   </summary>
    </member>
    <member name="F:Nez.VirtualIntegerAxis.FirstRepeatTime">
      <summary>
   The first repeat time
   </summary>
    </member>
    <member name="F:Nez.VirtualIntegerAxis.MultiRepeatTime">
      <summary>
   The multi repeat time
   </summary>
    </member>
    <member name="P:Nez.VirtualIntegerAxis.IsRepeating">
      <summary>
   Gets a value indicating whether this instance is repeating.
   </summary>
      <value>
        <c>true</c> if this instance is repeating; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.VirtualIntegerAxis.Value">
      <summary>
   Gets the value.
   </summary>
      <value>The value.</value>
    </member>
    <member name="P:Nez.VirtualIntegerAxis.DirectionJustPushed">
      <summary>
   The direction that this axis was pushed (or repeated, if repeating is enabled) this frame.
   </summary>
      <value>-1 or 1 if it was just pushed in that direction, or 0 if it was not.</value>
    </member>
    <member name="M:Nez.VirtualIntegerAxis.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualIntegerAxis" /> class.
   </summary>
    </member>
    <member name="M:Nez.VirtualIntegerAxis.#ctor(VirtualAxis.Node[])">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualIntegerAxis" /> class.
   </summary>
      <param name="nodes">The nodes.</param>
    </member>
    <member name="M:Nez.VirtualIntegerAxis.JustPushed(System.Int32)">
      <summary>
   Returns true if this input was pushed in a direction (from 0) this frame. If SetRepeat() is used, this will
   repeatedly return true after the provided intervals.
   </summary>
      <param name="direction">The direction to check, should be -1 or 1.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.VirtualIntegerAxis.SetRepeat(System.Single)">
      <summary>
   Set the repeat interval used for JustPushed().
   </summary>
      <param name="repeatTime">Interval between repetitions.</param>
    </member>
    <member name="M:Nez.VirtualIntegerAxis.SetRepeat(System.Single,System.Single)">
      <summary>
   Set the repeat interval used for JustPushed().
   </summary>
      <param name="firstRepeatTime">Delay after the initial push.</param>
      <param name="multiRepeatTime">Delay after subsequent repetitions.</param>
    </member>
    <member name="M:Nez.VirtualIntegerAxis.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="M:Nez.VirtualIntegerAxis.AddGamePadLeftStickX(System.Int32,System.Single)">
      <summary>
   adds GamePad left stick X to this VirtualInput
   </summary>
      <param name="gamepadIndex">Gamepad index.</param>
      <param name="deadzone">Deadzone.</param>
      <returns>The game pad left stick x.</returns>
    </member>
    <member name="M:Nez.VirtualIntegerAxis.AddGamePadLeftStickY(System.Int32,System.Single)">
      <summary>
   adds GamePad left stick Y to this VirtualInput
   </summary>
      <param name="gamepadIndex">Gamepad index.</param>
      <param name="deadzone">Deadzone.</param>
      <returns>The game pad left stick y.</returns>
    </member>
    <member name="M:Nez.VirtualIntegerAxis.AddGamePadRightStickX(System.Int32,System.Single)">
      <summary>
   adds GamePad right stick X to this VirtualInput
   </summary>
      <param name="gamepadIndex">Gamepad index.</param>
      <param name="deadzone">Deadzone.</param>
      <returns>The game pad right stick x.</returns>
    </member>
    <member name="M:Nez.VirtualIntegerAxis.AddGamePadRightStickY(System.Int32,System.Single)">
      <summary>
   adds GamePad right stick Y to this VirtualInput
   </summary>
      <param name="gamepadIndex">Gamepad index.</param>
      <param name="deadzone">Deadzone.</param>
      <returns>The game pad right stick y.</returns>
    </member>
    <member name="M:Nez.VirtualIntegerAxis.AddGamePadDPadUpDown(System.Int32)">
      <summary>
   adds GamePad DPad up/down to this VirtualInput
   </summary>
      <param name="gamepadIndex">Gamepad index.</param>
      <returns>The game pad DP ad up down.</returns>
    </member>
    <member name="M:Nez.VirtualIntegerAxis.AddGamePadDPadLeftRight(System.Int32)">
      <summary>
   adds GamePad DPad left/right to this VirtualInput
   </summary>
      <param name="gamepadIndex">Gamepad index.</param>
      <returns>The game pad DP ad left right.</returns>
    </member>
    <member name="M:Nez.VirtualIntegerAxis.AddKeyboardKeys(OverlapBehavior,Keys,Keys)">
      <summary>
   adds keyboard Keys to emulate left/right or up/down to this VirtualInput
   </summary>
      <param name="overlapBehavior">Overlap behavior.</param>
      <param name="negative">Negative.</param>
      <param name="positive">Positive.</param>
      <returns>The keyboard keys.</returns>
    </member>
    <member name="M:Nez.VirtualIntegerAxis.op_Implicit(VirtualIntegerAxis)~System.Int32">
      <summary>
   Performs an implicit conversion from <see cref="T:Nez.VirtualIntegerAxis" /> to <see cref="T:System.Int32" />.
   </summary>
      <param name="axis">The axis.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="T:Nez.VirtualJoystick">
      <summary>
   A virtual input that is represented as a Vector2, with both X and Y as values between -1 and 1
   </summary>
    </member>
    <member name="T:Nez.VirtualJoystick.Node">
      <summary>
   Class Node.
   Implements the <see cref="T:Nez.VirtualInputNode" /></summary>
      <seealso cref="T:Nez.VirtualInputNode" />
    </member>
    <member name="T:Nez.VirtualJoystick.GamePadLeftStick">
      <summary>
   Class GamePadLeftStick.
   Implements the <see cref="T:Nez.VirtualJoystick.Node" /></summary>
      <seealso cref="T:Nez.VirtualJoystick.Node" />
    </member>
    <member name="T:Nez.VirtualJoystick.GamePadRightStick">
      <summary>
   Class GamePadRightStick.
   Implements the <see cref="T:Nez.VirtualJoystick.Node" /></summary>
      <seealso cref="T:Nez.VirtualJoystick.Node" />
    </member>
    <member name="T:Nez.VirtualJoystick.GamePadDpad">
      <summary>
   Class GamePadDpad.
   Implements the <see cref="T:Nez.VirtualJoystick.Node" /></summary>
      <seealso cref="T:Nez.VirtualJoystick.Node" />
    </member>
    <member name="T:Nez.VirtualJoystick.KeyboardKeys">
      <summary>
   Class KeyboardKeys.
   Implements the <see cref="T:Nez.VirtualJoystick.Node" /></summary>
      <seealso cref="T:Nez.VirtualJoystick.Node" />
    </member>
    <member name="F:Nez.VirtualJoystick.Nodes">
      <summary>
   The nodes
   </summary>
    </member>
    <member name="F:Nez.VirtualJoystick.Normalized">
      <summary>
   The normalized
   </summary>
    </member>
    <member name="P:Nez.VirtualJoystick.Value">
      <summary>
   Gets the value.
   </summary>
      <value>The value.</value>
    </member>
    <member name="M:Nez.VirtualJoystick.#ctor(System.Boolean)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualJoystick" /> class.
   </summary>
      <param name="normalized">if set to <c>true</c> [normalized].</param>
    </member>
    <member name="M:Nez.VirtualJoystick.#ctor(System.Boolean,Node[])">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualJoystick" /> class.
   </summary>
      <param name="normalized">if set to <c>true</c> [normalized].</param>
      <param name="nodes">The nodes.</param>
    </member>
    <member name="M:Nez.VirtualJoystick.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="M:Nez.VirtualJoystick.AddGamePadLeftStick(System.Int32,System.Single)">
      <summary>
   adds GamePad left stick input to this VirtualJoystick
   </summary>
      <param name="gamepadIndex">Gamepad index.</param>
      <param name="deadzone">Deadzone.</param>
      <returns>The game pad left stick.</returns>
    </member>
    <member name="M:Nez.VirtualJoystick.AddGamePadRightStick(System.Int32,System.Single)">
      <summary>
   adds GamePad right stick input to this VirtualJoystick
   </summary>
      <param name="gamepadIndex">Gamepad index.</param>
      <param name="deadzone">Deadzone.</param>
      <returns>The game pad right stick.</returns>
    </member>
    <member name="M:Nez.VirtualJoystick.AddGamePadDPad(System.Int32)">
      <summary>
   adds GamePad DPad input to this VirtualJoystick
   </summary>
      <param name="gamepadIndex">Gamepad index.</param>
      <returns>The game pad DP ad.</returns>
    </member>
    <member name="M:Nez.VirtualJoystick.AddKeyboardKeys(OverlapBehavior,Keys,Keys,Keys,Keys)">
      <summary>
   adds keyboard keys input to this VirtualJoystick. Four keyboard keys will emulate left/right/up/down. For example WASD or the arrow
   keys.
   </summary>
      <param name="overlapBehavior">Overlap behavior.</param>
      <param name="left">Left.</param>
      <param name="right">Right.</param>
      <param name="up">Up.</param>
      <param name="down">Down.</param>
      <returns>The keyboard keys.</returns>
    </member>
    <member name="M:Nez.VirtualJoystick.op_Implicit(VirtualJoystick)~Vector2">
      <summary>
   Performs an implicit conversion from <see cref="T:Nez.VirtualJoystick" /> to <see cref="T:Microsoft.Xna.Framework.Vector2" />.
   </summary>
      <param name="joystick">The joystick.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="P:Nez.VirtualJoystick.Node.Value">
      <summary>
   Gets the value.
   </summary>
      <value>The value.</value>
    </member>
    <member name="F:Nez.VirtualJoystick.GamePadLeftStick.GamepadIndex">
      <summary>
   The gamepad index
   </summary>
    </member>
    <member name="F:Nez.VirtualJoystick.GamePadLeftStick.Deadzone">
      <summary>
   The deadzone
   </summary>
    </member>
    <member name="M:Nez.VirtualJoystick.GamePadLeftStick.#ctor(System.Int32,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualJoystick.GamePadLeftStick" /> class.
   </summary>
      <param name="gamepadIndex">Index of the gamepad.</param>
      <param name="deadzone">The deadzone.</param>
    </member>
    <member name="P:Nez.VirtualJoystick.GamePadLeftStick.Value">
      <summary>
   Gets the value.
   </summary>
      <value>The value.</value>
    </member>
    <member name="F:Nez.VirtualJoystick.GamePadRightStick.GamepadIndex">
      <summary>
   The gamepad index
   </summary>
    </member>
    <member name="F:Nez.VirtualJoystick.GamePadRightStick.Deadzone">
      <summary>
   The deadzone
   </summary>
    </member>
    <member name="M:Nez.VirtualJoystick.GamePadRightStick.#ctor(System.Int32,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualJoystick.GamePadRightStick" /> class.
   </summary>
      <param name="gamepadIndex">Index of the gamepad.</param>
      <param name="deadzone">The deadzone.</param>
    </member>
    <member name="P:Nez.VirtualJoystick.GamePadRightStick.Value">
      <summary>
   Gets the value.
   </summary>
      <value>The value.</value>
    </member>
    <member name="F:Nez.VirtualJoystick.GamePadDpad.GamepadIndex">
      <summary>
   The gamepad index
   </summary>
    </member>
    <member name="M:Nez.VirtualJoystick.GamePadDpad.#ctor(System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualJoystick.GamePadDpad" /> class.
   </summary>
      <param name="gamepadIndex">Index of the gamepad.</param>
    </member>
    <member name="P:Nez.VirtualJoystick.GamePadDpad.Value">
      <summary>
   Gets the value.
   </summary>
      <value>The value.</value>
    </member>
    <member name="F:Nez.VirtualJoystick.KeyboardKeys.OverlapBehavior">
      <summary>
   The overlap behavior
   </summary>
    </member>
    <member name="F:Nez.VirtualJoystick.KeyboardKeys.Left">
      <summary>
   The left
   </summary>
    </member>
    <member name="F:Nez.VirtualJoystick.KeyboardKeys.Right">
      <summary>
   The right
   </summary>
    </member>
    <member name="F:Nez.VirtualJoystick.KeyboardKeys.Up">
      <summary>
   Up
   </summary>
    </member>
    <member name="F:Nez.VirtualJoystick.KeyboardKeys.Down">
      <summary>
   Down
   </summary>
    </member>
    <member name="M:Nez.VirtualJoystick.KeyboardKeys.#ctor(OverlapBehavior,Keys,Keys,Keys,Keys)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.VirtualJoystick.KeyboardKeys" /> class.
   </summary>
      <param name="overlapBehavior">The overlap behavior.</param>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <param name="up">Up.</param>
      <param name="down">Down.</param>
    </member>
    <member name="M:Nez.VirtualJoystick.KeyboardKeys.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="P:Nez.VirtualJoystick.KeyboardKeys.Value">
      <summary>
   Gets the value.
   </summary>
      <value>The value.</value>
    </member>
    <member name="T:Nez.Clipboard">
      <summary>
   prep for a proper multi-platform clipboard system. For now it just mocks the clipboard and will only work in-app
   </summary>
    </member>
    <member name="M:Nez.Clipboard.UTF8_ToManaged(IntPtr,System.Boolean)">
      <summary>
   Uts the f8 to managed.
   </summary>
      <param name="s">The s.</param>
      <param name="freePtr">if set to <c>true</c> [free PTR].</param>
      <returns>System.String.</returns>
    </member>
    <member name="M:Nez.Clipboard.GetContents">
      <summary>
   Gets the contents.
   </summary>
      <returns>System.String.</returns>
    </member>
    <member name="M:Nez.Clipboard.SetContents(System.String)">
      <summary>
   Sets the contents.
   </summary>
      <param name="text">The text.</param>
    </member>
    <member name="T:Nez.GamePadData">
      <summary>
   Class GamePadData.
   </summary>
    </member>
    <member name="F:Nez.GamePadData.IsLeftStickVerticalInverted">
      <summary>
   toggles inverting the left sticks vertical value
   </summary>
    </member>
    <member name="F:Nez.GamePadData.IsRightStickVerticalInverted">
      <summary>
   toggles inverting the right sticks vertical value
   </summary>
    </member>
    <member name="F:Nez.GamePadData.DeadZone">
      <summary>
   The dead zone
   </summary>
    </member>
    <member name="M:Nez.GamePadData.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="M:Nez.GamePadData.SetVibration(System.Single,System.Single,System.Single)">
      <summary>
   Sets the vibration.
   </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <param name="duration">The duration.</param>
    </member>
    <member name="M:Nez.GamePadData.StopVibration">
      <summary>
   Stops the vibration.
   </summary>
    </member>
    <member name="M:Nez.GamePadData.IsConnected">
      <summary>
   returns true if this game pad is connected
   </summary>
      <returns>
        <c>true</c>, if connected was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.GamePadData.IsButtonPressed(Buttons)">
      <summary>
   only true if down this frame
   </summary>
      <param name="button">Button.</param>
      <returns>
        <c>true</c>, if button pressed was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.GamePadData.IsButtonDown(Buttons)">
      <summary>
   true the entire time the button is down
   </summary>
      <param name="button">Button.</param>
      <returns>
        <c>true</c>, if button down was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.GamePadData.IsButtonReleased(Buttons)">
      <summary>
   true only the frame the button is released
   </summary>
      <param name="button">Button.</param>
      <returns>
        <c>true</c>, if button released was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.GamePadData.GetLeftStick">
      <summary>
   Gets the left stick.
   </summary>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.GamePadData.GetLeftStick(System.Single)">
      <summary>
   Gets the left stick.
   </summary>
      <param name="deadzone">The deadzone.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.GamePadData.GetRightStick">
      <summary>
   Gets the right stick.
   </summary>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.GamePadData.GetRightStick(System.Single)">
      <summary>
   Gets the right stick.
   </summary>
      <param name="deadzone">The deadzone.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.GamePadData.IsLeftStickLeft(System.Single)">
      <summary>
   Determines whether [is left stick left] [the specified deadzone].
   </summary>
      <param name="deadzone">The deadzone.</param>
      <returns>
        <c>true</c> if [is left stick left] [the specified deadzone]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.GamePadData.IsLeftStickLeftPressed(System.Single)">
      <summary>
   true only the frame the stick passes the deadzone in the direction
   </summary>
      <param name="deadzone">Deadzone.</param>
      <returns>
        <c>true</c>, if left stick left pressed was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.GamePadData.IsLeftStickRight(System.Single)">
      <summary>
   Determines whether [is left stick right] [the specified deadzone].
   </summary>
      <param name="deadzone">The deadzone.</param>
      <returns>
        <c>true</c> if [is left stick right] [the specified deadzone]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.GamePadData.IsLeftStickRightPressed(System.Single)">
      <summary>
   true only the frame the stick passes the deadzone in the direction
   </summary>
      <param name="deadzone">Deadzone.</param>
      <returns>
        <c>true</c>, if left stick right pressed was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.GamePadData.IsLeftStickUp(System.Single)">
      <summary>
   Determines whether [is left stick up] [the specified deadzone].
   </summary>
      <param name="deadzone">The deadzone.</param>
      <returns>
        <c>true</c> if [is left stick up] [the specified deadzone]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.GamePadData.IsLeftStickUpPressed(System.Single)">
      <summary>
   true only the frame the stick passes the deadzone in the direction
   </summary>
      <param name="deadzone">Deadzone.</param>
      <returns>
        <c>true</c>, if left stick up pressed was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.GamePadData.IsLeftStickDown(System.Single)">
      <summary>
   Determines whether [is left stick down] [the specified deadzone].
   </summary>
      <param name="deadzone">The deadzone.</param>
      <returns>
        <c>true</c> if [is left stick down] [the specified deadzone]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.GamePadData.IsLeftStickDownPressed(System.Single)">
      <summary>
   true only the frame the stick passes the deadzone in the direction
   </summary>
      <param name="deadzone">Deadzone.</param>
      <returns>
        <c>true</c>, if left stick down pressed was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.GamePadData.IsRightStickLeft(System.Single)">
      <summary>
   Determines whether [is right stick left] [the specified deadzone].
   </summary>
      <param name="deadzone">The deadzone.</param>
      <returns>
        <c>true</c> if [is right stick left] [the specified deadzone]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.GamePadData.IsRightStickRight(System.Single)">
      <summary>
   Determines whether [is right stick right] [the specified deadzone].
   </summary>
      <param name="deadzone">The deadzone.</param>
      <returns>
        <c>true</c> if [is right stick right] [the specified deadzone]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.GamePadData.IsRightStickUp(System.Single)">
      <summary>
   Determines whether [is right stick up] [the specified deadzone].
   </summary>
      <param name="deadzone">The deadzone.</param>
      <returns>
        <c>true</c> if [is right stick up] [the specified deadzone]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.GamePadData.IsRightStickDown(System.Single)">
      <summary>
   Determines whether [is right stick down] [the specified deadzone].
   </summary>
      <param name="deadzone">The deadzone.</param>
      <returns>
        <c>true</c> if [is right stick down] [the specified deadzone]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:Nez.GamePadData.DpadLeftDown">
      <summary>
   true the entire time the dpad is down
   </summary>
      <value>
        <c>true</c> if dpad left down; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.GamePadData.DpadLeftPressed">
      <summary>
   true only the first frame the dpad is down
   </summary>
      <value>
        <c>true</c> if dpad left pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.GamePadData.DpadLeftReleased">
      <summary>
   true only the frame the dpad is released
   </summary>
      <value>
        <c>true</c> if dpad left released; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.GamePadData.DpadRightDown">
      <summary>
   true the entire time the dpad is down
   </summary>
      <value>
        <c>true</c> if dpad left down; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.GamePadData.DpadRightPressed">
      <summary>
   true only the first frame the dpad is down
   </summary>
      <value>
        <c>true</c> if dpad left pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.GamePadData.DpadRightReleased">
      <summary>
   true only the frame the dpad is released
   </summary>
      <value>
        <c>true</c> if dpad left released; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.GamePadData.DpadUpDown">
      <summary>
   true the entire time the dpad is down
   </summary>
      <value>
        <c>true</c> if dpad left down; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.GamePadData.DpadUpPressed">
      <summary>
   true only the first frame the dpad is down
   </summary>
      <value>
        <c>true</c> if dpad left pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.GamePadData.DpadUpReleased">
      <summary>
   true only the frame the dpad is released
   </summary>
      <value>
        <c>true</c> if dpad left released; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.GamePadData.DpadDownDown">
      <summary>
   true the entire time the dpad is down
   </summary>
      <value>
        <c>true</c> if dpad left down; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.GamePadData.DpadDownPressed">
      <summary>
   true only the first frame the dpad is down
   </summary>
      <value>
        <c>true</c> if dpad left pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.GamePadData.DpadDownReleased">
      <summary>
   true only the frame the dpad is released
   </summary>
      <value>
        <c>true</c> if dpad left released; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:Nez.GamePadData.GetLeftTriggerRaw">
      <summary>
   Gets the left trigger raw.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.GamePadData.GetRightTriggerRaw">
      <summary>
   Gets the right trigger raw.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.GamePadData.IsLeftTriggerDown(System.Single)">
      <summary>
   true whenever the trigger is down past the threshold
   </summary>
      <param name="threshold">Threshold.</param>
      <returns>
        <c>true</c>, if left trigger down was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.GamePadData.IsLeftTriggerPressed(System.Single)">
      <summary>
   true only the frame that the trigger passed the threshold
   </summary>
      <param name="threshold">Threshold.</param>
      <returns>
        <c>true</c>, if left trigger pressed was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.GamePadData.IsLeftTriggerReleased(System.Single)">
      <summary>
   true the frame the trigger is released
   </summary>
      <param name="threshold">Threshold.</param>
      <returns>
        <c>true</c>, if left trigger released was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.GamePadData.IsRightTriggerDown(System.Single)">
      <summary>
   true whenever the trigger is down past the threshold
   </summary>
      <param name="threshold">Threshold.</param>
      <returns>
        <c>true</c>, if left trigger down was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.GamePadData.IsRightTriggerPressed(System.Single)">
      <summary>
   true only the frame that the trigger passed the threshold
   </summary>
      <param name="threshold">Threshold.</param>
      <returns>
        <c>true</c>, if left trigger pressed was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.GamePadData.IsRightTriggerReleased(System.Single)">
      <summary>
   true the frame the trigger is released
   </summary>
      <param name="threshold">Threshold.</param>
      <returns>
        <c>true</c>, if left trigger released was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="T:Nez.IClipboard">
      <summary>
   Interface IClipboard
   </summary>
    </member>
    <member name="M:Nez.IClipboard.GetContents">
      <summary>
   Gets the contents.
   </summary>
      <returns>System.String.</returns>
    </member>
    <member name="M:Nez.IClipboard.SetContents(System.String)">
      <summary>
   Sets the contents.
   </summary>
      <param name="text">The text.</param>
    </member>
    <member name="T:Nez.Input">
      <summary>
   Class Input.
   </summary>
    </member>
    <member name="T:Nez.InputEventType">
      <summary>
   Enum InputEventType
   </summary>
    </member>
    <member name="T:Nez.InputEvent">
      <summary>
   Struct InputEvent
   </summary>
    </member>
    <member name="T:Nez.InputEventTypeComparer">
      <summary>
   comparer that should be passed to a dictionary constructor to avoid boxing/unboxing when using an enum as a key
   on Mono
   </summary>
    </member>
    <member name="F:Nez.Input.Emitter">
      <summary>
   The emitter
   </summary>
    </member>
    <member name="F:Nez.Input.GamePads">
      <summary>
   The game pads
   </summary>
    </member>
    <member name="F:Nez.Input.DEFAULT_DEADZONE">
      <summary>
   The default deadzone
   </summary>
    </member>
    <member name="F:Nez.Input.Touch">
      <summary>
   the TouchInput details when on a device that supports touch
   </summary>
    </member>
    <member name="P:Nez.Input.ResolutionScale">
      <summary>
   set by the Scene and used to scale mouse input for cases where the Scene render target is a different size
   than the backbuffer. This situation basically results in mouse coordinates in screen space instead of
   in the render target coordinate system;
   </summary>
      <value>The resolution scale.</value>
    </member>
    <member name="P:Nez.Input.ResolutionOffset">
      <summary>
   set by the Scene and used to get mouse input from raw screen coordinates to render target coordinates. Any
   SceneResolutionPolicy that can result in letterboxing could potentially have an offset (basically, the
   letterbox portion of the render).
   </summary>
      <value>The resolution offset.</value>
    </member>
    <member name="P:Nez.Input.MaxSupportedGamePads">
      <summary>
   gets/sets the maximum supported gamepads
   </summary>
      <value>The maximum supported game pads.</value>
    </member>
    <member name="M:Nez.Input.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="M:Nez.Input.ScaledPosition(Vector2)">
      <summary>
   this takes into account the SceneResolutionPolicy and returns the value scaled to the RenderTargets coordinates
   </summary>
      <param name="position">The position.</param>
      <returns>Vector2.</returns>
      <value>The scaled position.</value>
    </member>
    <member name="M:Nez.Input.SetCurrentMouseState(MouseState)">
      <summary>
   to be used with great care! This lets you override the current MouseState. This is useful
   when the Nez render is embedded in a larger window so that mouse coordinates can be translated
   to Nez space from the outer window coordinates and for simulating mouse input.
   </summary>
      <param name="state">The state.</param>
    </member>
    <member name="M:Nez.Input.SetPreviousMouseState(MouseState)">
      <summary>
   useful for simulating mouse input
   </summary>
      <param name="state">The state.</param>
    </member>
    <member name="M:Nez.Input.SetCurrentKeyboardState(KeyboardState)">
      <summary>
   useful for simulating keyboard input
   </summary>
      <param name="state">State.</param>
    </member>
    <member name="M:Nez.Input.SetPreviousKeyboardState(KeyboardState)">
      <summary>
   useful for simulating keyboard input
   </summary>
      <param name="state">State.</param>
    </member>
    <member name="P:Nez.Input.PreviousKeyboardState">
      <summary>
   returns the previous KeyboardState from the last frame
   </summary>
      <value>The state of the previous keyboard.</value>
    </member>
    <member name="P:Nez.Input.CurrentKeyboardState">
      <summary>
   returns the KeyboardState from this frame
   </summary>
      <value>The state of the current keyboard.</value>
    </member>
    <member name="M:Nez.Input.IsKeyPressed(Keys)">
      <summary>
   only true if down this frame and not down the previous frame
   </summary>
      <param name="key">The key.</param>
      <returns>
        <c>true</c>, if key pressed was gotten, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Input.IsKeyDown(Keys)">
      <summary>
   true the entire time the key is down
   </summary>
      <param name="key">The key.</param>
      <returns>
        <c>true</c>, if key down was gotten, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Input.IsKeyReleased(Keys)">
      <summary>
   true only the frame the key is released
   </summary>
      <param name="key">The key.</param>
      <returns>
        <c>true</c>, if key up was gotten, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Input.IsKeyPressed(Keys,Keys)">
      <summary>
   only true if one of the keys is down this frame
   </summary>
      <param name="keyA">The key a.</param>
      <param name="keyB">The key b.</param>
      <returns>
        <c>true</c>, if key pressed was gotten, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Input.IsKeyDown(Keys,Keys)">
      <summary>
   true while either of the keys are down
   </summary>
      <param name="keyA">The key a.</param>
      <param name="keyB">The key b.</param>
      <returns>
        <c>true</c>, if key down was gotten, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Input.IsKeyReleased(Keys,Keys)">
      <summary>
   true only the frame one of the keys are released
   </summary>
      <param name="keyA">The key a.</param>
      <param name="keyB">The key b.</param>
      <returns>
        <c>true</c>, if key up was gotten, <c>false</c> otherwise.</returns>
    </member>
    <member name="P:Nez.Input.PreviousMouseState">
      <summary>
   returns the previous mouse state. Use with caution as it only contains raw data and does not take camera scaling into affect like
   Input.mousePosition does.
   </summary>
      <value>The state of the previous mouse.</value>
    </member>
    <member name="P:Nez.Input.CurrentMouseState">
      <summary>
   returns the current mouse state. Use with caution as it only contains raw data and does not take camera scaling into affect like
   Input.mousePosition does.
   </summary>
      <value>The state of the current mouse.</value>
    </member>
    <member name="P:Nez.Input.LeftMouseButtonPressed">
      <summary>
   only true if down this frame
   </summary>
      <value>
        <c>true</c> if [left mouse button pressed]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Input.LeftMouseButtonDown">
      <summary>
   true while the button is down
   </summary>
      <value>
        <c>true</c> if [left mouse button down]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Input.LeftMouseButtonReleased">
      <summary>
   true only the frame the button is released
   </summary>
      <value>
        <c>true</c> if [left mouse button released]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Input.RightMouseButtonPressed">
      <summary>
   only true if pressed this frame
   </summary>
      <value>
        <c>true</c> if [right mouse button pressed]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Input.RightMouseButtonDown">
      <summary>
   true while the button is down
   </summary>
      <value>
        <c>true</c> if [right mouse button down]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Input.RightMouseButtonReleased">
      <summary>
   true only the frame the button is released
   </summary>
      <value>
        <c>true</c> if [right mouse button released]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Input.MiddleMouseButtonPressed">
      <summary>
   only true if down this frame
   </summary>
      <value>
        <c>true</c> if [middle mouse button pressed]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Input.MiddleMouseButtonDown">
      <summary>
   true while the button is down
   </summary>
      <value>
        <c>true</c> if [middle mouse button down]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Input.MiddleMouseButtonReleased">
      <summary>
   true only the frame the button is released
   </summary>
      <value>
        <c>true</c> if [middle mouse button released]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Input.FirstExtendedMouseButtonPressed">
      <summary>
   only true if down this frame
   </summary>
      <value>
        <c>true</c> if [first extended mouse button pressed]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Input.FirstExtendedMouseButtonDown">
      <summary>
   true while the button is down
   </summary>
      <value>
        <c>true</c> if [first extended mouse button down]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Input.FirstExtendedMouseButtonReleased">
      <summary>
   true only the frame the button is released
   </summary>
      <value>
        <c>true</c> if [first extended mouse button released]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Input.SecondExtendedMouseButtonPressed">
      <summary>
   only true if down this frame
   </summary>
      <value>
        <c>true</c> if [second extended mouse button pressed]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Input.SecondExtendedMouseButtonDown">
      <summary>
   true while the button is down
   </summary>
      <value>
        <c>true</c> if [second extended mouse button down]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Input.SecondExtendedMouseButtonReleased">
      <summary>
   true only the frame the button is released
   </summary>
      <value>
        <c>true</c> if [second extended mouse button released]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Input.MouseWheel">
      <summary>
   gets the raw ScrollWheelValue
   </summary>
      <value>The mouse wheel.</value>
    </member>
    <member name="P:Nez.Input.MouseWheelDelta">
      <summary>
   gets the delta ScrollWheelValue
   </summary>
      <value>The mouse wheel delta.</value>
    </member>
    <member name="P:Nez.Input.RawMousePosition">
      <summary>
   unscaled mouse position. This is the actual screen space value
   </summary>
      <value>The raw mouse position.</value>
    </member>
    <member name="P:Nez.Input.MousePosition">
      <summary>
   alias for scaledMousePosition
   </summary>
      <value>The mouse position.</value>
    </member>
    <member name="P:Nez.Input.ScaledMousePosition">
      <summary>
   this takes into account the SceneResolutionPolicy and returns the value scaled to the RenderTargets coordinates
   </summary>
      <value>The scaled mouse position.</value>
    </member>
    <member name="P:Nez.Input.MousePositionDelta">
      <summary>
   Gets the mouse position delta.
   </summary>
      <value>The mouse position delta.</value>
    </member>
    <member name="P:Nez.Input.ScaledMousePositionDelta">
      <summary>
   Gets the scaled mouse position delta.
   </summary>
      <value>The scaled mouse position delta.</value>
    </member>
    <member name="F:Nez.InputEventType.GamePadConnected">
      <summary>
   The game pad connected
   </summary>
    </member>
    <member name="F:Nez.InputEventType.GamePadDisconnected">
      <summary>
   The game pad disconnected
   </summary>
    </member>
    <member name="F:Nez.InputEvent.GamePadIndex">
      <summary>
   The game pad index
   </summary>
    </member>
    <member name="M:Nez.InputEventTypeComparer.Equals(InputEventType,InputEventType)">
      <summary>
   Determines whether the specified objects are equal.
   </summary>
      <param name="x">The first object of type <paramref name="T" /> to compare.</param>
      <param name="y">The second object of type <paramref name="T" /> to compare.</param>
      <returns>
        <see langword="true" /> if the specified objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Nez.InputEventTypeComparer.GetHashCode(InputEventType)">
      <summary>
   Returns a hash code for this instance.
   </summary>
      <param name="obj">The object.</param>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="T:Nez.InputUtils">
      <summary>
   Class InputUtils.
   </summary>
    </member>
    <member name="F:Nez.InputUtils.IsMac">
      <summary>
   The is mac
   </summary>
    </member>
    <member name="F:Nez.InputUtils.IsWindows">
      <summary>
   The is windows
   </summary>
    </member>
    <member name="F:Nez.InputUtils.IsLinux">
      <summary>
   The is linux
   </summary>
    </member>
    <member name="M:Nez.InputUtils.IsShiftDown">
      <summary>
   Determines whether [is shift down].
   </summary>
      <returns>
        <c>true</c> if [is shift down]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.InputUtils.IsAltDown">
      <summary>
   Determines whether [is alt down].
   </summary>
      <returns>
        <c>true</c> if [is alt down]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.InputUtils.IsControlDown">
      <summary>
   Determines whether [is control down].
   </summary>
      <returns>
        <c>true</c> if [is control down]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:Nez.TouchInput">
      <summary>
   to enable touch input you must first call enableTouchSupport()
   </summary>
    </member>
    <member name="P:Nez.TouchInput.IsConnected">
      <summary>
   Gets a value indicating whether this instance is connected.
   </summary>
      <value>
        <c>true</c> if this instance is connected; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.TouchInput.CurrentTouches">
      <summary>
   Gets the current touches.
   </summary>
      <value>The current touches.</value>
    </member>
    <member name="P:Nez.TouchInput.PreviousTouches">
      <summary>
   Gets the previous touches.
   </summary>
      <value>The previous touches.</value>
    </member>
    <member name="P:Nez.TouchInput.PreviousGestures">
      <summary>
   Gets the previous gestures.
   </summary>
      <value>The previous gestures.</value>
    </member>
    <member name="P:Nez.TouchInput.CurrentGestures">
      <summary>
   Gets the current gestures.
   </summary>
      <value>The current gestures.</value>
    </member>
    <member name="M:Nez.TouchInput.EnableTouchSupport">
      <summary>
   Enables the touch support.
   </summary>
    </member>
    <member name="T:Nez.Axis">
      <summary>
   Enum Axis
   </summary>
    </member>
    <member name="F:Nez.Axis.X">
      <summary>
   The x
   </summary>
    </member>
    <member name="F:Nez.Axis.Y">
      <summary>
   The y
   </summary>
    </member>
    <member name="T:Nez.Splines.Bezier">
      <summary>
   cubic and quadratic bezier helper
   </summary>
    </member>
    <member name="M:Nez.Splines.Bezier.GetPoint(Vector2,Vector2,Vector2,System.Single)">
      <summary>
   evaluate quadratic bezier
   </summary>
      <param name="p0">P0.</param>
      <param name="p1">P1.</param>
      <param name="p2">P2.</param>
      <param name="t">T.</param>
      <returns>The point.</returns>
    </member>
    <member name="M:Nez.Splines.Bezier.GetFirstDerivative(Vector2,Vector2,Vector2,System.Single)">
      <summary>
   gets the first derivative for a quadratic bezier
   </summary>
      <param name="p0">P0.</param>
      <param name="p1">P1.</param>
      <param name="p2">P2.</param>
      <param name="t">T.</param>
      <returns>The first derivative.</returns>
    </member>
    <member name="M:Nez.Splines.Bezier.GetPoint(Vector2,Vector2,Vector2,Vector2,System.Single)">
      <summary>
   evaluate a cubic bezier
   </summary>
      <param name="start">P0.</param>
      <param name="firstControlPoint">P1.</param>
      <param name="secondControlPoint">P2.</param>
      <param name="end">P3.</param>
      <param name="t">T.</param>
      <returns>The point.</returns>
    </member>
    <member name="M:Nez.Splines.Bezier.GetFirstDerivative(Vector2,Vector2,Vector2,Vector2,System.Single)">
      <summary>
   gets the first derivative for a cubic bezier
   </summary>
      <param name="start">P0.</param>
      <param name="firstControlPoint">P1.</param>
      <param name="secondControlPoint">P2.</param>
      <param name="end">P3.</param>
      <param name="t">T.</param>
      <returns>The first derivative.</returns>
    </member>
    <member name="M:Nez.Splines.Bezier.GetOptimizedDrawingPoints(Vector2,Vector2,Vector2,Vector2,System.Single)">
      <summary>
   recursively subdivides a bezier curve until distanceTolerance is met. Flat sections will have less points then curved with this
   algorithm. Returns a pooled list that should be returned to the ListPool when done.
   </summary>
      <param name="start">Start.</param>
      <param name="firstCtrlPoint">First ctrl point.</param>
      <param name="secondCtrlPoint">Second ctrl point.</param>
      <param name="end">End.</param>
      <param name="distanceTolerance">Distance tolerance.</param>
      <returns>List&lt;Vector2&gt;.</returns>
    </member>
    <member name="T:Nez.Splines.BezierSpline">
      <summary>
   houses a series of cubic bezier points and provides helper methods to access the bezier
   </summary>
    </member>
    <member name="M:Nez.Splines.BezierSpline.SetControlPoint(System.Int32,Vector2)">
      <summary>
   sets a control point taking into account if this is a shared point and adjusting appropriately if it is
   </summary>
      <param name="index">Index.</param>
      <param name="point">Point.</param>
    </member>
    <member name="M:Nez.Splines.BezierSpline.GetPointAtTime(System.Single)">
      <summary>
   gets the point on the bezier at time t
   </summary>
      <param name="t">T.</param>
      <returns>The point at time.</returns>
    </member>
    <member name="M:Nez.Splines.BezierSpline.GetVelocityAtTime(System.Single)">
      <summary>
   gets the velocity (first derivative) of the bezier at time t
   </summary>
      <param name="t">T.</param>
      <returns>The velocity at time.</returns>
    </member>
    <member name="M:Nez.Splines.BezierSpline.GetDirectionAtTime(System.Single)">
      <summary>
   gets the direction (normalized first derivative) of the bezier at time t
   </summary>
      <param name="t">T.</param>
      <returns>The direction at time.</returns>
    </member>
    <member name="M:Nez.Splines.BezierSpline.AddCurve(Vector2,Vector2,Vector2,Vector2)">
      <summary>
   adds a curve to the bezier
   </summary>
      <param name="start">Start.</param>
      <param name="firstControlPoint">First control point.</param>
      <param name="secondControlPoint">Second control point.</param>
      <param name="end">The end.</param>
    </member>
    <member name="M:Nez.Splines.BezierSpline.Reset">
      <summary>
   resets the bezier removing all points
   </summary>
    </member>
    <member name="M:Nez.Splines.BezierSpline.GetDrawingPoints(System.Int32)">
      <summary>
   breaks up the spline into totalSegments parts and returns all the points required to draw using lines
   </summary>
      <param name="totalSegments">Total segments.</param>
      <returns>The drawing points.</returns>
    </member>
    <member name="T:Nez.Flags">
      <summary>
   utility class to assist with dealing with bitmasks. All methods except isFlagSet expect the flag parameter to be a non-shifted flag.
   This lets you use plain old ints (0, 1, 2, 3, etc) to set/unset your flags.
   </summary>
    </member>
    <member name="M:Nez.Flags.IsFlagSet(System.Int32,System.Int32)">
      <summary>
   checks to see if the bit flag is set in the int. This check expects flag to be shifted already!
   </summary>
      <param name="self">Self.</param>
      <param name="flag">Flag.</param>
      <returns>
        <c>true</c>, if flag set was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Flags.IsUnshiftedFlagSet(System.Int32,System.Int32)">
      <summary>
   checks to see if the bit flag is set in the int
   </summary>
      <param name="self">Self.</param>
      <param name="flag">Flag.</param>
      <returns>
        <c>true</c>, if flag set was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Flags.SetFlagExclusive(System.Int32@,System.Int32)">
      <summary>
   sets the flag bit of the int removing any already set flags
   </summary>
      <param name="self">Self.</param>
      <param name="flag">Flag.</param>
    </member>
    <member name="M:Nez.Flags.SetFlag(System.Int32@,System.Int32)">
      <summary>
   sets the flag bit of the int
   </summary>
      <param name="self">Self.</param>
      <param name="flag">Flag.</param>
    </member>
    <member name="M:Nez.Flags.UnsetFlag(System.Int32@,System.Int32)">
      <summary>
   unsets the flag bit of the int
   </summary>
      <param name="self">Self.</param>
      <param name="flag">Flag.</param>
    </member>
    <member name="M:Nez.Flags.InvertFlags(System.Int32@)">
      <summary>
   inverts the set bits of the int
   </summary>
      <param name="self">Self.</param>
    </member>
    <member name="M:Nez.Flags.BinaryStringRepresentation(System.Int32,System.Int32)">
      <summary>
   prints the binary representation of the int. Handy for debugging int flag overlaps visually.
   </summary>
      <param name="self">Self.</param>
      <param name="leftPadWidth">Left pad width.</param>
      <returns>The string representation.</returns>
    </member>
    <member name="T:Nez.Mathf">
      <summary>
   Class Mathf.
   </summary>
    </member>
    <member name="F:Nez.Mathf.Epsilon">
      <summary>
   The epsilon
   </summary>
    </member>
    <member name="F:Nez.Mathf.Deg2Rad">
      <summary>
   The deg2 RAD
   </summary>
    </member>
    <member name="F:Nez.Mathf.Rad2Deg">
      <summary>
   The rad2 deg
   </summary>
    </member>
    <member name="M:Nez.Mathf.Round(System.Single)">
      <summary>
   Rounds the specified f.
   </summary>
      <param name="f">The f.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.Ceil(System.Single)">
      <summary>
   Ceils the specified f.
   </summary>
      <param name="f">The f.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.CeilToInt(System.Single)">
      <summary>
   Ceils to int.
   </summary>
      <param name="f">The f.</param>
      <returns>System.Int32.</returns>
    </member>
    <member name="M:Nez.Mathf.FastCeilToInt(System.Single)">
      <summary>
   ceils the float to the nearest int value above y. note that this only works for values in the range of short
   </summary>
      <param name="y">F.</param>
      <returns>The ceil to int.</returns>
    </member>
    <member name="M:Nez.Mathf.Floor(System.Single)">
      <summary>
   Floors the specified f.
   </summary>
      <param name="f">The f.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.FloorToInt(System.Single)">
      <summary>
   Floors to int.
   </summary>
      <param name="f">The f.</param>
      <returns>System.Int32.</returns>
    </member>
    <member name="M:Nez.Mathf.Radians(System.Single)">
      <summary>
   Returns the result of converting a float value from degrees to radians.
   </summary>
      <param name="x">The x.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.Degrees(System.Single)">
      <summary>
   Returns the result of converting a double value from radians to degrees.
   </summary>
      <param name="x">The x.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.FastFloorToInt(System.Single)">
      <summary>
   floors the float to the nearest int value below x. note that this only works for values in the range of short
   </summary>
      <param name="x">The x coordinate.</param>
      <returns>The floor to int.</returns>
    </member>
    <member name="M:Nez.Mathf.RoundToInt(System.Single)">
      <summary>
   Rounds to int.
   </summary>
      <param name="f">The f.</param>
      <returns>System.Int32.</returns>
    </member>
    <member name="M:Nez.Mathf.TruncateToInt(System.Single)">
      <summary>
   Calculates the integral part of a number cast to an int
   </summary>
      <param name="f">F.</param>
      <returns>The to int.</returns>
    </member>
    <member name="M:Nez.Mathf.Clamp01(System.Single)">
      <summary>
   clamps value between 0 and 1
   </summary>
      <param name="value">Value.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.Clamp(System.Single,System.Single,System.Single)">
      <summary>
   Clamps the specified value.
   </summary>
      <param name="value">The value.</param>
      <param name="min">The minimum.</param>
      <param name="max">The maximum.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.Clamp(System.Int32,System.Int32,System.Int32)">
      <summary>
   Restricts a value to be within a specified range.
   </summary>
      <param name="value">The value to clamp.</param>
      <param name="min">The minimum value. If <c>value</c> is less than <c>min</c>, <c>min</c> will be returned.</param>
      <param name="max">The maximum value. If <c>value</c> is greater than <c>max</c>, <c>max</c> will be returned.</param>
      <returns>The clamped value.</returns>
    </member>
    <member name="M:Nez.Mathf.Snap(System.Single,System.Single)">
      <summary>
   Snaps the specified value.
   </summary>
      <param name="value">The value.</param>
      <param name="increment">The increment.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.Snap(System.Single,System.Single,System.Single)">
      <summary>
   Snaps the specified value.
   </summary>
      <param name="value">The value.</param>
      <param name="increment">The increment.</param>
      <param name="offset">The offset.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.Lerp(System.Single,System.Single,System.Single)">
      <summary>
   Lerps the specified from.
   </summary>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="t">The t.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.InverseLerp(System.Single,System.Single,System.Single)">
      <summary>
   Inverses the lerp.
   </summary>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="t">The t.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.UnclampedLerp(System.Single,System.Single,System.Single)">
      <summary>
   Unclampeds the lerp.
   </summary>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="t">The t.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.LerpAngle(System.Single,System.Single,System.Single)">
      <summary>
   lerps an angle in degrees between a and b. handles wrapping around 360
   </summary>
      <param name="a">The alpha component.</param>
      <param name="b">The blue component.</param>
      <param name="t">T.</param>
      <returns>The angle.</returns>
    </member>
    <member name="M:Nez.Mathf.LerpAngleRadians(System.Single,System.Single,System.Single)">
      <summary>
   lerps an angle in radians between a and b. handles wrapping around 2*Pi
   </summary>
      <param name="a">The alpha component.</param>
      <param name="b">The blue component.</param>
      <param name="t">T.</param>
      <returns>The angle.</returns>
    </member>
    <member name="M:Nez.Mathf.Repeat(System.Single,System.Single)">
      <summary>
   loops t so that it is never larger than length and never smaller than 0
   </summary>
      <param name="t">T.</param>
      <param name="length">Length.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.IncrementWithWrap(System.Int32,System.Int32)">
      <summary>
   increments t and ensures it is always greater than or equal to 0 and less than length
   </summary>
      <param name="t">T.</param>
      <param name="length">Length.</param>
      <returns>System.Int32.</returns>
    </member>
    <member name="M:Nez.Mathf.DecrementWithWrap(System.Int32,System.Int32)">
      <summary>
   decrements t and ensures it is always greater than or equal to 0 and less than length
   </summary>
      <param name="t">T.</param>
      <param name="length">Length.</param>
      <returns>The with wrap.</returns>
    </member>
    <member name="M:Nez.Mathf.PingPong(System.Single,System.Single)">
      <summary>
   ping-pongs t so that it is never larger than length and never smaller than 0
   </summary>
      <param name="t">T.</param>
      <param name="length">Length.</param>
      <returns>The pong.</returns>
    </member>
    <member name="M:Nez.Mathf.SignThreshold(System.Single,System.Single)">
      <summary>
   if value &gt;= threshold returns its sign else returns 0
   </summary>
      <param name="value">Value.</param>
      <param name="threshold">Threshold.</param>
      <returns>The threshold.</returns>
    </member>
    <member name="M:Nez.Mathf.DeltaAngle(System.Single,System.Single)">
      <summary>
   Calculates the shortest difference between two given angles in degrees
   </summary>
      <param name="current">Current.</param>
      <param name="target">Target.</param>
      <returns>The angle.</returns>
    </member>
    <member name="M:Nez.Mathf.DeltaAngleRadians(System.Single,System.Single)">
      <summary>
   Calculates the shortest difference between two given angles given in radians
   </summary>
      <param name="current">Current.</param>
      <param name="target">Target.</param>
      <returns>The angle.</returns>
    </member>
    <member name="M:Nez.Mathf.Approach(System.Single,System.Single,System.Single)">
      <summary>
   moves start towards end by shift amount clamping the result. start can be less than or greater than end.
   example: start is 2, end is 10, shift is 4 results in 6
   </summary>
      <param name="start">Start.</param>
      <param name="end">End.</param>
      <param name="shift">Shift.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.ApproachAngle(System.Single,System.Single,System.Single)">
      <summary>
   moves start angle towards end angle by shift amount clamping the result and choosing the shortest path. start can be less than or greater than end.
   example 1: start is 30, end is 100, shift is 25 results in 55
   example 2: start is 340, end is 30, shift is 25 results in 5 (365 is wrapped to 5)
   </summary>
      <param name="start">Start.</param>
      <param name="end">End.</param>
      <param name="shift">Shift.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.ApproachAngleRadians(System.Single,System.Single,System.Single)">
      <summary>
   moves start angle towards end angle by shift amount (all in radians) clamping the result and choosing the shortest path. start can be less than or greater than end.
   this method works very similar to approachAngle, the only difference is use of radians instead of degrees and wrapping at 2*Pi instead of 360.
   </summary>
      <param name="start">Start.</param>
      <param name="end">End.</param>
      <param name="shift">Shift.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.Approximately(System.Single,System.Single,System.Single)">
      <summary>
   checks to see if two values are approximately the same using an acceptable tolerance for the check
   </summary>
      <param name="value1">Value1.</param>
      <param name="value2">Value2.</param>
      <param name="tolerance">Tolerance.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Mathf.MinOf(System.Single,System.Single,System.Single)">
      <summary>
   returns the minimum of the passed in values
   </summary>
      <param name="a">The alpha component.</param>
      <param name="b">The blue component.</param>
      <param name="c">C.</param>
      <returns>The of.</returns>
    </member>
    <member name="M:Nez.Mathf.MaxOf(System.Single,System.Single,System.Single)">
      <summary>
   returns the maximum of the passed in values
   </summary>
      <param name="a">The alpha component.</param>
      <param name="b">The blue component.</param>
      <param name="c">C.</param>
      <returns>The of.</returns>
    </member>
    <member name="M:Nez.Mathf.MinOf(System.Single,System.Single,System.Single,System.Single)">
      <summary>
   returns the minimum of the passed in values
   </summary>
      <param name="a">The alpha component.</param>
      <param name="b">The blue component.</param>
      <param name="c">C.</param>
      <param name="d">D.</param>
      <returns>The of.</returns>
    </member>
    <member name="M:Nez.Mathf.MinOf(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
   returns the minimum of the passed in values
   </summary>
      <param name="a">The alpha component.</param>
      <param name="b">The blue component.</param>
      <param name="c">C.</param>
      <param name="d">D.</param>
      <param name="e">The e.</param>
      <returns>The of.</returns>
    </member>
    <member name="M:Nez.Mathf.MaxOf(System.Single,System.Single,System.Single,System.Single)">
      <summary>
   returns the maximum of the passed in values
   </summary>
      <param name="a">The alpha component.</param>
      <param name="b">The blue component.</param>
      <param name="c">C.</param>
      <param name="d">D.</param>
      <returns>The of.</returns>
    </member>
    <member name="M:Nez.Mathf.MaxOf(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
   returns the maximum of the passed in values
   </summary>
      <param name="a">The alpha component.</param>
      <param name="b">The blue component.</param>
      <param name="c">C.</param>
      <param name="d">D.</param>
      <param name="e">The e.</param>
      <returns>The of.</returns>
    </member>
    <member name="M:Nez.Mathf.Between(System.Single,System.Single,System.Single)">
      <summary>
   checks to see if value is between min/max inclusive of min/max
   </summary>
      <param name="value">Value.</param>
      <param name="min">Minimum.</param>
      <param name="max">Max.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Mathf.Between(System.Int32,System.Int32,System.Int32)">
      <summary>
   checks to see if value is between min/max inclusive of min/max
   </summary>
      <param name="value">Value.</param>
      <param name="min">Minimum.</param>
      <param name="max">Max.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Mathf.IsEven(System.Int32)">
      <summary>
   returns true if value is even
   </summary>
      <param name="value">Value.</param>
      <returns>
        <c>true</c>, if even was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Mathf.IsOdd(System.Int32)">
      <summary>
   returns true if value is odd
   </summary>
      <param name="value">Value.</param>
      <returns>
        <c>true</c>, if odd was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Mathf.RoundWithRoundedAmount(System.Single,System.Single@)">
      <summary>
   rounds value and returns it and the amount that was rounded
   </summary>
      <param name="value">Value.</param>
      <param name="roundedAmount">roundedAmount.</param>
      <returns>The with remainder.</returns>
    </member>
    <member name="M:Nez.Mathf.Map01(System.Single,System.Single,System.Single)">
      <summary>
   Maps a value from some arbitrary range to the 0 to 1 range
   </summary>
      <param name="value">Value.</param>
      <param name="min">Lminimum value.</param>
      <param name="max">maximum value</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.Map10(System.Single,System.Single,System.Single)">
      <summary>
   Maps a value from some arbitrary range to the 1 to 0 range. this is just the reverse of map01
   </summary>
      <param name="value">Value.</param>
      <param name="min">Lminimum value.</param>
      <param name="max">maximum value</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.Map(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
   mapps value (which is in the range leftMin - leftMax) to a value in the range rightMin - rightMax
   </summary>
      <param name="value">Value.</param>
      <param name="leftMin">Left minimum.</param>
      <param name="leftMax">Left max.</param>
      <param name="rightMin">Right minimum.</param>
      <param name="rightMax">Right max.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.RoundToNearest(System.Single,System.Single)">
      <summary>
   rounds value to the nearest number in steps of roundToNearest. Ex: found 127 to nearest 5 results in 125
   </summary>
      <param name="value">Value.</param>
      <param name="roundToNearest">Round to nearest.</param>
      <returns>The to nearest.</returns>
    </member>
    <member name="M:Nez.Mathf.WithinEpsilon(System.Single,System.Single)">
      <summary>
   Checks if the value passed falls under a certain threshold.
   Useful for small, precise comparisons.
   </summary>
      <param name="value">The value to check.</param>
      <param name="ep">The threshold to check the value with. <see cref="F:Nez.Mathf.Epsilon" /> is used by default.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Mathf.Hypotenuse(System.Single,System.Single)">
      <summary>
   returns sqrt( x * x + y * y )
   </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.ClosestPowerOfTwoGreaterThan(System.Int32)">
      <summary>
   Closests the power of two greater than.
   </summary>
      <param name="x">The x.</param>
      <returns>System.Int32.</returns>
    </member>
    <member name="M:Nez.Mathf.Sqrt(System.Single)">
      <summary>
   Returns the square root
   </summary>
      <param name="val">Value.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.Pow(System.Single,System.Single)">
      <summary>
   Pows the specified x.
   </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.Sin(System.Single)">
      <summary>
   Returns the sine of angle in radians
   </summary>
      <param name="f">F.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.Cos(System.Single)">
      <summary>
   Returns the cosine of angle in radians
   </summary>
      <param name="f">F.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.Acos(System.Single)">
      <summary>
   Returns the arc-cosine of f: the angle in radians whose cosine is f
   </summary>
      <param name="f">F.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.Exp(System.Single)">
      <summary>
   Exps the specified power.
   </summary>
      <param name="power">The power.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.Atan2(System.Single,System.Single)">
      <summary>
   returns the angle whose tangent is the quotient (y/x) of two specified numbers
   </summary>
      <param name="y">The y coordinate.</param>
      <param name="x">The x coordinate.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.AngleBetweenVectors(Vector2,Vector2)">
      <summary>
   Angles the between vectors.
   </summary>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Mathf.AngleToVector(System.Single,System.Single)">
      <summary>
   Angles to vector.
   </summary>
      <param name="angleRadians">The angle radians.</param>
      <param name="length">The length.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.Mathf.RotateAround(Vector2,System.Single)">
      <summary>
   helper for moving a value around in a circle.
   </summary>
      <param name="position">The position.</param>
      <param name="speed">The speed.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.Mathf.RotateAround(Vector2,Vector2,System.Single)">
      <summary>
   the rotation is relative to the current position not the total rotation. For example, if you are currently at 90 degrees and
   want to rotate to 135 degrees, you would use an angle of 45, not 135.
   </summary>
      <param name="point">Point.</param>
      <param name="center">Center.</param>
      <param name="angleInDegrees">Angle in degrees.</param>
      <returns>The around.</returns>
    </member>
    <member name="M:Nez.Mathf.RotateAroundRadians(Vector2,Vector2,System.Single)">
      <summary>
   the rotation is relative to the current position not the total rotation. For example, if you are currently at 1 Pi radians and
   want to rotate to 1.5 Pi radians, you would use an angle of 0.5 Pi, not 1.5 Pi.
   </summary>
      <param name="point">Point.</param>
      <param name="center">Center.</param>
      <param name="angleInRadians">The angle in radians.</param>
      <returns>The around.</returns>
    </member>
    <member name="M:Nez.Mathf.PointOnCircle(Vector2,System.Single,System.Single)">
      <summary>
   gets a point on the circumference of the circle given its center, radius and angle. 0 degrees is 3 o'clock.
   </summary>
      <param name="circleCenter">Circle center.</param>
      <param name="radius">Radius.</param>
      <param name="angleInDegrees">Angle in degrees.</param>
      <returns>The on circle.</returns>
    </member>
    <member name="M:Nez.Mathf.PointOnCircleRadians(Vector2,System.Single,System.Single)">
      <summary>
   gets a point on the circumference of the circle given its center, radius and angle. 0 radians is 3 o'clock.
   </summary>
      <param name="circleCenter">Circle center.</param>
      <param name="radius">Radius.</param>
      <param name="angleInRadians">The angle in radians.</param>
      <returns>The on circle.</returns>
    </member>
    <member name="M:Nez.Mathf.Lissajou(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
   lissajou curve
   </summary>
      <param name="xFrequency">X frequency.</param>
      <param name="yFrequency">Y frequency.</param>
      <param name="xMagnitude">X magnitude.</param>
      <param name="yMagnitude">Y magnitude.</param>
      <param name="phase">Phase.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.Mathf.LissajouDamped(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
   damped version of a lissajou curve with oscillation between 0 and max magnitude over time. Damping should be between 0 and 1 for best
   results. oscillationInterval is the time in seconds for half of the animation loop to complete.
   </summary>
      <param name="xFrequency">X frequency.</param>
      <param name="yFrequency">Y frequency.</param>
      <param name="xMagnitude">X magnitude.</param>
      <param name="yMagnitude">Y magnitude.</param>
      <param name="phase">Phase.</param>
      <param name="damping">Damping.</param>
      <param name="oscillationInterval">Oscillation interval.</param>
      <returns>The damped.</returns>
    </member>
    <member name="T:Nez.Matrix2D">
      <summary>
   Represents the right-handed 3x3 floating point matrix, which can store translation, scale and rotation information.
   </summary>
    </member>
    <member name="F:Nez.Matrix2D.M11">
      <summary>
   The M11
   </summary>
    </member>
    <member name="F:Nez.Matrix2D.M12">
      <summary>
   The M12
   </summary>
    </member>
    <member name="F:Nez.Matrix2D.M21">
      <summary>
   The M21
   </summary>
    </member>
    <member name="F:Nez.Matrix2D.M22">
      <summary>
   The M22
   </summary>
    </member>
    <member name="F:Nez.Matrix2D.M31">
      <summary>
   The M31
   </summary>
    </member>
    <member name="F:Nez.Matrix2D.M32">
      <summary>
   The M32
   </summary>
    </member>
    <member name="P:Nez.Matrix2D.Identity">
      <summary>
   Returns the identity matrix.
   </summary>
      <value>The identity.</value>
    </member>
    <member name="P:Nez.Matrix2D.Translation">
      <summary>
   Position stored in this matrix.
   </summary>
      <value>The translation.</value>
    </member>
    <member name="P:Nez.Matrix2D.Rotation">
      <summary>
   rotation in radians stored in this matrix
   </summary>
      <value>The rotation.</value>
    </member>
    <member name="P:Nez.Matrix2D.RotationDegrees">
      <summary>
   rotation in degrees stored in this matrix
   </summary>
      <value>The rotation degrees.</value>
    </member>
    <member name="P:Nez.Matrix2D.Scale">
      <summary>
   Scale stored in this matrix.
   </summary>
      <value>The scale.</value>
    </member>
    <member name="M:Nez.Matrix2D.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
   Constructs a matrix.
   </summary>
      <param name="m11">The M11.</param>
      <param name="m12">The M12.</param>
      <param name="m21">The M21.</param>
      <param name="m22">The M22.</param>
      <param name="m31">The M31.</param>
      <param name="m32">The M32.</param>
    </member>
    <member name="M:Nez.Matrix2D.Add(Matrix2D,Matrix2D)">
      <summary>
   Creates a new <see cref="T:Nez.Matrix2D" /> which contains sum of two matrixes.
   </summary>
      <param name="matrix1">The first matrix to add.</param>
      <param name="matrix2">The second matrix to add.</param>
      <returns>The result of the matrix addition.</returns>
    </member>
    <member name="M:Nez.Matrix2D.Add(Matrix2D@,Matrix2D@,Matrix2D@)">
      <summary>
   Creates a new <see cref="T:Nez.Matrix2D" /> which contains sum of two matrixes.
   </summary>
      <param name="matrix1">The first matrix to add.</param>
      <param name="matrix2">The second matrix to add.</param>
      <param name="result">The result of the matrix addition as an output parameter.</param>
    </member>
    <member name="M:Nez.Matrix2D.CreateRotation(System.Single)">
      <summary>
   Creates a new rotation <see cref="T:Nez.Matrix2D" /> around Z axis.
   </summary>
      <param name="radians">Angle in radians.</param>
      <returns>The rotation <see cref="T:Nez.Matrix2D" /> around Z axis.</returns>
    </member>
    <member name="M:Nez.Matrix2D.CreateRotation(System.Single,Matrix2D@)">
      <summary>
   Creates a new rotation <see cref="T:Nez.Matrix2D" /> around Z axis.
   </summary>
      <param name="radians">Angle in radians.</param>
      <param name="result">The rotation <see cref="T:Nez.Matrix2D" /> around Z axis as an output parameter.</param>
    </member>
    <member name="M:Nez.Matrix2D.CreateScale(System.Single)">
      <summary>
   Creates a new scaling <see cref="T:Nez.Matrix2D" />.
   </summary>
      <param name="scale">Scale value for all three axises.</param>
      <returns>The scaling <see cref="T:Nez.Matrix2D" />.</returns>
    </member>
    <member name="M:Nez.Matrix2D.CreateScale(System.Single,Matrix2D@)">
      <summary>
   Creates a new scaling <see cref="T:Nez.Matrix2D" />.
   </summary>
      <param name="scale">Scale value for all three axises.</param>
      <param name="result">The scaling <see cref="T:Nez.Matrix2D" /> as an output parameter.</param>
    </member>
    <member name="M:Nez.Matrix2D.CreateScale(System.Single,System.Single)">
      <summary>
   Creates a new scaling <see cref="T:Nez.Matrix2D" />.
   </summary>
      <param name="xScale">Scale value for X axis.</param>
      <param name="yScale">Scale value for Y axis.</param>
      <returns>The scaling <see cref="T:Nez.Matrix2D" />.</returns>
    </member>
    <member name="M:Nez.Matrix2D.CreateScale(System.Single,System.Single,Matrix2D@)">
      <summary>
   Creates a new scaling <see cref="T:Nez.Matrix2D" />.
   </summary>
      <param name="xScale">Scale value for X axis.</param>
      <param name="yScale">Scale value for Y axis.</param>
      <param name="result">The scaling <see cref="T:Nez.Matrix2D" /> as an output parameter.</param>
    </member>
    <member name="M:Nez.Matrix2D.CreateScale(Vector2)">
      <summary>
   Creates a new scaling <see cref="T:Nez.Matrix2D" />.
   </summary>
      <param name="scale">
        <see cref="T:Microsoft.Xna.Framework.Vector2" /> representing x and y scale values.</param>
      <returns>The scaling <see cref="T:Nez.Matrix2D" />.</returns>
    </member>
    <member name="M:Nez.Matrix2D.CreateScale(Vector2@,Matrix2D@)">
      <summary>
   Creates a new scaling <see cref="T:Nez.Matrix2D" />.
   </summary>
      <param name="scale">
        <see cref="T:Microsoft.Xna.Framework.Vector3" /> representing x,y and z scale values.</param>
      <param name="result">The scaling <see cref="T:Nez.Matrix2D" /> as an output parameter.</param>
    </member>
    <member name="M:Nez.Matrix2D.CreateTranslation(System.Single,System.Single)">
      <summary>
   Creates a new translation <see cref="T:Nez.Matrix2D" />.
   </summary>
      <param name="xPosition">X coordinate of translation.</param>
      <param name="yPosition">Y coordinate of translation.</param>
      <returns>The translation <see cref="T:Nez.Matrix2D" />.</returns>
    </member>
    <member name="M:Nez.Matrix2D.CreateTranslation(Vector2@,Matrix2D@)">
      <summary>
   Creates a new translation <see cref="T:Nez.Matrix2D" />.
   </summary>
      <param name="position">X,Y and Z coordinates of translation.</param>
      <param name="result">The translation <see cref="T:Nez.Matrix2D" /> as an output parameter.</param>
    </member>
    <member name="M:Nez.Matrix2D.CreateTranslation(Vector2)">
      <summary>
   Creates a new translation <see cref="T:Nez.Matrix2D" />.
   </summary>
      <param name="position">X,Y and Z coordinates of translation.</param>
      <returns>The translation <see cref="T:Nez.Matrix2D" />.</returns>
    </member>
    <member name="M:Nez.Matrix2D.CreateTranslation(System.Single,System.Single,Matrix2D@)">
      <summary>
   Creates a new translation <see cref="T:Nez.Matrix2D" />.
   </summary>
      <param name="xPosition">X coordinate of translation.</param>
      <param name="yPosition">Y coordinate of translation.</param>
      <param name="result">The translation <see cref="T:Nez.Matrix2D" /> as an output parameter.</param>
    </member>
    <member name="M:Nez.Matrix2D.Determinant">
      <summary>
   Determinants this instance.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Matrix2D.Invert(Matrix2D@,Matrix2D@)">
      <summary>
   Inverts the specified matrix.
   </summary>
      <param name="matrix">The matrix.</param>
      <param name="result">The result.</param>
    </member>
    <member name="M:Nez.Matrix2D.Divide(Matrix2D,Matrix2D)">
      <summary>
   Divides the elements of a <see cref="T:Nez.Matrix2D" /> by the elements of another matrix.
   </summary>
      <param name="matrix1">Source <see cref="T:Nez.Matrix2D" />.</param>
      <param name="matrix2">Divisor <see cref="T:Nez.Matrix2D" />.</param>
      <returns>The result of dividing the matrix.</returns>
    </member>
    <member name="M:Nez.Matrix2D.Divide(Matrix2D@,Matrix2D@,Matrix2D@)">
      <summary>
   Divides the elements of a <see cref="T:Nez.Matrix2D" /> by the elements of another matrix.
   </summary>
      <param name="matrix1">Source <see cref="T:Nez.Matrix2D" />.</param>
      <param name="matrix2">Divisor <see cref="T:Nez.Matrix2D" />.</param>
      <param name="result">The result of dividing the matrix as an output parameter.</param>
    </member>
    <member name="M:Nez.Matrix2D.Divide(Matrix2D,System.Single)">
      <summary>
   Divides the elements of a <see cref="T:Nez.Matrix2D" /> by a scalar.
   </summary>
      <param name="matrix1">Source <see cref="T:Nez.Matrix2D" />.</param>
      <param name="divider">Divisor scalar.</param>
      <returns>The result of dividing a matrix by a scalar.</returns>
    </member>
    <member name="M:Nez.Matrix2D.Divide(Matrix2D@,System.Single,Matrix2D@)">
      <summary>
   Divides the elements of a <see cref="T:Nez.Matrix2D" /> by a scalar.
   </summary>
      <param name="matrix1">Source <see cref="T:Nez.Matrix2D" />.</param>
      <param name="divider">Divisor scalar.</param>
      <param name="result">The result of dividing a matrix by a scalar as an output parameter.</param>
    </member>
    <member name="M:Nez.Matrix2D.Lerp(Matrix2D,Matrix2D,System.Single)">
      <summary>
   Creates a new <see cref="T:Nez.Matrix2D" /> that contains linear interpolation of the values in specified matrixes.
   </summary>
      <param name="matrix1">The first <see cref="T:Nez.Matrix2D" />.</param>
      <param name="matrix2">The second <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
      <param name="amount">Weighting value(between 0.0 and 1.0).</param>
      <returns>&gt;The result of linear interpolation of the specified matrixes.</returns>
    </member>
    <member name="M:Nez.Matrix2D.Lerp(Matrix2D@,Matrix2D@,System.Single,Matrix2D@)">
      <summary>
   Creates a new <see cref="T:Nez.Matrix2D" /> that contains linear interpolation of the values in specified matrixes.
   </summary>
      <param name="matrix1">The first <see cref="T:Nez.Matrix2D" />.</param>
      <param name="matrix2">The second <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
      <param name="amount">Weighting value(between 0.0 and 1.0).</param>
      <param name="result">The result of linear interpolation of the specified matrixes as an output parameter.</param>
    </member>
    <member name="M:Nez.Matrix2D.Multiply(Matrix2D,Matrix2D)">
      <summary>
   Creates a new <see cref="T:Nez.Matrix2D" /> that contains a multiplication of two matrix.
   </summary>
      <param name="matrix1">Source <see cref="T:Nez.Matrix2D" />.</param>
      <param name="matrix2">Source <see cref="T:Nez.Matrix2D" />.</param>
      <returns>Result of the matrix multiplication.</returns>
    </member>
    <member name="M:Nez.Matrix2D.Multiply(Matrix2D@,Matrix2D@,Matrix2D@)">
      <summary>
   Creates a new <see cref="T:Nez.Matrix2D" /> that contains a multiplication of two matrix.
   </summary>
      <param name="matrix1">Source <see cref="T:Nez.Matrix2D" />.</param>
      <param name="matrix2">Source <see cref="T:Nez.Matrix2D" />.</param>
      <param name="result">Result of the matrix multiplication as an output parameter.</param>
    </member>
    <member name="M:Nez.Matrix2D.Multiply(Matrix2D,System.Single)">
      <summary>
   Creates a new <see cref="T:Nez.Matrix2D" /> that contains a multiplication of <see cref="T:Nez.Matrix2D" /> and a scalar.
   </summary>
      <param name="matrix1">Source <see cref="T:Nez.Matrix2D" />.</param>
      <param name="scaleFactor">Scalar value.</param>
      <returns>Result of the matrix multiplication with a scalar.</returns>
    </member>
    <member name="M:Nez.Matrix2D.Multiply(Matrix2D@,System.Single,Matrix2D@)">
      <summary>
   Creates a new <see cref="T:Nez.Matrix2D" /> that contains a multiplication of <see cref="T:Nez.Matrix2D" /> and a scalar.
   </summary>
      <param name="matrix1">Source <see cref="T:Nez.Matrix2D" />.</param>
      <param name="scaleFactor">Scalar value.</param>
      <param name="result">Result of the matrix multiplication with a scalar as an output parameter.</param>
    </member>
    <member name="M:Nez.Matrix2D.op_Addition(Matrix2D,Matrix2D)">
      <summary>
   Adds two matrixes.
   </summary>
      <param name="matrix1">Source <see cref="T:Nez.Matrix2D" /> on the left of the add sign.</param>
      <param name="matrix2">Source <see cref="T:Nez.Matrix2D" /> on the right of the add sign.</param>
      <returns>Sum of the matrixes.</returns>
    </member>
    <member name="M:Nez.Matrix2D.op_Division(Matrix2D,Matrix2D)">
      <summary>
   Divides the elements of a <see cref="T:Nez.Matrix2D" /> by the elements of another <see cref="T:Nez.Matrix2D" />.
   </summary>
      <param name="matrix1">Source <see cref="T:Nez.Matrix2D" /> on the left of the div sign.</param>
      <param name="matrix2">Divisor <see cref="T:Nez.Matrix2D" /> on the right of the div sign.</param>
      <returns>The result of dividing the matrixes.</returns>
    </member>
    <member name="M:Nez.Matrix2D.op_Division(Matrix2D,System.Single)">
      <summary>
   Divides the elements of a <see cref="T:Nez.Matrix2D" /> by a scalar.
   </summary>
      <param name="matrix">Source <see cref="T:Nez.Matrix2D" /> on the left of the div sign.</param>
      <param name="divider">Divisor scalar on the right of the div sign.</param>
      <returns>The result of dividing a matrix by a scalar.</returns>
    </member>
    <member name="M:Nez.Matrix2D.op_Equality(Matrix2D,Matrix2D)">
      <summary>
   Compares whether two <see cref="T:Nez.Matrix2D" /> instances are equal without any tolerance.
   </summary>
      <param name="matrix1">Source <see cref="T:Nez.Matrix2D" /> on the left of the equal sign.</param>
      <param name="matrix2">Source <see cref="T:Nez.Matrix2D" /> on the right of the equal sign.</param>
      <returns>
        <c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Matrix2D.op_Inequality(Matrix2D,Matrix2D)">
      <summary>
   Compares whether two <see cref="T:Nez.Matrix2D" /> instances are not equal without any tolerance.
   </summary>
      <param name="matrix1">Source <see cref="T:Nez.Matrix2D" /> on the left of the not equal sign.</param>
      <param name="matrix2">Source <see cref="T:Nez.Matrix2D" /> on the right of the not equal sign.</param>
      <returns>
        <c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Matrix2D.op_Multiply(Matrix2D,Matrix2D)">
      <summary>
   Multiplies two matrixes.
   </summary>
      <param name="matrix1">Source <see cref="T:Nez.Matrix2D" /> on the left of the mul sign.</param>
      <param name="matrix2">Source <see cref="T:Nez.Matrix2D" /> on the right of the mul sign.</param>
      <returns>Result of the matrix multiplication.</returns>
      <remarks>Using matrix multiplication algorithm - see http://en.wikipedia.org/wiki/Matrix_multiplication.</remarks>
    </member>
    <member name="M:Nez.Matrix2D.op_Multiply(Matrix2D,System.Single)">
      <summary>
   Multiplies the elements of matrix by a scalar.
   </summary>
      <param name="matrix">Source <see cref="T:Nez.Matrix2D" /> on the left of the mul sign.</param>
      <param name="scaleFactor">Scalar value on the right of the mul sign.</param>
      <returns>Result of the matrix multiplication with a scalar.</returns>
    </member>
    <member name="M:Nez.Matrix2D.op_Subtraction(Matrix2D,Matrix2D)">
      <summary>
   Subtracts the values of one <see cref="T:Nez.Matrix2D" /> from another <see cref="T:Nez.Matrix2D" />.
   </summary>
      <param name="matrix1">Source <see cref="T:Nez.Matrix2D" /> on the left of the sub sign.</param>
      <param name="matrix2">Source <see cref="T:Nez.Matrix2D" /> on the right of the sub sign.</param>
      <returns>Result of the matrix subtraction.</returns>
    </member>
    <member name="M:Nez.Matrix2D.op_UnaryNegation(Matrix2D)">
      <summary>
   Inverts values in the specified <see cref="T:Nez.Matrix2D" />.
   </summary>
      <param name="matrix">Source <see cref="T:Nez.Matrix2D" /> on the right of the sub sign.</param>
      <returns>Result of the inversion.</returns>
    </member>
    <member name="M:Nez.Matrix2D.Subtract(Matrix2D,Matrix2D)">
      <summary>
   Creates a new <see cref="T:Nez.Matrix2D" /> that contains subtraction of one matrix from another.
   </summary>
      <param name="matrix1">The first <see cref="T:Nez.Matrix2D" />.</param>
      <param name="matrix2">The second <see cref="T:Nez.Matrix2D" />.</param>
      <returns>The result of the matrix subtraction.</returns>
    </member>
    <member name="M:Nez.Matrix2D.Subtract(Matrix2D@,Matrix2D@,Matrix2D@)">
      <summary>
   Creates a new <see cref="T:Nez.Matrix2D" /> that contains subtraction of one matrix from another.
   </summary>
      <param name="matrix1">The first <see cref="T:Nez.Matrix2D" />.</param>
      <param name="matrix2">The second <see cref="T:Nez.Matrix2D" />.</param>
      <param name="result">The result of the matrix subtraction as an output parameter.</param>
    </member>
    <member name="M:Nez.Matrix2D.Transpose(Matrix2D)">
      <summary>
   Swap the matrix rows and columns.
   </summary>
      <param name="matrix">The matrix for transposing operation.</param>
      <returns>The new <see cref="T:Nez.Matrix2D" /> which contains the transposing result.</returns>
    </member>
    <member name="M:Nez.Matrix2D.Transpose(Matrix2D@,Matrix2D@)">
      <summary>
   Swap the matrix rows and columns.
   </summary>
      <param name="matrix">The matrix for transposing operation.</param>
      <param name="result">The new <see cref="T:Nez.Matrix2D" /> which contains the transposing result as an output parameter.</param>
    </member>
    <member name="M:Nez.Matrix2D.MultiplyTranslation(System.Single,System.Single)">
      <summary>
   Multiplies the translation.
   </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
    </member>
    <member name="M:Nez.Matrix2D.MultiplyRotation(System.Single)">
      <summary>
   Multiplies the rotation.
   </summary>
      <param name="radians">The radians.</param>
    </member>
    <member name="M:Nez.Matrix2D.Equals(Matrix2D)">
      <summary>
   Compares whether current instance is equal to specified <see cref="T:Nez.Matrix2D" /> without any tolerance.
   </summary>
      <param name="other">The <see cref="T:Nez.Matrix2D" /> to compare.</param>
      <returns>
        <c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Matrix2D.Equals(System.Object)">
      <summary>
   Compares whether current instance is equal to specified <see cref="T:System.Object" /> without any tolerance.
   </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare.</param>
      <returns>
        <c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Matrix2D.GetHashCode">
      <summary>
   Gets the hash code of this <see cref="T:Nez.Matrix2D" />.
   </summary>
      <returns>Hash code of this <see cref="T:Nez.Matrix2D" />.</returns>
    </member>
    <member name="M:Nez.Matrix2D.op_Implicit(Matrix2D)~Matrix">
      <summary>
   Performs an implicit conversion from <see cref="T:Nez.Matrix2D" /> to <see cref="T:Microsoft.Xna.Framework.Matrix" />.
   </summary>
      <param name="mat">The mat.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Nez.Matrix2D.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.Random">
      <summary>
   Class Random.
   </summary>
    </member>
    <member name="F:Nez.Random.RNG">
      <summary>
   The RNG
   </summary>
    </member>
    <member name="M:Nez.Random.GetSeed">
      <summary>
   returns current seed value
   </summary>
      <returns>Seed.</returns>
    </member>
    <member name="M:Nez.Random.SetSeed(System.Int32)">
      <summary>
   resets rng with new seed
   </summary>
      <param name="seed">Seed.</param>
    </member>
    <member name="M:Nez.Random.NextFloat">
      <summary>
   returns a random float between 0 (inclusive) and 1 (exclusive)
   </summary>
      <returns>The float.</returns>
    </member>
    <member name="M:Nez.Random.NextFloat(System.Single)">
      <summary>
   returns a random float between 0 (inclusive) and max (exclusive)
   </summary>
      <param name="max">Max.</param>
      <returns>The float.</returns>
    </member>
    <member name="M:Nez.Random.NextInt(System.Int32)">
      <summary>
   returns a random int between 0 (inclusive) and max (exclusive)
   </summary>
      <param name="max">Max.</param>
      <returns>The float.</returns>
    </member>
    <member name="M:Nez.Random.NextAngle">
      <summary>
   returns a random float between 0 and 2 * PI
   </summary>
      <returns>The angle.</returns>
    </member>
    <member name="M:Nez.Random.NextUnitVector">
      <summary>
   Returns a random unit vector with direction between 0 and 2 * PI
   </summary>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.Random.NextColor">
      <summary>
   returns a random color
   </summary>
      <returns>The color.</returns>
    </member>
    <member name="M:Nez.Random.Range(System.Int32,System.Int32)">
      <summary>
   Returns a random integer between min (inclusive) and max (exclusive)
   </summary>
      <param name="min">The minimum.</param>
      <param name="max">The maximum.</param>
      <returns>System.Int32.</returns>
    </member>
    <member name="M:Nez.Random.Range(System.Single,System.Single)">
      <summary>
   Returns a random float between min (inclusive) and max (exclusive)
   </summary>
      <param name="min">The minimum.</param>
      <param name="max">The maximum.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Random.Range(Vector2,Vector2)">
      <summary>
   Returns a random Vector2, and x- and y-values of which are between min (inclusive) and max (exclusive)
   </summary>
      <param name="min">The minimum.</param>
      <param name="max">The maximum.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.Random.MinusOneToOne">
      <summary>
   returns a random float between -1 and 1
   </summary>
      <returns>The one to one.</returns>
    </member>
    <member name="M:Nez.Random.Chance(System.Single)">
      <summary>
   returns true if the next random is less than percent. Percent should be between 0 and 1
   </summary>
      <param name="percent">Percent.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Random.Chance(System.Int32)">
      <summary>
   returns true if the next random is less than value. Value should be between 0 and 100.
   </summary>
      <param name="value">Value.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Random.Choose``1(``0,``0)">
      <summary>
   randomly returns one of the given values
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="first">First.</param>
      <param name="second">Second.</param>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.Random.Choose``1(``0,``0,``0)">
      <summary>
   randomly returns one of the given values
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="first">First.</param>
      <param name="second">Second.</param>
      <param name="third">Third.</param>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.Random.Choose``1(``0,``0,``0,``0)">
      <summary>
   randomly returns one of the given values
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="first">First.</param>
      <param name="second">Second.</param>
      <param name="third">Third.</param>
      <param name="fourth">Fourth.</param>
      <returns>T.</returns>
    </member>
    <member name="T:Nez.RectangleF">
      <summary>
   Describes a 2D-rectangle.
   </summary>
    </member>
    <member name="F:Nez.RectangleF.X">
      <summary>
   The x coordinate of the top-left corner of this <see cref="T:Nez.RectangleF" />.
   </summary>
    </member>
    <member name="F:Nez.RectangleF.Y">
      <summary>
   The y coordinate of the top-left corner of this <see cref="T:Nez.RectangleF" />.
   </summary>
    </member>
    <member name="F:Nez.RectangleF.Width">
      <summary>
   The width of this <see cref="T:Nez.RectangleF" />.
   </summary>
    </member>
    <member name="F:Nez.RectangleF.Height">
      <summary>
   The height of this <see cref="T:Nez.RectangleF" />.
   </summary>
    </member>
    <member name="P:Nez.RectangleF.Empty">
      <summary>
   Returns a <see cref="T:Nez.RectangleF" /> with X=0, Y=0, Width=0, Height=0.
   </summary>
      <value>The empty.</value>
    </member>
    <member name="P:Nez.RectangleF.MaxRect">
      <summary>
   returns a RectangleF of float.Min/Max values
   </summary>
      <value>The max rect.</value>
    </member>
    <member name="P:Nez.RectangleF.Left">
      <summary>
   Returns the x coordinate of the left edge of this <see cref="T:Nez.RectangleF" />.
   </summary>
      <value>The left.</value>
    </member>
    <member name="P:Nez.RectangleF.Right">
      <summary>
   Returns the x coordinate of the right edge of this <see cref="T:Nez.RectangleF" />.
   </summary>
      <value>The right.</value>
    </member>
    <member name="P:Nez.RectangleF.Top">
      <summary>
   Returns the y coordinate of the top edge of this <see cref="T:Nez.RectangleF" />.
   </summary>
      <value>The top.</value>
    </member>
    <member name="P:Nez.RectangleF.Bottom">
      <summary>
   Returns the y coordinate of the bottom edge of this <see cref="T:Nez.RectangleF" />.
   </summary>
      <value>The bottom.</value>
    </member>
    <member name="P:Nez.RectangleF.Max">
      <summary>
   gets the max point of the rectangle, the bottom-right corner
   </summary>
      <value>The max.</value>
    </member>
    <member name="P:Nez.RectangleF.IsEmpty">
      <summary>
   Whether or not this <see cref="T:Nez.RectangleF" /> has a <see cref="F:Nez.RectangleF.Width" /> and
   <see cref="F:Nez.RectangleF.Height" /> of 0, and a <see cref="P:Nez.RectangleF.Location" /> of (0, 0).
   </summary>
      <value>
        <c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.RectangleF.Location">
      <summary>
   The top-left coordinates of this <see cref="T:Nez.RectangleF" />.
   </summary>
      <value>The location.</value>
    </member>
    <member name="P:Nez.RectangleF.Size">
      <summary>
   The width-height coordinates of this <see cref="T:Nez.RectangleF" />.
   </summary>
      <value>The size.</value>
    </member>
    <member name="P:Nez.RectangleF.Center">
      <summary>
   A <see cref="T:Microsoft.Xna.Framework.Point" /> located in the center of this <see cref="T:Nez.RectangleF" />.
   </summary>
      <value>The center.</value>
      <remarks>If <see cref="F:Nez.RectangleF.Width" /> or <see cref="F:Nez.RectangleF.Height" /> is an odd number,
   the center point will be rounded down.</remarks>
    </member>
    <member name="M:Nez.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
   Creates a new instance of <see cref="T:Nez.RectangleF" /> struct, with the specified
   position, width, and height.
   </summary>
      <param name="x">The x coordinate of the top-left corner of the created <see cref="T:Nez.RectangleF" />.</param>
      <param name="y">The y coordinate of the top-left corner of the created <see cref="T:Nez.RectangleF" />.</param>
      <param name="width">The width of the created <see cref="T:Nez.RectangleF" />.</param>
      <param name="height">The height of the created <see cref="T:Nez.RectangleF" />.</param>
    </member>
    <member name="M:Nez.RectangleF.#ctor(Vector2,Vector2)">
      <summary>
   Creates a new instance of <see cref="T:Nez.RectangleF" /> struct, with the specified
   location and size.
   </summary>
      <param name="location">The x and y coordinates of the top-left corner of the created <see cref="T:Nez.RectangleF" />.</param>
      <param name="size">The width and height of the created <see cref="T:Nez.RectangleF" />.</param>
    </member>
    <member name="M:Nez.RectangleF.FromMinMax(Vector2,Vector2)">
      <summary>
   creates a RectangleF given min/max points (top-left, bottom-right points)
   </summary>
      <param name="min">Minimum.</param>
      <param name="max">Max.</param>
      <returns>The minimum max points.</returns>
    </member>
    <member name="M:Nez.RectangleF.FromMinMax(System.Single,System.Single,System.Single,System.Single)">
      <summary>
   creates a RectangleF given min/max points (top-left, bottom-right points)
   </summary>
      <param name="minX">The minimum x.</param>
      <param name="minY">The minimum y.</param>
      <param name="maxX">The maximum x.</param>
      <param name="maxY">The maximum y.</param>
      <returns>The minimum max points.</returns>
    </member>
    <member name="M:Nez.RectangleF.RectEncompassingPoints(Vector2[])">
      <summary>
   given the points of a polygon calculates the bounds
   </summary>
      <param name="points">Points.</param>
      <returns>The from polygon points.</returns>
    </member>
    <member name="M:Nez.RectangleF.GetSide(Edge)">
      <summary>
   gets the position of the specified edge
   </summary>
      <param name="edge">Side.</param>
      <returns>The side.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:Nez.RectangleF.Contains(System.Int32,System.Int32)">
      <summary>
   Gets whether or not the provided coordinates lie within the bounds of this <see cref="T:Nez.RectangleF" />.
   </summary>
      <param name="x">The x coordinate of the point to check for containment.</param>
      <param name="y">The y coordinate of the point to check for containment.</param>
      <returns>
        <c>true</c> if the provided coordinates lie inside this <see cref="T:Nez.RectangleF" />; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.RectangleF.Contains(System.Single,System.Single)">
      <summary>
   Gets whether or not the provided coordinates lie within the bounds of this <see cref="T:Nez.RectangleF" />.
   </summary>
      <param name="x">The x coordinate of the point to check for containment.</param>
      <param name="y">The y coordinate of the point to check for containment.</param>
      <returns>
        <c>true</c> if the provided coordinates lie inside this <see cref="T:Nez.RectangleF" />; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.RectangleF.Contains(Point)">
      <summary>
   Gets whether or not the provided <see cref="T:Microsoft.Xna.Framework.Point" /> lies within the bounds of this <see cref="T:Nez.RectangleF" />.
   </summary>
      <param name="value">The coordinates to check for inclusion in this <see cref="T:Nez.RectangleF" />.</param>
      <returns>
        <c>true</c> if the provided <see cref="T:Microsoft.Xna.Framework.Point" /> lies inside this <see cref="T:Nez.RectangleF" />; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.RectangleF.Contains(Point@,System.Boolean@)">
      <summary>
   Gets whether or not the provided <see cref="T:Microsoft.Xna.Framework.Point" /> lies within the bounds of this <see cref="T:Nez.RectangleF" />.
   </summary>
      <param name="value">The coordinates to check for inclusion in this <see cref="T:Nez.RectangleF" />.</param>
      <param name="result">
        <c>true</c> if the provided <see cref="T:Microsoft.Xna.Framework.Point" /> lies inside this <see cref="T:Nez.RectangleF" />; <c>false</c> otherwise. As an output parameter.</param>
    </member>
    <member name="M:Nez.RectangleF.Contains(Vector2)">
      <summary>
   Gets whether or not the provided <see cref="T:Microsoft.Xna.Framework.Vector2" /> lies within the bounds of this <see cref="T:Nez.RectangleF" />.
   </summary>
      <param name="value">The coordinates to check for inclusion in this <see cref="T:Nez.RectangleF" />.</param>
      <returns>
        <c>true</c> if the provided <see cref="T:Microsoft.Xna.Framework.Vector2" /> lies inside this <see cref="T:Nez.RectangleF" />; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.RectangleF.Contains(Vector2@,System.Boolean@)">
      <summary>
   Gets whether or not the provided <see cref="T:Microsoft.Xna.Framework.Vector2" /> lies within the bounds of this <see cref="T:Nez.RectangleF" />.
   </summary>
      <param name="value">The coordinates to check for inclusion in this <see cref="T:Nez.RectangleF" />.</param>
      <param name="result">
        <c>true</c> if the provided <see cref="T:Microsoft.Xna.Framework.Vector2" /> lies inside this <see cref="T:Nez.RectangleF" />; <c>false</c> otherwise. As an output parameter.</param>
    </member>
    <member name="M:Nez.RectangleF.Contains(RectangleF)">
      <summary>
   Gets whether or not the provided <see cref="T:Nez.RectangleF" /> lies within the bounds of this <see cref="T:Nez.RectangleF" />.
   </summary>
      <param name="value">The <see cref="T:Nez.RectangleF" /> to check for inclusion in this <see cref="T:Nez.RectangleF" />.</param>
      <returns>
        <c>true</c> if the provided <see cref="T:Nez.RectangleF" />'s bounds lie entirely inside this <see cref="T:Nez.RectangleF" />; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.RectangleF.Contains(RectangleF@,System.Boolean@)">
      <summary>
   Gets whether or not the provided <see cref="T:Nez.RectangleF" /> lies within the bounds of this <see cref="T:Nez.RectangleF" />.
   </summary>
      <param name="value">The <see cref="T:Nez.RectangleF" /> to check for inclusion in this <see cref="T:Nez.RectangleF" />.</param>
      <param name="result">
        <c>true</c> if the provided <see cref="T:Nez.RectangleF" />'s bounds lie entirely inside this <see cref="T:Nez.RectangleF" />; <c>false</c> otherwise. As an output parameter.</param>
    </member>
    <member name="M:Nez.RectangleF.Inflate(System.Int32,System.Int32)">
      <summary>
   Adjusts the edges of this <see cref="T:Nez.RectangleF" /> by specified horizontal and vertical amounts.
   </summary>
      <param name="horizontalAmount">Value to adjust the left and right edges.</param>
      <param name="verticalAmount">Value to adjust the top and bottom edges.</param>
    </member>
    <member name="M:Nez.RectangleF.Inflate(System.Single,System.Single)">
      <summary>
   Adjusts the edges of this <see cref="T:Nez.RectangleF" /> by specified horizontal and vertical amounts.
   </summary>
      <param name="horizontalAmount">Value to adjust the left and right edges.</param>
      <param name="verticalAmount">Value to adjust the top and bottom edges.</param>
    </member>
    <member name="M:Nez.RectangleF.Intersects(RectangleF)">
      <summary>
   Gets whether or not the other <see cref="T:Nez.RectangleF" /> intersects with this rectangle.
   </summary>
      <param name="value">The other rectangle for testing.</param>
      <returns>
        <c>true</c> if other <see cref="T:Nez.RectangleF" /> intersects with this rectangle; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.RectangleF.Intersects(RectangleF@,System.Boolean@)">
      <summary>
   Gets whether or not the other <see cref="T:Nez.RectangleF" /> intersects with this rectangle.
   </summary>
      <param name="value">The other rectangle for testing.</param>
      <param name="result">
        <c>true</c> if other <see cref="T:Nez.RectangleF" /> intersects with this rectangle; <c>false</c> otherwise. As an output parameter.</param>
    </member>
    <member name="M:Nez.RectangleF.Intersects(RectangleF@)">
      <summary>
   returns true if other intersects rect
   </summary>
      <param name="other">other.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.RectangleF.RayIntersects(Ray2D@,System.Single@)">
      <summary>
   Rays the intersects.
   </summary>
      <param name="ray">The ray.</param>
      <param name="distance">The distance.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.RectangleF.RayIntersects(Ray)">
      <summary>
   Rays the intersects.
   </summary>
      <param name="ray">The ray.</param>
      <returns>System.Nullable&lt;System.Single&gt;.</returns>
    </member>
    <member name="M:Nez.RectangleF.GetClosestPointOnBoundsToOrigin">
      <summary>
   Gets the closest point on bounds to origin.
   </summary>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.RectangleF.GetClosestPointOnRectangleFToPoint(Vector2)">
      <summary>
   returns the closest point that is in or on the RectangleF to the given point
   </summary>
      <param name="point">Point.</param>
      <returns>The closest point on rectangle to point.</returns>
    </member>
    <member name="M:Nez.RectangleF.GetClosestPointOnRectangleBorderToPoint(Vector2,Vector2@)">
      <summary>
   gets the closest point that is on the rectangle border to the given point
   </summary>
      <param name="point">Point.</param>
      <param name="edgeNormal">The edge normal.</param>
      <returns>The closest point on rectangle border to point.</returns>
    </member>
    <member name="M:Nez.RectangleF.Intersect(RectangleF,RectangleF)">
      <summary>
   Creates a new <see cref="T:Nez.RectangleF" /> that contains overlapping region of two other rectangles.
   </summary>
      <param name="value1">The first <see cref="T:Nez.RectangleF" />.</param>
      <param name="value2">The second <see cref="T:Nez.RectangleF" />.</param>
      <returns>Overlapping region of the two rectangles.</returns>
    </member>
    <member name="M:Nez.RectangleF.Intersect(RectangleF@,RectangleF@,RectangleF@)">
      <summary>
   Creates a new <see cref="T:Nez.RectangleF" /> that contains overlapping region of two other rectangles.
   </summary>
      <param name="value1">The first <see cref="T:Nez.RectangleF" />.</param>
      <param name="value2">The second <see cref="T:Nez.RectangleF" />.</param>
      <param name="result">Overlapping region of the two rectangles as an output parameter.</param>
    </member>
    <member name="M:Nez.RectangleF.Offset(System.Int32,System.Int32)">
      <summary>
   Changes the <see cref="P:Nez.RectangleF.Location" /> of this <see cref="T:Nez.RectangleF" />.
   </summary>
      <param name="offsetX">The x coordinate to add to this <see cref="T:Nez.RectangleF" />.</param>
      <param name="offsetY">The y coordinate to add to this <see cref="T:Nez.RectangleF" />.</param>
    </member>
    <member name="M:Nez.RectangleF.Offset(System.Single,System.Single)">
      <summary>
   Changes the <see cref="P:Nez.RectangleF.Location" /> of this <see cref="T:Nez.RectangleF" />.
   </summary>
      <param name="offsetX">The x coordinate to add to this <see cref="T:Nez.RectangleF" />.</param>
      <param name="offsetY">The y coordinate to add to this <see cref="T:Nez.RectangleF" />.</param>
    </member>
    <member name="M:Nez.RectangleF.Offset(Point)">
      <summary>
   Changes the <see cref="P:Nez.RectangleF.Location" /> of this <see cref="T:Nez.RectangleF" />.
   </summary>
      <param name="amount">The x and y components to add to this <see cref="T:Nez.RectangleF" />.</param>
    </member>
    <member name="M:Nez.RectangleF.Offset(Vector2)">
      <summary>
   Changes the <see cref="P:Nez.RectangleF.Location" /> of this <see cref="T:Nez.RectangleF" />.
   </summary>
      <param name="amount">The x and y components to add to this <see cref="T:Nez.RectangleF" />.</param>
    </member>
    <member name="M:Nez.RectangleF.Union(RectangleF,RectangleF)">
      <summary>
   Creates a new <see cref="T:Nez.RectangleF" /> that completely contains two other rectangles.
   </summary>
      <param name="value1">The first <see cref="T:Nez.RectangleF" />.</param>
      <param name="value2">The second <see cref="T:Nez.RectangleF" />.</param>
      <returns>The union of the two rectangles.</returns>
    </member>
    <member name="M:Nez.RectangleF.Union(RectangleF@,RectangleF@,RectangleF@)">
      <summary>
   Creates a new <see cref="T:Nez.RectangleF" /> that completely contains two other rectangles.
   </summary>
      <param name="value1">The first <see cref="T:Nez.RectangleF" />.</param>
      <param name="value2">The second <see cref="T:Nez.RectangleF" />.</param>
      <param name="result">The union of the two rectangles as an output parameter.</param>
    </member>
    <member name="M:Nez.RectangleF.Overlap(RectangleF,RectangleF)">
      <summary>
   Creates a new <see cref="T:Nez.RectangleF" /> where the rectangles overlap.
   </summary>
      <param name="value1">The first <see cref="T:Nez.RectangleF" />.</param>
      <param name="value2">The second <see cref="T:Nez.RectangleF" />.</param>
      <returns>The overlap of the two rectangles.</returns>
    </member>
    <member name="M:Nez.RectangleF.Overlap(RectangleF@,RectangleF@,RectangleF@)">
      <summary>
   Creates a new <see cref="T:Nez.RectangleF" /> where the rectangles overlap.
   </summary>
      <param name="value1">The first <see cref="T:Nez.RectangleF" />.</param>
      <param name="value2">The second <see cref="T:Nez.RectangleF" />.</param>
      <param name="result">The overlap of the two rectangles as an output parameter.</param>
    </member>
    <member name="M:Nez.RectangleF.CalculateBounds(Vector2,Vector2,Vector2,Vector2,System.Single,System.Single,System.Single)">
      <summary>
   Calculates the bounds.
   </summary>
      <param name="parentPosition">The parent position.</param>
      <param name="position">The position.</param>
      <param name="origin">The origin.</param>
      <param name="scale">The scale.</param>
      <param name="rotation">The rotation.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
    </member>
    <member name="M:Nez.RectangleF.GetSweptBroadphaseBounds(System.Single,System.Single)">
      <summary>
   returns a RectangleF that spans the current rect and the provided delta positions
   </summary>
      <param name="deltaX">The delta x.</param>
      <param name="deltaY">The delta y.</param>
      <returns>The swept broadphase box.</returns>
    </member>
    <member name="M:Nez.RectangleF.CollisionCheck(RectangleF@,System.Single@,System.Single@)">
      <summary>
   returns true if the boxes are colliding
   moveX and moveY will return the movement that b1 must move to avoid the collision
   </summary>
      <param name="other">Other.</param>
      <param name="moveX">Move x.</param>
      <param name="moveY">Move y.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.RectangleF.GetIntersectionDepth(RectangleF@,RectangleF@)">
      <summary>
   Calculates the signed depth of intersection between two rectangles.
   </summary>
      <param name="rectA">The rect a.</param>
      <param name="rectB">The rect b.</param>
      <returns>The amount of overlap between two intersecting rectangles. These depth values can be negative depending on which sides the rectangles
   intersect. This allows callers to determine the correct direction to push objects in order to resolve collisions.
   If the rectangles are not intersecting, Vector2.Zero is returned.</returns>
    </member>
    <member name="M:Nez.RectangleF.Equals(System.Object)">
      <summary>
   Compares whether current instance is equal to specified <see cref="T:System.Object" />.
   </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare.</param>
      <returns>
        <c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.RectangleF.Equals(RectangleF)">
      <summary>
   Compares whether current instance is equal to specified <see cref="T:Nez.RectangleF" />.
   </summary>
      <param name="other">The <see cref="T:Nez.RectangleF" /> to compare.</param>
      <returns>
        <c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.RectangleF.GetHashCode">
      <summary>
   Gets the hash code of this <see cref="T:Nez.RectangleF" />.
   </summary>
      <returns>Hash code of this <see cref="T:Nez.RectangleF" />.</returns>
    </member>
    <member name="M:Nez.RectangleF.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> representation of this <see cref="T:Nez.RectangleF" /> in the format:
   {X:[<see cref="F:Nez.RectangleF.X" />] Y:[<see cref="F:Nez.RectangleF.Y" />] Width:[<see cref="F:Nez.RectangleF.Width" />] Height:[<see cref="F:Nez.RectangleF.Height" />]}
   </summary>
      <returns>
        <see cref="T:System.String" /> representation of this <see cref="T:Nez.RectangleF" />.</returns>
    </member>
    <member name="M:Nez.RectangleF.op_Equality(RectangleF,RectangleF)">
      <summary>
   Compares whether two <see cref="T:Nez.RectangleF" /> instances are equal.
   </summary>
      <param name="a">
        <see cref="T:Nez.RectangleF" /> instance on the left of the equal sign.</param>
      <param name="b">
        <see cref="T:Nez.RectangleF" /> instance on the right of the equal sign.</param>
      <returns>
        <c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.RectangleF.op_Inequality(RectangleF,RectangleF)">
      <summary>
   Compares whether two <see cref="T:Nez.RectangleF" /> instances are not equal.
   </summary>
      <param name="a">
        <see cref="T:Nez.RectangleF" /> instance on the left of the not equal sign.</param>
      <param name="b">
        <see cref="T:Nez.RectangleF" /> instance on the right of the not equal sign.</param>
      <returns>
        <c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.RectangleF.op_Implicit(RectangleF)~Rectangle">
      <summary>
   Performs an implicit conversion from <see cref="T:Nez.RectangleF" /> to <see cref="T:Microsoft.Xna.Framework.Rectangle" />.
   </summary>
      <param name="self">The self.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="T:Nez.SubpixelFloat">
      <summary>
   simple helper class that manages a float value. It stores the value until the total accumulated is greater than 1. Once it exceeds
   1 the value will be added on to amount when update is called.
   General usage would be something like the following.
   - calculate your objects velocity however you normally would
   - multiply by deltaTime to keep it framerate independent
   - pass the calculated delta movement for this frame to the SubpixelFloat.update method for both x and y. This will result in deltaMove
   being rounded to an int and the SubpixelFloat will deal with accumulating the excess value.
   var deltaMove = velocity * Time.deltaTime;
   _x.update( ref deltaMove.X );
   _y.update( ref deltaMove.Y );
   </summary>
    </member>
    <member name="F:Nez.SubpixelFloat.Remainder">
      <summary>
   The remainder
   </summary>
    </member>
    <member name="M:Nez.SubpixelFloat.Update(System.Single@)">
      <summary>
   increments remainder by amount, truncates the value to an int, stores off the new remainder and sets amount to the current value.
   </summary>
      <param name="amount">Amount.</param>
    </member>
    <member name="M:Nez.SubpixelFloat.Reset">
      <summary>
   resets the remainder to 0. Useful when an object collides with an immovable object. In that case you will want to zero out the
   subpixel remainder since it is null and void due to the collision.
   </summary>
    </member>
    <member name="T:Nez.SubpixelVector2">
      <summary>
   Struct SubpixelVector2
   </summary>
    </member>
    <member name="M:Nez.SubpixelVector2.Update(Vector2@)">
      <summary>
   increments s/y remainders by amount, truncates the values to an int, stores off the new remainders and sets amount to the current value.
   </summary>
      <param name="amount">Amount.</param>
    </member>
    <member name="M:Nez.SubpixelVector2.Reset">
      <summary>
   resets the remainder to 0. Useful when an object collides with an immovable object. In that case you will want to zero out the
   subpixel remainder since it is null and void due to the collision.
   </summary>
    </member>
    <member name="T:Nez.PhysicsShapes.ShapeCollisions">
      <summary> various collision routines for Shapes. Most of these expect the first Shape to be in the space of the second (i.e. shape1.pos should be set to shape1.pos - shape2.pos). </summary>
      <summary> Class ShapeCollisions. </summary>
      <summary> Class ShapeCollisions. </summary>
      <summary> Class ShapeCollisions. </summary>
      <summary> Class ShapeCollisions. </summary>
    </member>
    <member name="M:Nez.PhysicsShapes.ShapeCollisions.Collide(Shape,Shape,Vector2,RaycastHit@)">
      <summary>
   swept collision check
   </summary>
      <param name="first">First.</param>
      <param name="second">Second.</param>
      <param name="deltaMovement">Delta movement.</param>
      <param name="hit">Hit.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
      <exception cref="T:System.NotImplementedException">this should probably be in each Shape class and it still needs to be implemented ;)</exception>
    </member>
    <member name="M:Nez.PhysicsShapes.ShapeCollisions.BoxToBoxCast(Box,Box,Vector2,RaycastHit@)">
      <summary>
   checks the result of a box being moved by deltaMovement with second
   </summary>
      <param name="first">First.</param>
      <param name="second">Second.</param>
      <param name="movement">The movement.</param>
      <param name="hit">Hit.</param>
      <returns>
        <c>true</c>, if to box cast was boxed, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.ShapeCollisions.BoxToBox(Box,Box,CollisionResult@)">
      <summary>
   Boxes to box.
   </summary>
      <param name="first">The first.</param>
      <param name="second">The second.</param>
      <param name="result">The result.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.ShapeCollisions.PolygonToPolygonCast(Polygon,Polygon,Vector2,RaycastHit@)">
      <summary>
   Polygons to polygon cast.
   </summary>
      <param name="first">The first.</param>
      <param name="second">The second.</param>
      <param name="deltaMovement">The delta movement.</param>
      <param name="hit">The hit.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.ShapeCollisions.PolygonToPolygonOLD(Polygon,Polygon,CollisionResult@)">
      <summary>
   Polygons to polygon old.
   </summary>
      <param name="first">The first.</param>
      <param name="second">The second.</param>
      <param name="result">The result.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.ShapeCollisions.CircleToCircleCast(Circle,Circle,Vector2,RaycastHit@)">
      <summary>
   Circles to circle cast.
   </summary>
      <param name="first">The first.</param>
      <param name="second">The second.</param>
      <param name="deltaMovement">The delta movement.</param>
      <param name="hit">The hit.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.ShapeCollisions.CircleToCircle(Circle,Circle,CollisionResult@)">
      <summary>
   Circles to circle.
   </summary>
      <param name="first">The first.</param>
      <param name="second">The second.</param>
      <param name="result">The result.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.ShapeCollisions.CircleToBox(Circle,Box,CollisionResult@)">
      <summary>
   works for circles whos center is in the box as well as just overlapping with the center out of the box.
   </summary>
      <param name="circle">First.</param>
      <param name="box">Second.</param>
      <param name="result">Result.</param>
      <returns>
        <c>true</c>, if to box was circled, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.ShapeCollisions.CircleToPolygon(Circle,Polygon,CollisionResult@)">
      <summary>
   Circles to polygon.
   </summary>
      <param name="circle">The circle.</param>
      <param name="polygon">The polygon.</param>
      <param name="result">The result.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.ShapeCollisions.ClosestPointOnLine(Vector2,Vector2,Vector2)">
      <summary>
   Closests the point on line.
   </summary>
      <param name="lineA">The line a.</param>
      <param name="lineB">The line b.</param>
      <param name="closestTo">The closest to.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.ShapeCollisions.LineToPoly(Vector2,Vector2,Polygon,RaycastHit@)">
      <summary>
   Lines to poly.
   </summary>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <param name="polygon">The polygon.</param>
      <param name="hit">The hit.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.ShapeCollisions.LineToCircle(Vector2,Vector2,Circle,RaycastHit@)">
      <summary>
   Lines to circle.
   </summary>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <param name="s">The s.</param>
      <param name="hit">The hit.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.ShapeCollisions.LineToLine(Vector2,Vector2,Vector2,Vector2,Vector2@)">
      <summary>
   Lines to line.
   </summary>
      <param name="a1">The a1.</param>
      <param name="a2">The a2.</param>
      <param name="b1">The b1.</param>
      <param name="b2">The b2.</param>
      <param name="intersection">The intersection.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.ShapeCollisions.PointToCircle(Vector2,Circle,CollisionResult@)">
      <summary>
   Points to circle.
   </summary>
      <param name="point">The point.</param>
      <param name="circle">The circle.</param>
      <param name="result">The result.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.ShapeCollisions.PointToBox(Vector2,Box,CollisionResult@)">
      <summary>
   Points to box.
   </summary>
      <param name="point">The point.</param>
      <param name="box">The box.</param>
      <param name="result">The result.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.ShapeCollisions.PointToPoly(Vector2,Polygon,CollisionResult@)">
      <summary>
   Points to poly.
   </summary>
      <param name="point">The point.</param>
      <param name="poly">The poly.</param>
      <param name="result">The result.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.ShapeCollisions.PolygonToPolygon(Polygon,Polygon,CollisionResult@)">
      <summary>
   checks for a collision between two Polygons
   </summary>
      <param name="first">Polygon a.</param>
      <param name="second">Polygon b.</param>
      <param name="result">The result.</param>
      <returns>The collision.</returns>
    </member>
    <member name="T:Nez.PhysicsShapes.Box">
      <summary>
   special case of a Polygon. When doing SAT collision checks we only need to check 2 axes instead of 8
   </summary>
    </member>
    <member name="F:Nez.PhysicsShapes.Box.Width">
      <summary>
   The width
   </summary>
    </member>
    <member name="F:Nez.PhysicsShapes.Box.Height">
      <summary>
   The height
   </summary>
    </member>
    <member name="M:Nez.PhysicsShapes.Box.#ctor(System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.PhysicsShapes.Box" /> class.
   </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
    </member>
    <member name="M:Nez.PhysicsShapes.Box.UpdateBox(System.Single,System.Single)">
      <summary>
   updates the Box points, recalculates the center and sets the width/height
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
    </member>
    <member name="M:Nez.PhysicsShapes.Box.Overlaps(Shape)">
      <summary>
   Overlapses the specified other.
   </summary>
      <param name="other">The other.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.Box.CollidesWithShape(Shape,CollisionResult@)">
      <summary>
   Collideses the with shape.
   </summary>
      <param name="other">The other.</param>
      <param name="result">The result.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.Box.ContainsPoint(Vector2)">
      <summary>
   essentially what the algorithm is doing is shooting a ray from point out. If it intersects an odd number of polygon sides
   we know it is inside the polygon.
   </summary>
      <param name="point">The point.</param>
      <returns>
        <c>true</c> if the specified point contains point; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.Box.PointCollidesWithShape(Vector2,CollisionResult@)">
      <summary>
   Points the collides with shape.
   </summary>
      <param name="point">The point.</param>
      <param name="result">The result.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="T:Nez.PhysicsShapes.Circle">
      <summary>
   Class Circle.
   Implements the <see cref="T:Nez.PhysicsShapes.Shape" /></summary>
      <seealso cref="T:Nez.PhysicsShapes.Shape" />
    </member>
    <member name="F:Nez.PhysicsShapes.Circle.Radius">
      <summary>
   The radius
   </summary>
    </member>
    <member name="M:Nez.PhysicsShapes.Circle.#ctor(System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.PhysicsShapes.Circle" /> class.
   </summary>
      <param name="radius">The radius.</param>
    </member>
    <member name="M:Nez.PhysicsShapes.Circle.Overlaps(Shape)">
      <summary>
   Overlapses the specified other.
   </summary>
      <param name="other">The other.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="M:Nez.PhysicsShapes.Circle.CollidesWithShape(Shape,CollisionResult@)">
      <summary>
   Collideses the with shape.
   </summary>
      <param name="other">The other.</param>
      <param name="result">The result.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="M:Nez.PhysicsShapes.Circle.CollidesWithLine(Vector2,Vector2,RaycastHit@)">
      <summary>
   Collideses the with line.
   </summary>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <param name="hit">The hit.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.Circle.ContainsPoint(Vector2)">
      <summary>
   Gets whether or not the provided point lie within the bounds of this <see cref="T:Nez.PhysicsShapes.Circle" />.
   </summary>
      <param name="point">the point</param>
      <returns>
        <c>true</c> if the provided coordinates lie inside this <see cref="T:Nez.PhysicsShapes.Circle" />; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.Circle.GetPointAlongEdge(System.Single)">
      <summary>
   Gets the point at the edge of this <see cref="T:Nez.PhysicsShapes.Circle" /> from the provided angle
   </summary>
      <param name="angle">an angle in radians</param>
      <returns>
        <see cref="T:Microsoft.Xna.Framework.Vector2" /> representing the point on this <see cref="T:Nez.PhysicsShapes.Circle" />'s surface at the specified angle</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.Circle.ContainsPoint(System.Single,System.Single)">
      <summary>
   Gets whether or not the provided coordinates lie within the bounds of this <see cref="T:Nez.PhysicsShapes.Circle" />.
   </summary>
      <param name="x">The x coordinate of the point to check for containment.</param>
      <param name="y">The y coordinate of the point to check for containment.</param>
      <returns>
        <c>true</c> if the provided coordinates lie inside this <see cref="T:Nez.PhysicsShapes.Circle" />; <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.Circle.ContainsPoint(Vector2@)">
      <summary>
   Gets whether or not the provided <see cref="T:Microsoft.Xna.Framework.Vector2" /> lies within the bounds of this <see cref="T:Nez.PhysicsShapes.Circle" />.
   </summary>
      <param name="point">Point.</param>
      <returns>
        <c>true</c> if the specified point contains point; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.Circle.PointCollidesWithShape(Vector2,CollisionResult@)">
      <summary>
   Points the collides with shape.
   </summary>
      <param name="point">The point.</param>
      <param name="result">The result.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="T:Nez.CollisionResult">
      <summary>
   Struct CollisionResult
   </summary>
    </member>
    <member name="F:Nez.CollisionResult.Collider">
      <summary>
   the collider that was collided with
   </summary>
    </member>
    <member name="F:Nez.CollisionResult.Normal">
      <summary>
   The normal vector of the surface hit by the shape
   </summary>
    </member>
    <member name="F:Nez.CollisionResult.MinimumTranslationVector">
      <summary>
   The translation to apply to the first shape to push the shapes appart
   </summary>
    </member>
    <member name="F:Nez.CollisionResult.Point">
      <summary>
   not used for all collisions types! Check the ShapeCollisions class before relying on this field!
   </summary>
    </member>
    <member name="M:Nez.CollisionResult.RemoveHorizontalTranslation(Vector2)">
      <summary>
   alters the minimumTranslationVector so that it removes the x-component of the translation if there was no movement in
   the same direction.
   </summary>
      <param name="deltaMovement">the original movement that caused the collision</param>
    </member>
    <member name="M:Nez.CollisionResult.InvertResult">
      <summary>
   inverts the normal and MTV
   </summary>
    </member>
    <member name="M:Nez.CollisionResult.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.PhysicsShapes.Polygon">
      <summary>
   Class Polygon.
   Implements the <see cref="T:Nez.PhysicsShapes.Shape" /></summary>
      <seealso cref="T:Nez.PhysicsShapes.Shape" />
    </member>
    <member name="F:Nez.PhysicsShapes.Polygon.Points">
      <summary>
   the points that make up the Polygon. They should be CW and convex.
   </summary>
    </member>
    <member name="P:Nez.PhysicsShapes.Polygon.EdgeNormals">
      <summary>
   edge normals are used for SAT collision detection. We cache them to avoid the squareroots. Note that Boxes will only have
   2 edgeNormals since the other two sides are parallel.
   </summary>
      <value>The edge normals.</value>
    </member>
    <member name="F:Nez.PhysicsShapes.Polygon._edgeNormals">
      <summary>
   The edge normals
   </summary>
    </member>
    <member name="F:Nez.PhysicsShapes.Polygon.IsUnrotated">
      <summary>
   The is unrotated
   </summary>
    </member>
    <member name="M:Nez.PhysicsShapes.Polygon.#ctor(Vector2[])">
      <summary>
   constructs a Polygon from points. points should be specified in clockwise fashion without duplicating the first/last point and
   they should be centered around 0,0.
   </summary>
      <param name="points">Points.</param>
    </member>
    <member name="M:Nez.PhysicsShapes.Polygon.#ctor(System.Int32,System.Single)">
      <summary>
   creates a symmetrical polygon based on the radius and vertCount passed in
   </summary>
      <param name="vertCount">Vert count.</param>
      <param name="radius">Radius.</param>
    </member>
    <member name="M:Nez.PhysicsShapes.Polygon.SetPoints(Vector2[])">
      <summary>
   resets the points and recalculates center and edge normals
   </summary>
      <param name="points">The points.</param>
    </member>
    <member name="M:Nez.PhysicsShapes.Polygon.RecalculateCenterAndEdgeNormals">
      <summary>
   recalculates the Polygon centers. This must be called if the points are changed!
   </summary>
    </member>
    <member name="M:Nez.PhysicsShapes.Polygon.BuildSymmetricalPolygon(System.Int32,System.Single)">
      <summary>
   builds a symmetrical polygon (hexagon, octogon, n-gon) and returns the points
   </summary>
      <param name="vertCount">Vert count.</param>
      <param name="radius">Radius.</param>
      <returns>The symmetrical polygon.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.Polygon.RecenterPolygonVerts(Vector2[])">
      <summary>
   recenters the points of the polygon
   </summary>
      <param name="points">Points.</param>
    </member>
    <member name="M:Nez.PhysicsShapes.Polygon.FindPolygonCenter(Vector2[])">
      <summary>
   finds the center of the Polygon. Note that this will be accurate for regular polygons. Irregular polygons have no center.
   </summary>
      <param name="points">Points.</param>
      <returns>The polygon center.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.Polygon.GetFarthestPointInDirection(Vector2[],Vector2)">
      <summary>
   Gets the farthest point in direction.
   </summary>
      <param name="points">The points.</param>
      <param name="direction">The direction.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.Polygon.GetClosestPointOnPolygonToPoint(Vector2[],Vector2,System.Single@,Vector2@)">
      <summary>
   iterates all the edges of the polygon and gets the closest point on any edge to point. Returns via out the squared distance
   to the closest point and the normal of the edge it is on. point should be in the space of the Polygon (point - poly.position)
   </summary>
      <param name="points">The points.</param>
      <param name="point">Point.</param>
      <param name="distanceSquared">Distance squared.</param>
      <param name="edgeNormal">Edge normal.</param>
      <returns>The closest point on polygon to point.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.Polygon.RotatePolygonVerts(System.Single,Vector2[],Vector2[])">
      <summary>
   rotates the originalPoints and copys the rotated values to rotatedPoints
   </summary>
      <param name="radians">Radians.</param>
      <param name="originalPoints">Original points.</param>
      <param name="rotatedPoints">Rotated points.</param>
    </member>
    <member name="M:Nez.PhysicsShapes.Polygon.Overlaps(Shape)">
      <summary>
   Overlapses the specified other.
   </summary>
      <param name="other">The other.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="M:Nez.PhysicsShapes.Polygon.CollidesWithShape(Shape,CollisionResult@)">
      <summary>
   Collideses the with shape.
   </summary>
      <param name="other">The other.</param>
      <param name="result">The result.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="M:Nez.PhysicsShapes.Polygon.CollidesWithLine(Vector2,Vector2,RaycastHit@)">
      <summary>
   Collideses the with line.
   </summary>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <param name="hit">The hit.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.Polygon.ContainsPoint(Vector2)">
      <summary>
   essentially what the algorithm is doing is shooting a ray from point out. If it intersects an odd number of polygon sides
   we know it is inside the polygon.
   </summary>
      <param name="point">The point.</param>
      <returns>
        <c>true</c> if the specified point contains point; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.Polygon.PointCollidesWithShape(Vector2,CollisionResult@)">
      <summary>
   Points the collides with shape.
   </summary>
      <param name="point">The point.</param>
      <param name="result">The result.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="T:Nez.PhysicsShapes.BETA.RealtimeCollisions">
      <summary>
   Class RealtimeCollisions.
   </summary>
    </member>
    <member name="M:Nez.PhysicsShapes.BETA.RealtimeCollisions.IntersectMovingCircleBox(Circle,Box,Vector2,System.Single@)">
      <summary>
   Intersects the moving circle box.
   </summary>
      <param name="s">The s.</param>
      <param name="b">The b.</param>
      <param name="movement">The movement.</param>
      <param name="time">The time.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.BETA.RealtimeCollisions.IntersectMovingCircleCircle(Circle,Circle,Vector2,System.Single@)">
      <summary>
   Intersects the moving circle circle.
   </summary>
      <param name="s0">The s0.</param>
      <param name="s1">The s1.</param>
      <param name="movement">The movement.</param>
      <param name="time">The time.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.BETA.RealtimeCollisions.IntersectMovingCircleCircleTwo(Circle,Circle,Vector2,System.Single@)">
      <summary>
   Intersects the moving circle circle two.
   </summary>
      <param name="first">The first.</param>
      <param name="second">The second.</param>
      <param name="movement">The movement.</param>
      <param name="time">The time.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.BETA.RealtimeCollisions.TestCircleBox(Circle,Box,Vector2@)">
      <summary>
   checks to see if circle overlaps box and returns (via out param) the point of intersection
   </summary>
      <param name="circle">Circle.</param>
      <param name="box">Box.</param>
      <param name="point">Point.</param>
      <returns>
        <c>true</c>, if circle box was tested, <c>false</c> otherwise.</returns>
    </member>
    <member name="T:Nez.PhysicsShapes.Shape">
      <summary>
   Class Shape.
   </summary>
    </member>
    <member name="M:Nez.PhysicsShapes.Shape.Overlaps(Shape)">
      <summary>
   Overlapses the specified other.
   </summary>
      <param name="other">The other.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.Shape.CollidesWithShape(Shape,CollisionResult@)">
      <summary>
   Collideses the with shape.
   </summary>
      <param name="other">The other.</param>
      <param name="result">The result.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.Shape.CollidesWithLine(Vector2,Vector2,RaycastHit@)">
      <summary>
   Collideses the with line.
   </summary>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <param name="hit">The hit.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.Shape.ContainsPoint(Vector2)">
      <summary>
   Determines whether the specified point contains point.
   </summary>
      <param name="point">The point.</param>
      <returns>
        <c>true</c> if the specified point contains point; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.Shape.PointCollidesWithShape(Vector2,CollisionResult@)">
      <summary>
   Points the collides with shape.
   </summary>
      <param name="point">The point.</param>
      <param name="result">The result.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.PhysicsShapes.Shape.Clone">
      <summary>
   Clones this instance.
   </summary>
      <returns>Shape.</returns>
    </member>
    <member name="T:Nez.Verlet.Ball">
      <summary>
   single Particle composite
   </summary>
    </member>
    <member name="M:Nez.Verlet.Ball.#ctor(Vector2,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Verlet.Ball" /> class.
   </summary>
      <param name="position">The position.</param>
      <param name="radius">The radius.</param>
    </member>
    <member name="T:Nez.Verlet.Box">
      <summary>
   creates a simple box with diagonal contraints to keep it rigid
   </summary>
    </member>
    <member name="M:Nez.Verlet.Box.#ctor(Vector2,System.Single,System.Single,System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Verlet.Box" /> class.
   </summary>
      <param name="center">The center.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="borderStiffness">The border stiffness.</param>
      <param name="diagonalStiffness">The diagonal stiffness.</param>
    </member>
    <member name="T:Nez.Verlet.Cloth">
      <summary>
   Class Cloth.
   Implements the <see cref="T:Nez.Verlet.Composite" /></summary>
      <seealso cref="T:Nez.Verlet.Composite" />
    </member>
    <member name="M:Nez.Verlet.Cloth.#ctor(Vector2,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Boolean)">
      <summary>
   creates a Cloth. If connectHorizontalParticles is false it will not link horizontal Particles and create a hair-like cloth
   </summary>
      <param name="topLeftPosition">Top left position.</param>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <param name="segments">Segments.</param>
      <param name="stiffness">Stiffness.</param>
      <param name="tearSensitivity">Tear sensitivity.</param>
      <param name="connectHorizontalParticles">If set to <c>true</c> connect horizontal particles.</param>
    </member>
    <member name="T:Nez.Verlet.Composite">
      <summary>
   represents an object in the Verlet world. Consists of Particles and Constraints and handles updating them
   </summary>
    </member>
    <member name="F:Nez.Verlet.Composite.Friction">
      <summary>
   friction applied to all Particle movement to dampen it. Value should be very close to 1.
   </summary>
    </member>
    <member name="F:Nez.Verlet.Composite.DrawParticles">
      <summary>
   should Particles be rendered when doing a debugRender?
   </summary>
    </member>
    <member name="F:Nez.Verlet.Composite.DrawConstraints">
      <summary>
   should Constraints be rendered when doing a debugRender?
   </summary>
    </member>
    <member name="F:Nez.Verlet.Composite.CollidesWithLayers">
      <summary>
   layer mask of all the layers this Collider should collide with when Entity.move methods are used. defaults to all layers.
   </summary>
    </member>
    <member name="F:Nez.Verlet.Composite.Particles">
      <summary>
   The particles
   </summary>
    </member>
    <member name="M:Nez.Verlet.Composite.AddParticle(Particle)">
      <summary>
   adds a Particle to the Composite
   </summary>
      <param name="particle">Particle.</param>
      <returns>The particle.</returns>
    </member>
    <member name="M:Nez.Verlet.Composite.RemoveParticle(Particle)">
      <summary>
   removes the Particle from the Composite
   </summary>
      <param name="particle">Particle.</param>
    </member>
    <member name="M:Nez.Verlet.Composite.RemoveAll">
      <summary>
   removes all Particles and Constraints from the Composite
   </summary>
    </member>
    <member name="M:Nez.Verlet.Composite.AddConstraint``1(``0)">
      <summary>
   adds a Constraint to the Composite
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="constraint">Constraint.</param>
      <returns>The constraint.</returns>
    </member>
    <member name="M:Nez.Verlet.Composite.RemoveConstraint(Constraint)">
      <summary>
   removes a Constraint from the Composite
   </summary>
      <param name="constraint">Constraint.</param>
    </member>
    <member name="M:Nez.Verlet.Composite.ApplyForce(Vector2)">
      <summary>
   applies a force to all Particles in this Composite
   </summary>
      <param name="force">Force.</param>
    </member>
    <member name="M:Nez.Verlet.Composite.SolveConstraints">
      <summary>
   handles solving all Constraints
   </summary>
    </member>
    <member name="M:Nez.Verlet.Composite.UpdateParticles(System.Single,Vector2)">
      <summary>
   applies gravity to each Particle and does the verlet integration
   </summary>
      <param name="deltaTimeSquared">Delta time.</param>
      <param name="gravity">Gravity.</param>
    </member>
    <member name="M:Nez.Verlet.Composite.HandleConstraintCollisions">
      <summary>
   Handles the constraint collisions.
   </summary>
    </member>
    <member name="M:Nez.Verlet.Composite.DebugRender(Batcher)">
      <summary>
   Debugs the render.
   </summary>
      <param name="batcher">The batcher.</param>
    </member>
    <member name="T:Nez.Verlet.LineSegments">
      <summary>
   a series of points connected with DistanceConstraints
   </summary>
    </member>
    <member name="M:Nez.Verlet.LineSegments.#ctor(Vector2[],System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Verlet.LineSegments" /> class.
   </summary>
      <param name="vertices">The vertices.</param>
      <param name="stiffness">The stiffness.</param>
    </member>
    <member name="M:Nez.Verlet.LineSegments.PinParticleAtIndex(System.Int32)">
      <summary>
   pins the Particle at the given index
   </summary>
      <param name="index">Index.</param>
      <returns>LineSegments.</returns>
    </member>
    <member name="T:Nez.Verlet.Ragdoll">
      <summary>
   Class Ragdoll.
   Implements the <see cref="T:Nez.Verlet.Composite" /></summary>
      <seealso cref="T:Nez.Verlet.Composite" />
    </member>
    <member name="M:Nez.Verlet.Ragdoll.#ctor(System.Single,System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Verlet.Ragdoll" /> class.
   </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <param name="bodyHeight">Height of the body.</param>
    </member>
    <member name="T:Nez.Verlet.Tire">
      <summary>
   Class Tire.
   Implements the <see cref="T:Nez.Verlet.Composite" /></summary>
      <seealso cref="T:Nez.Verlet.Composite" />
    </member>
    <member name="M:Nez.Verlet.Tire.#ctor(Vector2,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Verlet.Tire" /> class.
   </summary>
      <param name="origin">The origin.</param>
      <param name="radius">The radius.</param>
      <param name="segments">The segments.</param>
      <param name="spokeStiffness">The spoke stiffness.</param>
      <param name="treadStiffness">The tread stiffness.</param>
    </member>
    <member name="T:Nez.Verlet.Tree">
      <summary>
   fractal tree. Converted from https://github.com/subprotocol/verlet-js/blob/master/examples/tree.html
   </summary>
    </member>
    <member name="M:Nez.Verlet.Tree.#ctor(Vector2,System.Int32,System.Single,System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Verlet.Tree" /> class.
   </summary>
      <param name="origin">The origin.</param>
      <param name="depth">The depth.</param>
      <param name="branchLength">Length of the branch.</param>
      <param name="theta">The theta.</param>
      <param name="segmentCoef">The segment coef.</param>
    </member>
    <member name="T:Nez.Verlet.AngleConstraint">
      <summary>
   constrains 3 particles to an angle
   </summary>
    </member>
    <member name="F:Nez.Verlet.AngleConstraint.Stiffness">
      <summary>
   [0-1]. the stiffness of the Constraint. Lower values are more springy and higher are more rigid.
   </summary>
    </member>
    <member name="F:Nez.Verlet.AngleConstraint.AngleInRadians">
      <summary>
   the angle in radians that the Constraint will attempt to maintain
   </summary>
    </member>
    <member name="M:Nez.Verlet.AngleConstraint.#ctor(Particle,Particle,Particle,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Verlet.AngleConstraint" /> class.
   </summary>
      <param name="a">a.</param>
      <param name="center">The center.</param>
      <param name="c">The c.</param>
      <param name="stiffness">The stiffness.</param>
    </member>
    <member name="M:Nez.Verlet.AngleConstraint.Solve">
      <summary>
   solves the Constraint
   </summary>
    </member>
    <member name="T:Nez.Verlet.Constraint">
      <summary>
   Class Constraint.
   </summary>
    </member>
    <member name="F:Nez.Verlet.Constraint.CollidesWithColliders">
      <summary>
   if true, the Constraint will check for collisions with standard Nez Colliders. Inner Constraints do not need to have this set to
   true.
   </summary>
    </member>
    <member name="M:Nez.Verlet.Constraint.Solve">
      <summary>
   solves the Constraint
   </summary>
    </member>
    <member name="M:Nez.Verlet.Constraint.HandleCollisions(System.Int32)">
      <summary>
   if collidesWithColliders is true this will be called
   </summary>
      <param name="collidesWithLayers">The collides with layers.</param>
    </member>
    <member name="M:Nez.Verlet.Constraint.DebugRender(Batcher)">
      <summary>
   debug renders the Constraint
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="T:Nez.Verlet.DistanceConstraint">
      <summary>
   maintains a specified distance betweeen two Particles. The stiffness adjusts how rigid or springy the constraint will be.
   </summary>
    </member>
    <member name="F:Nez.Verlet.DistanceConstraint.Stiffness">
      <summary>
   [0-1]. the stiffness of the Constraint. Lower values are more springy and higher are more rigid.
   </summary>
    </member>
    <member name="F:Nez.Verlet.DistanceConstraint.RestingDistance">
      <summary>
   the resting distnace of the Constraint. It will always try to get to this distance.
   </summary>
    </member>
    <member name="F:Nez.Verlet.DistanceConstraint.TearSensitivity">
      <summary>
   if the ratio of the current distance / restingDistance is greater than tearSensitivity the Constaint will be removed. Values
   should be above 1 and higher values mean rupture wont occur until the Constaint is stretched further.
   </summary>
    </member>
    <member name="F:Nez.Verlet.DistanceConstraint.ShouldApproximateCollisionsWithPoints">
      <summary>
   sets whether collisions should be approximated by points. This should be used for Constraints that need to collided on both
   sides. SAT only works with single sided collisions.
   </summary>
    </member>
    <member name="F:Nez.Verlet.DistanceConstraint.TotalPointsToApproximateCollisionsWith">
      <summary>
   if shouldApproximateCollisionsWithPoints is true, this controls how accurate the collisions check will be. Higher numbers mean
   more collisions checks.
   </summary>
    </member>
    <member name="M:Nez.Verlet.DistanceConstraint.#ctor(Particle,Particle,System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Verlet.DistanceConstraint" /> class.
   </summary>
      <param name="first">The first.</param>
      <param name="second">The second.</param>
      <param name="stiffness">The stiffness.</param>
      <param name="distance">The distance.</param>
    </member>
    <member name="M:Nez.Verlet.DistanceConstraint.Create(Particle,Particle,Particle,System.Single,System.Single)">
      <summary>
   creates a faux angle constraint by figuring out the required distance from a to c for the given angle
   </summary>
      <param name="a">The alpha component.</param>
      <param name="center">Center.</param>
      <param name="c">C.</param>
      <param name="stiffness">Stiffness.</param>
      <param name="angleInDegrees">Angle in degrees.</param>
      <returns>DistanceConstraint.</returns>
    </member>
    <member name="M:Nez.Verlet.DistanceConstraint.SetTearSensitivity(System.Single)">
      <summary>
   sets the tear sensitivity. if the ratio of the current distance / restingDistance is greater than tearSensitivity the
   Constaint will be removed
   </summary>
      <param name="tearSensitivity">Tear sensitivity.</param>
      <returns>The tear sensitvity.</returns>
    </member>
    <member name="M:Nez.Verlet.DistanceConstraint.SetCollidesWithColliders(System.Boolean)">
      <summary>
   sets whether this Constraint should collide with standard Colliders
   </summary>
      <param name="collidesWithColliders">If set to <c>true</c> collides with colliders.</param>
      <returns>The collides with colliders.</returns>
    </member>
    <member name="M:Nez.Verlet.DistanceConstraint.SetShouldApproximateCollisionsWithPoints(System.Boolean)">
      <summary>
   sets whether collisions should be approximated by points. This should be used for Constraints that need to collided on both
   sides. SAT only works with single sided collisions.
   </summary>
      <param name="shouldApproximateCollisionsWithPoints">If set to <c>true</c> should approximate collisions with points.</param>
      <returns>The should approximate collisions with points.</returns>
    </member>
    <member name="M:Nez.Verlet.DistanceConstraint.Solve">
      <summary>
   solves the Constraint
   </summary>
    </member>
    <member name="M:Nez.Verlet.DistanceConstraint.HandleCollisions(System.Int32)">
      <summary>
   if collidesWithColliders is true this will be called
   </summary>
      <param name="collidesWithLayers">The collides with layers.</param>
    </member>
    <member name="M:Nez.Verlet.DistanceConstraint.DebugRender(Batcher)">
      <summary>
   debug renders the Constraint
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="T:Nez.Verlet.Particle">
      <summary>
   Class Particle.
   </summary>
    </member>
    <member name="F:Nez.Verlet.Particle.Position">
      <summary>
   the current position of the Particle
   </summary>
    </member>
    <member name="F:Nez.Verlet.Particle.LastPosition">
      <summary>
   the position of the Particle prior to its latest move
   </summary>
    </member>
    <member name="F:Nez.Verlet.Particle.Mass">
      <summary>
   the mass of the Particle. Taken into account for all forces and constraints
   </summary>
    </member>
    <member name="F:Nez.Verlet.Particle.Radius">
      <summary>
   the radius of the Particle
   </summary>
    </member>
    <member name="F:Nez.Verlet.Particle.CollidesWithColliders">
      <summary>
   if true, the Particle will collide with standard Nez Colliders
   </summary>
    </member>
    <member name="M:Nez.Verlet.Particle.#ctor(Vector2)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Verlet.Particle" /> class.
   </summary>
      <param name="position">The position.</param>
    </member>
    <member name="M:Nez.Verlet.Particle.#ctor(System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Verlet.Particle" /> class.
   </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
    </member>
    <member name="M:Nez.Verlet.Particle.ApplyForce(Vector2)">
      <summary>
   applies a force taking mass into account to the Particle
   </summary>
      <param name="force">Force.</param>
    </member>
    <member name="M:Nez.Verlet.Particle.Pin">
      <summary>
   pins the Particle to its current position
   </summary>
      <returns>Particle.</returns>
    </member>
    <member name="M:Nez.Verlet.Particle.PinTo(Vector2)">
      <summary>
   pins the particle to the specified position
   </summary>
      <param name="position">Position.</param>
      <returns>Particle.</returns>
    </member>
    <member name="M:Nez.Verlet.Particle.Unpin">
      <summary>
   unpins the particle setting it free like the wind
   </summary>
      <returns>Particle.</returns>
    </member>
    <member name="T:Nez.Verlet.VerletWorld">
      <summary>
   the root of the Verlet simulation. Create a World and call its update method each frame.
   </summary>
    </member>
    <member name="F:Nez.Verlet.VerletWorld.Gravity">
      <summary>
   gravity for the simulation
   </summary>
    </member>
    <member name="F:Nez.Verlet.VerletWorld.ConstraintIterations">
      <summary>
   number of iterations that will be used for Constraint solving
   </summary>
    </member>
    <member name="F:Nez.Verlet.VerletWorld.MaximumStepIterations">
      <summary>
   max number of iterations for the simulation as a whole
   </summary>
    </member>
    <member name="F:Nez.Verlet.VerletWorld.SimulationBounds">
      <summary>
   Bounds of the Verlet World. Particles will be confined to this space if set.
   </summary>
    </member>
    <member name="F:Nez.Verlet.VerletWorld.AllowDragging">
      <summary>
   should Particles be allowed to be dragged?
   </summary>
    </member>
    <member name="F:Nez.Verlet.VerletWorld.SelectionRadiusSquared">
      <summary>
   squared selection radius of the mouse pointer
   </summary>
    </member>
    <member name="M:Nez.Verlet.VerletWorld.#ctor(System.Nullable{Rectangle})">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Verlet.VerletWorld" /> class.
   </summary>
      <param name="simulationBounds">The simulation bounds.</param>
    </member>
    <member name="M:Nez.Verlet.VerletWorld.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="M:Nez.Verlet.VerletWorld.AddComposite``1(``0)">
      <summary>
   adds a Composite to the simulation
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="composite">Composite.</param>
      <returns>The composite.</returns>
    </member>
    <member name="M:Nez.Verlet.VerletWorld.RemoveComposite(Composite)">
      <summary>
   removes a Composite from the simulation
   </summary>
      <param name="composite">Composite.</param>
    </member>
    <member name="M:Nez.Verlet.VerletWorld.GetNearestParticle(Vector2)">
      <summary>
   gets the nearest Particle to the position. Uses the selectionRadiusSquared to determine if a Particle is near enough for consideration.
   </summary>
      <param name="position">Position.</param>
      <returns>The nearest particle.</returns>
    </member>
    <member name="M:Nez.Verlet.VerletWorld.DebugRender(Batcher)">
      <summary>
   Debugs the render.
   </summary>
      <param name="batcher">The batcher.</param>
    </member>
    <member name="T:Nez.ColliderTriggerHelper">
      <summary>
   helper class used by the Movers to manage trigger colliders interactions and calling ITriggerListeners.
   </summary>
    </member>
    <member name="M:Nez.ColliderTriggerHelper.#ctor(Entity)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.ColliderTriggerHelper" /> class.
   </summary>
      <param name="entity">The entity.</param>
    </member>
    <member name="M:Nez.ColliderTriggerHelper.Update">
      <summary>
   update should be called AFTER Entity is moved. It will take care of any ITriggerListeners that the Collider overlaps.
   </summary>
    </member>
    <member name="T:Nez.Collisions">
      <summary>
   Class Collisions.
   </summary>
    </member>
    <member name="T:Nez.Collisions.PointSectors">
      <summary>
   Enum PointSectors
   </summary>
    </member>
    <member name="F:Nez.Collisions.PointSectors.Center">
      <summary>
   The center
   </summary>
    </member>
    <member name="F:Nez.Collisions.PointSectors.Top">
      <summary>
   The top
   </summary>
    </member>
    <member name="F:Nez.Collisions.PointSectors.Bottom">
      <summary>
   The bottom
   </summary>
    </member>
    <member name="F:Nez.Collisions.PointSectors.TopLeft">
      <summary>
   The top left
   </summary>
    </member>
    <member name="F:Nez.Collisions.PointSectors.TopRight">
      <summary>
   The top right
   </summary>
    </member>
    <member name="F:Nez.Collisions.PointSectors.Left">
      <summary>
   The left
   </summary>
    </member>
    <member name="F:Nez.Collisions.PointSectors.Right">
      <summary>
   The right
   </summary>
    </member>
    <member name="F:Nez.Collisions.PointSectors.BottomLeft">
      <summary>
   The bottom left
   </summary>
    </member>
    <member name="F:Nez.Collisions.PointSectors.BottomRight">
      <summary>
   The bottom right
   </summary>
    </member>
    <member name="M:Nez.Collisions.LineToLine(Vector2,Vector2,Vector2,Vector2)">
      <summary>
   Lines to line.
   </summary>
      <param name="a1">The a1.</param>
      <param name="a2">The a2.</param>
      <param name="b1">The b1.</param>
      <param name="b2">The b2.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Collisions.LineToLine(Vector2,Vector2,Vector2,Vector2,Vector2@)">
      <summary>
   Lines to line.
   </summary>
      <param name="a1">The a1.</param>
      <param name="a2">The a2.</param>
      <param name="b1">The b1.</param>
      <param name="b2">The b2.</param>
      <param name="intersection">The intersection.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Collisions.ClosestPointOnLine(Vector2,Vector2,Vector2)">
      <summary>
   Closests the point on line.
   </summary>
      <param name="lineA">The line a.</param>
      <param name="lineB">The line b.</param>
      <param name="closestTo">The closest to.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.Collisions.CircleToCircle(Vector2,System.Single,Vector2,System.Single)">
      <summary>
   Circles to circle.
   </summary>
      <param name="circleCenter1">The circle center1.</param>
      <param name="circleRadius1">The circle radius1.</param>
      <param name="circleCenter2">The circle center2.</param>
      <param name="circleRadius2">The circle radius2.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Collisions.CircleToLine(Vector2,System.Single,Vector2,Vector2)">
      <summary>
   Circles to line.
   </summary>
      <param name="circleCenter">The circle center.</param>
      <param name="radius">The radius.</param>
      <param name="lineFrom">The line from.</param>
      <param name="lineTo">The line to.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Collisions.CircleToPoint(Vector2,System.Single,Vector2)">
      <summary>
   Circles to point.
   </summary>
      <param name="circleCenter">The circle center.</param>
      <param name="radius">The radius.</param>
      <param name="point">The point.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Collisions.RectToCircle(RectangleF,Vector2,System.Single)">
      <summary>
   Rects to circle.
   </summary>
      <param name="rect">The rect.</param>
      <param name="cPosition">The c position.</param>
      <param name="cRadius">The c radius.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Collisions.RectToCircle(RectangleF@,Vector2,System.Single)">
      <summary>
   Rects to circle.
   </summary>
      <param name="rect">The rect.</param>
      <param name="cPosition">The c position.</param>
      <param name="cRadius">The c radius.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Collisions.RectToCircle(System.Single,System.Single,System.Single,System.Single,Vector2,System.Single)">
      <summary>
   Rects to circle.
   </summary>
      <param name="rectX">The rect x.</param>
      <param name="rectY">The rect y.</param>
      <param name="rectWidth">Width of the rect.</param>
      <param name="rectHeight">Height of the rect.</param>
      <param name="circleCenter">The circle center.</param>
      <param name="radius">The radius.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Collisions.RectToLine(RectangleF@,Vector2,Vector2)">
      <summary>
   Rects to line.
   </summary>
      <param name="rect">The rect.</param>
      <param name="lineFrom">The line from.</param>
      <param name="lineTo">The line to.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Collisions.RectToLine(RectangleF,Vector2,Vector2)">
      <summary>
   Rects to line.
   </summary>
      <param name="rect">The rect.</param>
      <param name="lineFrom">The line from.</param>
      <param name="lineTo">The line to.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Collisions.RectToLine(System.Single,System.Single,System.Single,System.Single,Vector2,Vector2)">
      <summary>
   Rects to line.
   </summary>
      <param name="rectX">The rect x.</param>
      <param name="rectY">The rect y.</param>
      <param name="rectWidth">Width of the rect.</param>
      <param name="rectHeight">Height of the rect.</param>
      <param name="lineFrom">The line from.</param>
      <param name="lineTo">The line to.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Collisions.RectToPoint(System.Single,System.Single,System.Single,System.Single,Vector2)">
      <summary>
   Rects to point.
   </summary>
      <param name="rX">The r x.</param>
      <param name="rY">The r y.</param>
      <param name="rW">The r w.</param>
      <param name="rH">The r h.</param>
      <param name="point">The point.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Collisions.RectToPoint(RectangleF,Vector2)">
      <summary>
   Rects to point.
   </summary>
      <param name="rect">The rect.</param>
      <param name="point">The point.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Collisions.GetSector(RectangleF,Vector2)">
      <summary>
   Gets the sector.
   </summary>
      <param name="rect">The rect.</param>
      <param name="point">The point.</param>
      <returns>PointSectors.</returns>
    </member>
    <member name="M:Nez.Collisions.GetSector(System.Single,System.Single,System.Single,System.Single,Vector2)">
      <summary>
   Gets the sector.
   </summary>
      <param name="rX">The r x.</param>
      <param name="rY">The r y.</param>
      <param name="rW">The r w.</param>
      <param name="rH">The r h.</param>
      <param name="point">The point.</param>
      <returns>PointSectors.</returns>
    </member>
    <member name="T:Nez.Physics">
      <summary>
   Class Physics.
   </summary>
    </member>
    <member name="F:Nez.Physics.AllLayers">
      <summary>
   default value for all methods that accept a layerMask
   </summary>
    </member>
    <member name="F:Nez.Physics.Gravity">
      <summary>
   convenience field for storing a gravity value globally
   </summary>
    </member>
    <member name="F:Nez.Physics.SpatialHashCellSize">
      <summary>
   cell size used when reset is called and a new SpatialHash is created
   </summary>
    </member>
    <member name="F:Nez.Physics.RaycastsHitTriggers">
      <summary>
   Do raycasts detect Colliders configured as triggers?
   </summary>
    </member>
    <member name="F:Nez.Physics.RaycastsStartInColliders">
      <summary>
   Do ray/line casts that start inside a collider detect those colliders?
   </summary>
    </member>
    <member name="M:Nez.Physics.Reset">
      <summary>
   Resets this instance.
   </summary>
    </member>
    <member name="M:Nez.Physics.Clear">
      <summary>
   removes all colliders from the SpatialHash
   </summary>
    </member>
    <member name="M:Nez.Physics.GetAllColliders">
      <summary>
   gets all the Colliders managed by the SpatialHash
   </summary>
      <returns>The all colliders.</returns>
    </member>
    <member name="M:Nez.Physics.AddCollider(Collider)">
      <summary>
   adds the collider to the physics system
   </summary>
      <param name="collider">Collider.</param>
    </member>
    <member name="M:Nez.Physics.RemoveCollider(Collider)">
      <summary>
   removes the collider from the physics system
   </summary>
      <param name="collider">Collider.</param>
      <returns>The collider.</returns>
    </member>
    <member name="M:Nez.Physics.UpdateCollider(Collider)">
      <summary>
   updates the colliders position in the physics system. This essentially just removes then re-adds the Collider with its
   new bounds
   </summary>
      <param name="collider">Collider.</param>
    </member>
    <member name="M:Nez.Physics.Linecast(Vector2,Vector2,System.Int32)">
      <summary>
   casts a line from start to end and returns the first hit of a collider that matches layerMask
   </summary>
      <param name="start">Start.</param>
      <param name="end">End.</param>
      <param name="layerMask">Layer mask.</param>
      <returns>RaycastHit.</returns>
    </member>
    <member name="M:Nez.Physics.LinecastAll(Vector2,Vector2,RaycastHit[],System.Int32)">
      <summary>
   casts a line through the spatial hash and fills the hits array up with any colliders that the line hits
   </summary>
      <param name="start">Start.</param>
      <param name="end">End.</param>
      <param name="hits">Hits.</param>
      <param name="layerMask">Layer mask.</param>
      <returns>The all.</returns>
    </member>
    <member name="M:Nez.Physics.OverlapRectangle(RectangleF,System.Int32)">
      <summary>
   check if any collider falls within a rectangular area
   </summary>
      <param name="rect">Rect.</param>
      <param name="layerMask">Layer mask.</param>
      <returns>The rectangle.</returns>
    </member>
    <member name="M:Nez.Physics.OverlapRectangle(RectangleF@,System.Int32)">
      <summary>
   check if any collider falls within a rectangular area
   </summary>
      <param name="rect">Rect.</param>
      <param name="layerMask">Layer mask.</param>
      <returns>The rectangle.</returns>
    </member>
    <member name="M:Nez.Physics.OverlapRectangleAll(RectangleF@,Collider[],System.Int32)">
      <summary>
   gets all the colliders that fall within the specified rect
   </summary>
      <param name="rect">Rect.</param>
      <param name="results">Results.</param>
      <param name="layerMask">Layer mask.</param>
      <returns>the number of Colliders returned</returns>
    </member>
    <member name="M:Nez.Physics.OverlapCircle(Vector2,System.Single,System.Int32)">
      <summary>
   check if any collider falls within a circular area. Returns the first Collider encountered.
   </summary>
      <param name="center">Center.</param>
      <param name="radius">Radius.</param>
      <param name="layerMask">Layer mask.</param>
      <returns>The circle.</returns>
    </member>
    <member name="M:Nez.Physics.OverlapCircleAll(Vector2,System.Single,Collider[],System.Int32)">
      <summary>
   gets all the colliders that fall within the specified circle
   </summary>
      <param name="center">Center.</param>
      <param name="radius">Radius.</param>
      <param name="results">Results.</param>
      <param name="layerMask">Layer mask.</param>
      <returns>the number of Colliders returned</returns>
    </member>
    <member name="M:Nez.Physics.BoxcastBroadphase(RectangleF,System.Int32)">
      <summary>
   returns all colliders with bounds that are intersected by collider.bounds. Note that this is a broadphase check so it
   only checks bounds and does not do individual Collider-to-Collider checks!
   </summary>
      <param name="rect">The rect.</param>
      <param name="layerMask">Layer mask.</param>
      <returns>HashSet&lt;Collider&gt;.</returns>
    </member>
    <member name="M:Nez.Physics.BoxcastBroadphase(RectangleF@,System.Int32)">
      <summary>
   returns all colliders with bounds that are intersected by collider.bounds. Note that this is a broadphase check so it
   only checks bounds and does not do individual Collider-to-Collider checks!
   </summary>
      <param name="rect">The rect.</param>
      <param name="layerMask">Layer mask.</param>
      <returns>HashSet&lt;Collider&gt;.</returns>
    </member>
    <member name="M:Nez.Physics.BoxcastBroadphaseExcludingSelf(Collider,System.Int32)">
      <summary>
   returns all colliders with bounds that are intersected by collider.bounds excluding the passed-in collider (self)
   </summary>
      <param name="collider">Collider.</param>
      <param name="layerMask">The layer mask.</param>
      <returns>The neighbors excluding self.</returns>
    </member>
    <member name="M:Nez.Physics.BoxcastBroadphaseExcludingSelf(Collider,RectangleF@,System.Int32)">
      <summary>
   returns all colliders that are intersected by bounds excluding the passed-in collider (self).
   this method is useful if you want to create the swept bounds on your own for other queries
   </summary>
      <param name="collider">Collider.</param>
      <param name="rect">The rect.</param>
      <param name="layerMask">The layer mask.</param>
      <returns>The excluding self.</returns>
    </member>
    <member name="M:Nez.Physics.BoxcastBroadphaseExcludingSelf(Collider,System.Single,System.Single,System.Int32)">
      <summary>
   returns all colliders that are intersected by collider.bounds expanded to incorporate deltaX/deltaY
   excluding the passed-in collider (self)
   </summary>
      <param name="collider">Collider.</param>
      <param name="deltaX">The delta x.</param>
      <param name="deltaY">The delta y.</param>
      <param name="layerMask">The layer mask.</param>
      <returns>The neighbors excluding self.</returns>
    </member>
    <member name="T:Nez.Ray2D">
      <summary>
   while technically not a ray (rays are just start and direction) it does double duty as both a line and a ray.
   </summary>
    </member>
    <member name="F:Nez.Ray2D.Start">
      <summary>
   The start
   </summary>
    </member>
    <member name="F:Nez.Ray2D.End">
      <summary>
   The end
   </summary>
    </member>
    <member name="F:Nez.Ray2D.Direction">
      <summary>
   The direction
   </summary>
    </member>
    <member name="M:Nez.Ray2D.#ctor(Vector2,Vector2)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Ray2D" /> struct.
   </summary>
      <param name="position">The position.</param>
      <param name="end">The end.</param>
    </member>
    <member name="T:Nez.RaycastHit">
      <summary>
   Struct RaycastHit
   </summary>
    </member>
    <member name="F:Nez.RaycastHit.Collider">
      <summary>
   The collider hit by the ray
   </summary>
    </member>
    <member name="F:Nez.RaycastHit.Fraction">
      <summary>
   Fraction of the distance along the ray that the hit occurred.
   </summary>
    </member>
    <member name="F:Nez.RaycastHit.Distance">
      <summary>
   The distance from the ray origin to the impact point
   </summary>
    </member>
    <member name="F:Nez.RaycastHit.Point">
      <summary>
   The point in world space where the ray hit the collider's surface
   </summary>
    </member>
    <member name="F:Nez.RaycastHit.Normal">
      <summary>
   The normal vector of the surface hit by the ray
   </summary>
    </member>
    <member name="F:Nez.RaycastHit.Centroid">
      <summary>
   The centroid of the primitive used to perform the cast. Where the shape would be positioned for it to contact.
   </summary>
    </member>
    <member name="M:Nez.RaycastHit.#ctor(Collider,System.Single,System.Single,Vector2,Vector2)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.RaycastHit" /> struct.
   </summary>
      <param name="collider">The collider.</param>
      <param name="fraction">The fraction.</param>
      <param name="distance">The distance.</param>
      <param name="point">The point.</param>
      <param name="normal">The normal.</param>
    </member>
    <member name="M:Nez.RaycastHit.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.Spatial.SpatialHash">
      <summary>
   Class SpatialHash.
   </summary>
    </member>
    <member name="F:Nez.Spatial.SpatialHash.GridBounds">
      <summary>
   The grid bounds
   </summary>
    </member>
    <member name="M:Nez.Spatial.SpatialHash.#ctor(System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Spatial.SpatialHash" /> class.
   </summary>
      <param name="cellSize">Size of the cell.</param>
    </member>
    <member name="M:Nez.Spatial.SpatialHash.Register(Collider)">
      <summary>
   adds the object to the SpatialHash
   </summary>
      <param name="collider">Object.</param>
    </member>
    <member name="M:Nez.Spatial.SpatialHash.Remove(Collider)">
      <summary>
   removes the object from the SpatialHash
   </summary>
      <param name="collider">Collider.</param>
    </member>
    <member name="M:Nez.Spatial.SpatialHash.RemoveWithBruteForce(Collider)">
      <summary>
   removes the object from the SpatialHash using a brute force approach
   </summary>
      <param name="obj">Object.</param>
    </member>
    <member name="M:Nez.Spatial.SpatialHash.Clear">
      <summary>
   Clears this instance.
   </summary>
    </member>
    <member name="M:Nez.Spatial.SpatialHash.DebugDraw(System.Single,System.Single)">
      <summary>
   debug draws the contents of the spatial hash. Note that Core.debugRenderEnabled must be true or nothing will be displayed.
   </summary>
      <param name="secondsToDisplay">Seconds to display.</param>
      <param name="textScale">Text scale.</param>
    </member>
    <member name="M:Nez.Spatial.SpatialHash.GetAllObjects">
      <summary>
   returns all the Colliders in the SpatialHash
   </summary>
      <returns>The all objects.</returns>
    </member>
    <member name="M:Nez.Spatial.SpatialHash.AabbBroadphase(RectangleF@,Collider,System.Int32)">
      <summary>
   returns all objects in cells that the bounding box intersects
   </summary>
      <param name="bounds">Bounds.</param>
      <param name="excludeCollider">The exclude collider.</param>
      <param name="layerMask">Layer mask.</param>
      <returns>The neighbors.</returns>
    </member>
    <member name="M:Nez.Spatial.SpatialHash.Linecast(Vector2,Vector2,RaycastHit[],System.Int32)">
      <summary>
   casts a line through the spatial hash and fills the hits array up with any colliders that the line hits.
   https://github.com/francisengelmann/fast_voxel_traversal/blob/master/main.cpp
   http://www.cse.yorku.ca/~amana/research/grid.pdf
   </summary>
      <param name="start">Start.</param>
      <param name="end">End.</param>
      <param name="hits">Hits.</param>
      <param name="layerMask">Layer mask.</param>
      <returns>the number of Colliders returned</returns>
    </member>
    <member name="M:Nez.Spatial.SpatialHash.OverlapRectangle(RectangleF@,Collider[],System.Int32)">
      <summary>
   gets all the colliders that fall within the specified rect
   </summary>
      <param name="rect">Rect.</param>
      <param name="results">Results.</param>
      <param name="layerMask">Layer mask.</param>
      <returns>the number of Colliders returned</returns>
      <exception cref="T:System.NotImplementedException">overlapRectangle against this collider type is not implemented!</exception>
    </member>
    <member name="M:Nez.Spatial.SpatialHash.OverlapCircle(Vector2,System.Single,Collider[],System.Int32)">
      <summary>
   gets all the colliders that fall within the specified circle
   </summary>
      <param name="circleCenter">Circle center.</param>
      <param name="radius">Radius.</param>
      <param name="results">Results.</param>
      <param name="layerMask">Layer mask.</param>
      <returns>the number of Colliders returned</returns>
      <exception cref="T:System.NotImplementedException">overlapCircle against this collider type is not implemented!</exception>
    </member>
    <member name="T:Nez.UI.Align">
      <summary>
   Enum Align
   </summary>
    </member>
    <member name="F:Nez.UI.Align.Center">
      <summary>
   The center
   </summary>
    </member>
    <member name="F:Nez.UI.Align.Top">
      <summary>
   The top
   </summary>
    </member>
    <member name="F:Nez.UI.Align.Bottom">
      <summary>
   The bottom
   </summary>
    </member>
    <member name="F:Nez.UI.Align.Left">
      <summary>
   The left
   </summary>
    </member>
    <member name="F:Nez.UI.Align.Right">
      <summary>
   The right
   </summary>
    </member>
    <member name="F:Nez.UI.Align.TopLeft">
      <summary>
   The top left
   </summary>
    </member>
    <member name="F:Nez.UI.Align.TopRight">
      <summary>
   The top right
   </summary>
    </member>
    <member name="F:Nez.UI.Align.BottomLeft">
      <summary>
   The bottom left
   </summary>
    </member>
    <member name="F:Nez.UI.Align.BottomRight">
      <summary>
   The bottom right
   </summary>
    </member>
    <member name="T:Nez.UI.Cell">
      <summary>
   Class Cell.
   Implements the <see cref="T:Nez.IPoolable" /></summary>
      <seealso cref="T:Nez.IPoolable" />
    </member>
    <member name="M:Nez.UI.Cell.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Cell" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.Cell.GetElement``1">
      <summary>
   Returns the element for this cell casted to T, or null.
   </summary>
      <typeparam name="T">
      </typeparam>
      <returns>The element.</returns>
    </member>
    <member name="M:Nez.UI.Cell.HasElement">
      <summary>
   Returns true if the cell's element is not null.
   </summary>
      <returns>
        <c>true</c>, if element was hased, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetElement(Element)">
      <summary>
   Sets the element in this cell and adds the element to the cell's table. If null, removes any current element.
   </summary>
      <param name="newElement">The new element.</param>
      <returns>The element.</returns>
    </member>
    <member name="M:Nez.UI.Cell.ClearElement">
      <summary>
   Removes the current element for the cell, if any.
   </summary>
      <returns>The element.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Size(Value)">
      <summary>
   Sets the minWidth, prefWidth, maxWidth, minHeight, prefHeight, and maxHeight to the specified value.
   </summary>
      <param name="size">Size.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Size(Value,Value)">
      <summary>
   Sets the minWidth, prefWidth, maxWidth, minHeight, prefHeight, and maxHeight to the specified values.
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Size(System.Single)">
      <summary>
   Sets the minWidth, prefWidth, maxWidth, minHeight, prefHeight, and maxHeight to the specified value.
   </summary>
      <param name="size">Size.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Size(System.Single,System.Single)">
      <summary>
   Sets the minWidth, prefWidth, maxWidth, minHeight, prefHeight, and maxHeight to the specified values.
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Width(Value)">
      <summary>
   Sets the minWidth, prefWidth, and maxWidth to the specified value.
   </summary>
      <param name="width">Width.</param>
      <returns>Cell.</returns>
      <exception cref="T:System.Exception">width cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.Width(System.Single)">
      <summary>
   Sets the minWidth, prefWidth, and maxWidth to the specified value.
   </summary>
      <param name="width">Width.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Height(Value)">
      <summary>
   Sets the minHeight, prefHeight, and maxHeight to the specified value.
   </summary>
      <param name="height">Height.</param>
      <returns>Cell.</returns>
      <exception cref="T:System.Exception">height cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.Height(System.Single)">
      <summary>
   Sets the minHeight, prefHeight, and maxHeight to the specified value.
   </summary>
      <param name="height">Height.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.MinSize(Value)">
      <summary>
   Sets the minWidth and minHeight to the specified value.
   </summary>
      <param name="size">Size.</param>
      <returns>The size.</returns>
      <exception cref="T:System.Exception">size cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.MinSize(Value,Value)">
      <summary>
   Sets the minWidth and minHeight to the specified values.
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <returns>The size.</returns>
      <exception cref="T:System.Exception">width cannot be null.</exception>
      <exception cref="T:System.Exception">height cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.SetMinWidth(Value)">
      <summary>
   Sets the minimum width.
   </summary>
      <param name="minWidth">The minimum width.</param>
      <returns>Cell.</returns>
      <exception cref="T:System.Exception">minWidth cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.SetMinHeight(Value)">
      <summary>
   Sets the minimum height.
   </summary>
      <param name="minHeight">The minimum height.</param>
      <returns>Cell.</returns>
      <exception cref="T:System.Exception">minHeight cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.MinSize(System.Single)">
      <summary>
   Sets the minWidth and minHeight to the specified value.
   </summary>
      <param name="size">Size.</param>
      <returns>The size.</returns>
    </member>
    <member name="M:Nez.UI.Cell.MinSize(System.Single,System.Single)">
      <summary>
   Sets the minWidth and minHeight to the specified values.
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <returns>The size.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetMinWidth(System.Single)">
      <summary>
   Sets the minimum width.
   </summary>
      <param name="minWidth">The minimum width.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetMinHeight(System.Single)">
      <summary>
   Sets the minimum height.
   </summary>
      <param name="minHeight">The minimum height.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.PrefSize(Value)">
      <summary>
   Sets the prefWidth and prefHeight to the specified value.
   </summary>
      <param name="size">Size.</param>
      <returns>The size.</returns>
      <exception cref="T:System.Exception">size cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.PrefSize(Value,Value)">
      <summary>
   Sets the prefWidth and prefHeight to the specified values.
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <returns>The size.</returns>
      <exception cref="T:System.Exception">width cannot be null.</exception>
      <exception cref="T:System.Exception">height cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.SetPrefWidth(Value)">
      <summary>
   Sets the width of the preference.
   </summary>
      <param name="prefWidth">Width of the preference.</param>
      <returns>Cell.</returns>
      <exception cref="T:System.Exception">prefWidth cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.SetPrefHeight(Value)">
      <summary>
   Sets the height of the preference.
   </summary>
      <param name="prefHeight">Height of the preference.</param>
      <returns>Cell.</returns>
      <exception cref="T:System.Exception">prefHeight cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.PrefSize(System.Single,System.Single)">
      <summary>
   Sets the prefWidth and prefHeight to the specified value.
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <returns>The size.</returns>
    </member>
    <member name="M:Nez.UI.Cell.PrefSize(System.Single)">
      <summary>
   Sets the prefWidth and prefHeight to the specified values.
   </summary>
      <param name="size">Size.</param>
      <returns>The size.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetPrefWidth(System.Single)">
      <summary>
   Sets the width of the preference.
   </summary>
      <param name="prefWidth">Width of the preference.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetPrefHeight(System.Single)">
      <summary>
   Sets the height of the preference.
   </summary>
      <param name="prefHeight">Height of the preference.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.MaxSize(Value)">
      <summary>
   Sets the maxWidth and maxHeight to the specified value.
   </summary>
      <param name="size">Size.</param>
      <returns>The size.</returns>
      <exception cref="T:System.Exception">size cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.MaxSize(Value,Value)">
      <summary>
   Sets the maxWidth and maxHeight to the specified values.
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <returns>The size.</returns>
      <exception cref="T:System.Exception">width cannot be null.</exception>
      <exception cref="T:System.Exception">height cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.SetMaxWidth(Value)">
      <summary>
   Sets the maximum width.
   </summary>
      <param name="maxWidth">The maximum width.</param>
      <returns>Cell.</returns>
      <exception cref="T:System.Exception">maxWidth cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.SetMaxHeight(Value)">
      <summary>
   Sets the maximum height.
   </summary>
      <param name="maxHeight">The maximum height.</param>
      <returns>Cell.</returns>
      <exception cref="T:System.Exception">maxHeight cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.MaxSize(System.Single)">
      <summary>
   Sets the maxWidth and maxHeight to the specified value.
   </summary>
      <param name="size">Size.</param>
      <returns>The size.</returns>
    </member>
    <member name="M:Nez.UI.Cell.MaxSize(System.Single,System.Single)">
      <summary>
   Sets the maxWidth and maxHeight to the specified values.
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <returns>The size.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetMaxWidth(System.Single)">
      <summary>
   Sets the maximum width.
   </summary>
      <param name="maxWidth">The maximum width.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetMaxHeight(System.Single)">
      <summary>
   Sets the maximum height.
   </summary>
      <param name="maxHeight">The maximum height.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Space(Value)">
      <summary>
   Sets the spaceTop, spaceLeft, spaceBottom, and spaceRight to the specified value.
   </summary>
      <param name="space">Space.</param>
      <returns>Cell.</returns>
      <exception cref="T:System.Exception">space cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.Space(Value,Value,Value,Value)">
      <summary>
   Spaces the specified top.
   </summary>
      <param name="top">The top.</param>
      <param name="left">The left.</param>
      <param name="bottom">The bottom.</param>
      <param name="right">The right.</param>
      <returns>Cell.</returns>
      <exception cref="T:System.Exception">top cannot be null.</exception>
      <exception cref="T:System.Exception">left cannot be null.</exception>
      <exception cref="T:System.Exception">bottom cannot be null.</exception>
      <exception cref="T:System.Exception">right cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.SetSpaceTop(Value)">
      <summary>
   Sets the space top.
   </summary>
      <param name="spaceTop">The space top.</param>
      <returns>Cell.</returns>
      <exception cref="T:System.Exception">spaceTop cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.SetSpaceLeft(Value)">
      <summary>
   Sets the space left.
   </summary>
      <param name="spaceLeft">The space left.</param>
      <returns>Cell.</returns>
      <exception cref="T:System.Exception">spaceLeft cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.SetSpaceBottom(Value)">
      <summary>
   Sets the space bottom.
   </summary>
      <param name="spaceBottom">The space bottom.</param>
      <returns>Cell.</returns>
      <exception cref="T:System.Exception">spaceBottom cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.SetSpaceRight(Value)">
      <summary>
   Sets the space right.
   </summary>
      <param name="spaceRight">The space right.</param>
      <returns>Cell.</returns>
      <exception cref="T:System.Exception">spaceRight cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.Space(System.Single)">
      <summary>
        <font color="red">Badly formed XML comment.</font>
      </summary>
    </member>
    <member name="M:Nez.UI.Cell.Space(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <font color="red">Badly formed XML comment.</font>
      </summary>
    </member>
    <member name="M:Nez.UI.Cell.SetSpaceTop(System.Single)">
      <summary>
        <font color="red">Badly formed XML comment.</font>
      </summary>
    </member>
    <member name="M:Nez.UI.Cell.SetSpaceLeft(System.Single)">
      <summary>
        <font color="red">Badly formed XML comment.</font>
      </summary>
    </member>
    <member name="M:Nez.UI.Cell.SetSpaceBottom(System.Single)">
      <summary>
        <font color="red">Badly formed XML comment.</font>
      </summary>
    </member>
    <member name="M:Nez.UI.Cell.SetSpaceRight(System.Single)">
      <summary>
        <font color="red">Badly formed XML comment.</font>
      </summary>
    </member>
    <member name="M:Nez.UI.Cell.Pad(Value)">
      <summary>
   Sets the padTop, padLeft, padBottom, and padRight to the specified value.
   </summary>
      <param name="pad">Pad.</param>
      <returns>Cell.</returns>
      <exception cref="T:System.Exception">pad cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.Pad(Value,Value,Value,Value)">
      <summary>
   Pads the specified top.
   </summary>
      <param name="top">The top.</param>
      <param name="left">The left.</param>
      <param name="bottom">The bottom.</param>
      <param name="right">The right.</param>
      <returns>Cell.</returns>
      <exception cref="T:System.Exception">top cannot be null.</exception>
      <exception cref="T:System.Exception">left cannot be null.</exception>
      <exception cref="T:System.Exception">bottom cannot be null.</exception>
      <exception cref="T:System.Exception">right cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.SetPadTop(Value)">
      <summary>
   Sets the pad top.
   </summary>
      <param name="padTop">The pad top.</param>
      <returns>Cell.</returns>
      <exception cref="T:System.Exception">padTop cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.SetPadLeft(Value)">
      <summary>
   Sets the pad left.
   </summary>
      <param name="padLeft">The pad left.</param>
      <returns>Cell.</returns>
      <exception cref="T:System.Exception">padLeft cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.SetPadBottom(Value)">
      <summary>
   Sets the pad bottom.
   </summary>
      <param name="padBottom">The pad bottom.</param>
      <returns>Cell.</returns>
      <exception cref="T:System.Exception">padBottom cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.SetPadRight(Value)">
      <summary>
   Sets the pad right.
   </summary>
      <param name="padRight">The pad right.</param>
      <returns>Cell.</returns>
      <exception cref="T:System.Exception">padRight cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Cell.Pad(System.Single)">
      <summary>
   Sets the padTop, padLeft, padBottom, and padRight to the specified value.
   </summary>
      <param name="pad">Pad.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Pad(System.Single,System.Single,System.Single,System.Single)">
      <summary>
   Pads the specified top.
   </summary>
      <param name="top">The top.</param>
      <param name="left">The left.</param>
      <param name="bottom">The bottom.</param>
      <param name="right">The right.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetPadTop(System.Single)">
      <summary>
   Sets the pad top.
   </summary>
      <param name="padTop">The pad top.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetPadLeft(System.Single)">
      <summary>
   Sets the pad left.
   </summary>
      <param name="padLeft">The pad left.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetPadBottom(System.Single)">
      <summary>
   Sets the pad bottom.
   </summary>
      <param name="padBottom">The pad bottom.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetPadRight(System.Single)">
      <summary>
   Sets the pad right.
   </summary>
      <param name="padRight">The pad right.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Fill">
      <summary>
   Sets fillX and fillY to 1
   </summary>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetFillX">
      <summary>
   Sets fillX to 1
   </summary>
      <returns>The fill x.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetFillY">
      <summary>
   Sets fillY to 1
   </summary>
      <returns>The fill y.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Fill(System.Single,System.Single)">
      <summary>
   Fills the specified x.
   </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Fill(System.Boolean,System.Boolean)">
      <summary>
   Sets fillX and fillY to 1 if true, 0 if false.
   </summary>
      <param name="x">If set to <c>true</c> x.</param>
      <param name="y">If set to <c>true</c> y.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Fill(System.Boolean)">
      <summary>
   Sets fillX and fillY to 1 if true, 0 if false.
   </summary>
      <param name="fill">If set to <c>true</c> fill.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetAlign(Align)">
      <summary>
   Sets the alignment of the element within the cell. Set to {@link Align#center}, {@link Align#top}, {@link Align#bottom},
   {@link Align#left}, {@link Align#right}, or any combination of those.
   </summary>
      <param name="align">Align.</param>
      <returns>The align.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Center">
      <summary>
   Sets the alignment of the element within the cell to {@link Align#center}. This clears any other alignment.
   </summary>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Top">
      <summary>
   Adds {@link Align#top} and clears {@link Align#bottom} for the alignment of the element within the cell.
   </summary>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Left">
      <summary>
   Adds {@link Align#left} and clears {@link Align#right} for the alignment of the element within the cell
   </summary>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Bottom">
      <summary>
   Adds {@link Align#bottom} and clears {@link Align#top} for the alignment of the element within the cell
   </summary>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Right">
      <summary>
   Adds {@link Align#right} and clears {@link Align#left} for the alignment of the element within the cell
   </summary>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Grow">
      <summary>
   Sets expandX, expandY, fillX, and fillY to 1
   </summary>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GrowX">
      <summary>
   Sets expandX and fillX to 1
   </summary>
      <returns>The x.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GrowY">
      <summary>
   Sets expandY and fillY to 1
   </summary>
      <returns>The y.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Expand">
      <summary>
   Sets expandX and expandY to 1
   </summary>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetExpandX">
      <summary>
   Sets expandX to 1
   </summary>
      <returns>The expand x.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetExpandY">
      <summary>
   Sets expandY to 1
   </summary>
      <returns>The expand y.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Expand(System.Int32,System.Int32)">
      <summary>
   Expands the specified x.
   </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Expand(System.Boolean,System.Boolean)">
      <summary>
   Sets expandX and expandY to 1 if true, 0 if false
   </summary>
      <param name="x">If set to <c>true</c> x.</param>
      <param name="y">If set to <c>true</c> y.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetColspan(System.Int32)">
      <summary>
   Sets the colspan.
   </summary>
      <param name="colspan">The colspan.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Uniform">
      <summary>
   Sets uniformX and uniformY to true
   </summary>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetUniformX">
      <summary>
   Sets uniformX to true
   </summary>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetUniformY">
      <summary>
   Sets uniformY to true
   </summary>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Uniform(System.Boolean,System.Boolean)">
      <summary>
   Uniforms the specified x.
   </summary>
      <param name="x">if set to <c>true</c> [x].</param>
      <param name="y">if set to <c>true</c> [y].</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetElementBounds(System.Single,System.Single,System.Single,System.Single)">
      <summary>
   Sets the element bounds.
   </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
    </member>
    <member name="M:Nez.UI.Cell.GetElementX">
      <summary>
   Gets the element x.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetElementX(System.Single)">
      <summary>
   Sets the element x.
   </summary>
      <param name="elementX">The element x.</param>
    </member>
    <member name="M:Nez.UI.Cell.GetElementY">
      <summary>
   Gets the element y.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetElementY(System.Single)">
      <summary>
   Sets the element y.
   </summary>
      <param name="elementY">The element y.</param>
    </member>
    <member name="M:Nez.UI.Cell.GetElementWidth">
      <summary>
   Gets the width of the element.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetElementWidth(System.Single)">
      <summary>
   Sets the width of the element.
   </summary>
      <param name="elementWidth">Width of the element.</param>
    </member>
    <member name="M:Nez.UI.Cell.GetElementHeight">
      <summary>
   Gets the height of the element.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetElementHeight(System.Single)">
      <summary>
   Sets the height of the element.
   </summary>
      <param name="elementHeight">Height of the element.</param>
    </member>
    <member name="M:Nez.UI.Cell.GetColumn">
      <summary>
   Gets the column.
   </summary>
      <returns>System.Int32.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetRow">
      <summary>
   Gets the row.
   </summary>
      <returns>System.Int32.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetMinWidthValue">
      <summary>
   May be null if this cell is row defaults.
   </summary>
      <returns>The minimum width value.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetMinWidth">
      <summary>
   Gets the minimum width.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetMinHeightValue">
      <summary>
   May be null if this cell is row defaults
   </summary>
      <returns>The minimum height value.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetMinHeight">
      <summary>
   Gets the minimum height.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetPrefWidthValue">
      <summary>
   May be null if this cell is row defaults.
   </summary>
      <returns>The preference width value.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetPrefWidth">
      <summary>
   Gets the width of the preference.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetPrefHeightValue">
      <summary>
   May be null if this cell is row defaults.
   </summary>
      <returns>The preference height value.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetPrefHeight">
      <summary>
   Gets the height of the preference.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetMaxWidthValue">
      <summary>
   May be null if this cell is row defaults
   </summary>
      <returns>The max width value.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetMaxWidth">
      <summary>
   Gets the maximum width.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetMaxHeightValue">
      <summary>
   May be null if this cell is row defaults
   </summary>
      <returns>The max height value.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetMaxHeight">
      <summary>
   Gets the maximum height.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetSpaceTopValue">
      <summary>
   May be null if this value is not set
   </summary>
      <returns>The space top value.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetSpaceTop">
      <summary>
   Gets the space top.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetSpaceLeftValue">
      <summary>
   May be null if this value is not set.
   </summary>
      <returns>The space left value.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetSpaceLeft">
      <summary>
   Gets the space left.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetSpaceBottomValue">
      <summary>
   May be null if this value is not set
   </summary>
      <returns>The space bottom value.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetSpaceBottom">
      <summary>
   Gets the space bottom.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetSpaceRightValue">
      <summary>
   May be null if this value is not set
   </summary>
      <returns>The space right value.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetSpaceRight">
      <summary>
   Gets the space right.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetPadTopValue">
      <summary>
   May be null if this value is not set
   </summary>
      <returns>The pad top value.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetPadTop">
      <summary>
   Gets the pad top.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetPadLeftValue">
      <summary>
   May be null if this value is not set
   </summary>
      <returns>The pad left value.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetPadLeft">
      <summary>
   Gets the pad left.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetPadBottomValue">
      <summary>
   May be null if this value is not set
   </summary>
      <returns>The pad bottom value.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetPadBottom">
      <summary>
   Gets the pad bottom.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetPadRightValue">
      <summary>
   May be null if this value is not set
   </summary>
      <returns>The pad right value.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetPadRight">
      <summary>
   Gets the pad right.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetPadX">
      <summary>
   Returns {@link #getPadLeft()} plus {@link #getPadRight()}
   </summary>
      <returns>The pad x.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetPadY">
      <summary>
   Returns {@link #getPadTop()} plus {@link #getPadBottom()}
   </summary>
      <returns>The pad y.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetFillX">
      <summary>
   May be null if this value is not set
   </summary>
      <returns>The fill x.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetFillY">
      <summary>
   May be null
   </summary>
      <returns>The fill y.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetAlign">
      <summary>
   May be null
   </summary>
      <returns>The align.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetExpandX">
      <summary>
   May be null
   </summary>
      <returns>The expand x.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetExpandY">
      <summary>
   May be null
   </summary>
      <returns>The expand y.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetColspan">
      <summary>
   May be null
   </summary>
      <returns>The colspan.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetUniformX">
      <summary>
   May be null
   </summary>
      <returns>The uniform x.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetUniformY">
      <summary>
   May be null
   </summary>
      <returns>The uniform y.</returns>
    </member>
    <member name="M:Nez.UI.Cell.IsEndRow">
      <summary>
   May be null
   </summary>
      <returns>
        <c>true</c>, if end row was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetComputedPadTop">
      <summary>
   The actual amount of combined padding and spacing from the last layout.
   </summary>
      <returns>The computed pad top.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetComputedPadLeft">
      <summary>
   The actual amount of combined padding and spacing from the last layout.
   </summary>
      <returns>The computed pad left.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetComputedPadBottom">
      <summary>
   The actual amount of combined padding and spacing from the last layout
   </summary>
      <returns>The computed pad bottom.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetComputedPadRight">
      <summary>
   The actual amount of combined padding and spacing from the last layout
   </summary>
      <returns>The computed pad right.</returns>
    </member>
    <member name="M:Nez.UI.Cell.SetRow">
      <summary>
   Sets the row.
   </summary>
    </member>
    <member name="M:Nez.UI.Cell.GetTable">
      <summary>
   Gets the table.
   </summary>
      <returns>Table.</returns>
    </member>
    <member name="M:Nez.UI.Cell.GetDefaults">
      <summary>
   Returns the defaults to use for all cells. This can be used to avoid needing to set the same defaults for every table (eg,
   for spacing).
   </summary>
      <returns>The defaults.</returns>
    </member>
    <member name="M:Nez.UI.Cell.Clear">
      <summary>
   Sets all constraint fields to null
   </summary>
    </member>
    <member name="M:Nez.UI.Cell.Reset">
      <summary>
   Reset state so the cell can be reused, setting all constraints to their {@link #defaults() default} values.
   </summary>
    </member>
    <member name="M:Nez.UI.Cell.Set(Cell)">
      <summary>
   Sets the specified cell.
   </summary>
      <param name="cell">The cell.</param>
    </member>
    <member name="M:Nez.UI.Cell.Merge(Cell)">
      <summary>
   cell may be null
   </summary>
      <param name="cell">Cell.</param>
    </member>
    <member name="M:Nez.UI.Cell.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.UI.DebugRectangleF">
      <summary>
   Struct DebugRectangleF
   </summary>
    </member>
    <member name="F:Nez.UI.DebugRectangleF.Rect">
      <summary>
   The rect
   </summary>
    </member>
    <member name="F:Nez.UI.DebugRectangleF.Color">
      <summary>
   The color
   </summary>
    </member>
    <member name="M:Nez.UI.DebugRectangleF.#ctor(System.Single,System.Single,System.Single,System.Single,Color)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.DebugRectangleF" /> struct.
   </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.UI.DebugRectangleF.Set(System.Single,System.Single,System.Single,System.Single,Color)">
      <summary>
   Sets the specified x.
   </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="color">The color.</param>
    </member>
    <member name="T:Nez.UI.Direction">
      <summary>
   Enum Direction
   </summary>
    </member>
    <member name="F:Nez.UI.Direction.None">
      <summary>
   The none
   </summary>
    </member>
    <member name="F:Nez.UI.Direction.Up">
      <summary>
   Up
   </summary>
    </member>
    <member name="F:Nez.UI.Direction.Down">
      <summary>
   Down
   </summary>
    </member>
    <member name="F:Nez.UI.Direction.Left">
      <summary>
   The left
   </summary>
    </member>
    <member name="F:Nez.UI.Direction.Right">
      <summary>
   The right
   </summary>
    </member>
    <member name="T:Nez.UI.Element">
      <summary>
   Class Element.
   Implements the <see cref="T:Nez.UI.ILayout" /></summary>
      <seealso cref="T:Nez.UI.ILayout" />
    </member>
    <member name="P:Nez.UI.Element.NeedsLayout">
      <summary>
   true if the widget's layout has been {@link #invalidate() invalidated}.
   </summary>
      <value>
        <c>true</c> if needs layout; otherwise, <c>false</c>.</value>
    </member>
    <member name="F:Nez.UI.Element.UserData">
      <summary>
   use this to stuff any relevant data required for your UI setup
   </summary>
    </member>
    <member name="F:Nez.UI.Element.x">
      <summary>
   The x
   </summary>
    </member>
    <member name="F:Nez.UI.Element.width">
      <summary>
   The width
   </summary>
    </member>
    <member name="F:Nez.UI.Element.color">
      <summary>
   The color
   </summary>
    </member>
    <member name="M:Nez.UI.Element.Draw(Batcher,System.Single)">
      <summary>
   If this method is overridden, the super method or {@link #validate()} should be called to ensure the widget is laid out.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="parentAlpha">Parent alpha.</param>
    </member>
    <member name="M:Nez.UI.Element.GetStage">
      <summary>
   Returns the stage that this element is currently in, or null if not in a stage.
   </summary>
      <returns>The stage.</returns>
    </member>
    <member name="M:Nez.UI.Element.HasParent">
      <summary>
   Returns true if the element's parent is not null
   </summary>
      <returns>
        <c>true</c>, if parent was hased, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.Element.GetParent">
      <summary>
   Returns the parent element, or null if not in a group
   </summary>
      <returns>The parent.</returns>
    </member>
    <member name="M:Nez.UI.Element.IsTouchable">
      <summary>
   Returns true if input events are processed by this element.
   </summary>
      <returns>The touchable.</returns>
    </member>
    <member name="M:Nez.UI.Element.GetTouchable">
      <summary>
   Gets the touchable.
   </summary>
      <returns>Touchable.</returns>
    </member>
    <member name="M:Nez.UI.Element.SetTouchable(Touchable)">
      <summary>
   Determines how touch events are distributed to this element. Default is {@link Touchable#enabled}.
   </summary>
      <param name="touchable">Touchable.</param>
    </member>
    <member name="M:Nez.UI.Element.SetIsVisible(System.Boolean)">
      <summary>
   Sets the is visible.
   </summary>
      <param name="visible">if set to <c>true</c> [visible].</param>
    </member>
    <member name="M:Nez.UI.Element.IsVisible">
      <summary>
   Determines whether this instance is visible.
   </summary>
      <returns>
        <c>true</c> if this instance is visible; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.Element.SetVisible(System.Boolean)">
      <summary>
   If false, the element will not be drawn and will not receive touch events. Default is true.
   </summary>
      <param name="visible">Visible.</param>
    </member>
    <member name="M:Nez.UI.Element.GetX">
      <summary>
   Returns the X position of the element's left edge
   </summary>
      <returns>The x.</returns>
    </member>
    <member name="M:Nez.UI.Element.GetX(System.Int32)">
      <summary>
   Returns the X position of the specified {@link Align alignment}.
   </summary>
      <param name="alignment">Alignment.</param>
      <returns>The x.</returns>
    </member>
    <member name="M:Nez.UI.Element.SetX(System.Single)">
      <summary>
   Sets the x.
   </summary>
      <param name="x">The x.</param>
      <returns>Element.</returns>
    </member>
    <member name="M:Nez.UI.Element.GetY">
      <summary>
   Returns the Y position of the element's bottom edge
   </summary>
      <returns>The y.</returns>
    </member>
    <member name="M:Nez.UI.Element.GetY(System.Int32)">
      <summary>
   Returns the Y position of the specified {@link Align alignment}
   </summary>
      <param name="alignment">Alignment.</param>
      <returns>The y.</returns>
    </member>
    <member name="M:Nez.UI.Element.SetY(System.Single)">
      <summary>
   Sets the y.
   </summary>
      <param name="y">The y.</param>
      <returns>Element.</returns>
    </member>
    <member name="M:Nez.UI.Element.SetPosition(System.Single,System.Single)">
      <summary>
   Sets the position of the element's bottom left corner
   </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
      <returns>Element.</returns>
    </member>
    <member name="M:Nez.UI.Element.SetPosition(System.Single,System.Single,System.Int32)">
      <summary>
   Sets the position using the specified {@link Align alignment}. Note this may set the position to non-integer coordinates
   </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
      <param name="alignment">Alignment.</param>
    </member>
    <member name="M:Nez.UI.Element.MoveBy(System.Single,System.Single)">
      <summary>
   Add x and y to current position
   </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
    </member>
    <member name="M:Nez.UI.Element.GetWidth">
      <summary>
   Gets the width.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Element.SetWidth(System.Single)">
      <summary>
   Sets the width.
   </summary>
      <param name="width">The width.</param>
    </member>
    <member name="M:Nez.UI.Element.GetHeight">
      <summary>
   Gets the height.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Element.SetHeight(System.Single)">
      <summary>
   Sets the height.
   </summary>
      <param name="height">The height.</param>
    </member>
    <member name="M:Nez.UI.Element.SetSize(System.Single,System.Single)">
      <summary>
   Sets the size.
   </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
    </member>
    <member name="M:Nez.UI.Element.GetBottom">
      <summary>
   Returns y plus height
   </summary>
      <returns>The top.</returns>
    </member>
    <member name="M:Nez.UI.Element.GetRight">
      <summary>
   Returns x plus width
   </summary>
      <returns>The right.</returns>
    </member>
    <member name="M:Nez.UI.Element.SetBounds(System.Single,System.Single,System.Single,System.Single)">
      <summary>
   Sets the x, y, width, and height.
   </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
    </member>
    <member name="M:Nez.UI.Element.GetOriginX">
      <summary>
   Gets the origin x.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Element.SetOriginX(System.Single)">
      <summary>
   Sets the origin x.
   </summary>
      <param name="originX">The origin x.</param>
    </member>
    <member name="M:Nez.UI.Element.GetOriginY">
      <summary>
   Gets the origin y.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Element.SetOriginY(System.Single)">
      <summary>
   Sets the origin y.
   </summary>
      <param name="originY">The origin y.</param>
    </member>
    <member name="M:Nez.UI.Element.SetOrigin(System.Single,System.Single)">
      <summary>
   Sets the origin position which is relative to the element's bottom left corner
   </summary>
      <param name="originX">Origin x.</param>
      <param name="originY">Origin y.</param>
    </member>
    <member name="M:Nez.UI.Element.SetOrigin(System.Int32)">
      <summary>
   Sets the origin position to the specified {@link Align alignment}.
   </summary>
      <param name="alignment">Alignment.</param>
    </member>
    <member name="M:Nez.UI.Element.GetScaleX">
      <summary>
   Gets the scale x.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Element.SetScaleX(System.Single)">
      <summary>
   Sets the scale x.
   </summary>
      <param name="scaleX">The scale x.</param>
    </member>
    <member name="M:Nez.UI.Element.GetScaleY">
      <summary>
   Gets the scale y.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Element.SetScaleY(System.Single)">
      <summary>
   Sets the scale y.
   </summary>
      <param name="scaleY">The scale y.</param>
    </member>
    <member name="M:Nez.UI.Element.SetScale(System.Single)">
      <summary>
   Sets the scale for both X and Y
   </summary>
      <param name="scaleXY">Scale X.</param>
    </member>
    <member name="M:Nez.UI.Element.SetScale(System.Single,System.Single)">
      <summary>
   Sets the scale X and scale Y
   </summary>
      <param name="scaleX">Scale x.</param>
      <param name="scaleY">Scale y.</param>
    </member>
    <member name="M:Nez.UI.Element.ScaleBy(System.Single)">
      <summary>
   Adds the specified scale to the current scale
   </summary>
      <param name="scale">Scale.</param>
    </member>
    <member name="M:Nez.UI.Element.ScaleBy(System.Single,System.Single)">
      <summary>
   Adds the specified scale to the current scale
   </summary>
      <param name="scaleX">Scale x.</param>
      <param name="scaleY">Scale y.</param>
    </member>
    <member name="M:Nez.UI.Element.GetRotation">
      <summary>
   Gets the rotation.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Element.SetRotation(System.Single)">
      <summary>
   Sets the rotation.
   </summary>
      <param name="degrees">The degrees.</param>
    </member>
    <member name="M:Nez.UI.Element.RotateBy(System.Single)">
      <summary>
   Adds the specified rotation to the current rotation
   </summary>
      <param name="amountInDegrees">Amount in degrees.</param>
    </member>
    <member name="M:Nez.UI.Element.SetColor(Color)">
      <summary>
   Sets the color.
   </summary>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.UI.Element.GetColor">
      <summary>
   Returns the color the element will be tinted when drawn
   </summary>
      <returns>The color.</returns>
    </member>
    <member name="M:Nez.UI.Element.ToFront">
      <summary>
   Changes the z-order for this element so it is in front of all siblings
   </summary>
    </member>
    <member name="M:Nez.UI.Element.ToBack">
      <summary>
   Changes the z-order for this element so it is in back of all siblings
   </summary>
    </member>
    <member name="M:Nez.UI.Element.SetZIndex(System.Int32)">
      <summary>
   Sets the z-index of this element. The z-index is the index into the parent's {@link Group#getChildren() children}, where a
   lower index is below a higher index. Setting a z-index higher than the number of children will move the child to the front.
   Setting a z-index less than zero is invalid.
   </summary>
      <param name="index">Index.</param>
    </member>
    <member name="M:Nez.UI.Element.ClipBegin(Batcher)">
      <summary>
   Calls clipBegin(Batcher, float, float, float, float) to clip this actor's bounds
   </summary>
      <param name="batcher">The batcher.</param>
      <returns>The begin.</returns>
    </member>
    <member name="M:Nez.UI.Element.ClipBegin(Batcher,System.Single,System.Single,System.Single,System.Single)">
      <summary>
   Clips the specified screen aligned rectangle, specified relative to the transform matrix of the stage's Batch. The
   transform matrix and the stage's camera must not have rotational components. Calling this method must be followed by a call
   to clipEnd() if true is returned.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.Element.ClipEnd(Batcher)">
      <summary>
   Ends clipping begun by clipBegin(Batcher, float, float, float, float)
   </summary>
      <param name="batcher">The batcher.</param>
      <returns>The end.</returns>
    </member>
    <member name="M:Nez.UI.Element.SetDebug(System.Boolean)">
      <summary>
   If true, {@link #debugDraw} will be called for this element
   </summary>
      <param name="enabled">Enabled.</param>
    </member>
    <member name="M:Nez.UI.Element.GetDebug">
      <summary>
   Gets the debug.
   </summary>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.Element.ScreenToLocalCoordinates(Vector2)">
      <summary>
   Transforms the specified point in screen coordinates to the element's local coordinate system
   </summary>
      <param name="screenCoords">Screen coords.</param>
      <returns>The to local coordinates.</returns>
    </member>
    <member name="M:Nez.UI.Element.StageToLocalCoordinates(Vector2)">
      <summary>
   Transforms the specified point in the stage's coordinates to the element's local coordinate system.
   </summary>
      <param name="stageCoords">Stage coords.</param>
      <returns>The to local coordinates.</returns>
    </member>
    <member name="M:Nez.UI.Element.LocalToStageCoordinates(Vector2)">
      <summary>
   Transforms the specified point in the element's coordinates to be in the stage's coordinates
   </summary>
      <param name="localCoords">Local coords.</param>
      <returns>The to stage coordinates.</returns>
    </member>
    <member name="M:Nez.UI.Element.LocalToAscendantCoordinates(Element,Vector2)">
      <summary>
   Converts coordinates for this element to those of a parent element. The ascendant does not need to be a direct parent
   </summary>
      <param name="ascendant">Ascendant.</param>
      <param name="localCoords">Local coords.</param>
      <returns>The to ascendant coordinates.</returns>
    </member>
    <member name="M:Nez.UI.Element.ParentToLocalCoordinates(Vector2)">
      <summary>
   Converts the coordinates given in the parent's coordinate system to this element's coordinate system.
   </summary>
      <param name="parentCoords">Parent coords.</param>
      <returns>The to local coordinates.</returns>
    </member>
    <member name="M:Nez.UI.Element.LocalToParentCoordinates(Vector2)">
      <summary>
   Transforms the specified point in the element's coordinates to be in the parent's coordinates.
   </summary>
      <param name="localCoords">Local coords.</param>
      <returns>The to parent coordinates.</returns>
    </member>
    <member name="M:Nez.UI.Element.DebugRender(Batcher)">
      <summary>
   Draws this element's debug lines
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="M:Nez.UI.Element.Hit(Vector2)">
      <summary>
   Hits the specified point.
   </summary>
      <param name="point">The point.</param>
      <returns>Element.</returns>
    </member>
    <member name="M:Nez.UI.Element.Remove">
      <summary>
   Removes this element from its parent, if it has a parent
   </summary>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="P:Nez.UI.Element.FillParent">
      <summary>
   If true, this element will be sized to the parent in {@link #validate()}. If the parent is the stage, the element will be sized
   to the stage. This method is for convenience only when the widget's parent does not set the size of its children (such as
   the stage).
   </summary>
      <value>
        <c>true</c> if fill parent; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.UI.Element.LayoutEnabled">
      <summary>
   Enables or disables the layout for this element and all child elements, recursively. When false, {@link #validate()} will not
   cause a layout to occur. This can be useful when an element will be manipulated externally, such as with actions.
   Default is true.
   </summary>
      <value>
        <c>true</c> if layout enabled; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.UI.Element.MinWidth">
      <summary>
   Gets the minimum width.
   </summary>
      <value>The minimum width.</value>
    </member>
    <member name="P:Nez.UI.Element.MinHeight">
      <summary>
   Gets the minimum height.
   </summary>
      <value>The minimum height.</value>
    </member>
    <member name="P:Nez.UI.Element.PreferredWidth">
      <summary>
   Gets the width of the preferred.
   </summary>
      <value>The width of the preferred.</value>
    </member>
    <member name="P:Nez.UI.Element.PreferredHeight">
      <summary>
   Gets the height of the preferred.
   </summary>
      <value>The height of the preferred.</value>
    </member>
    <member name="P:Nez.UI.Element.MaxWidth">
      <summary>
   Zero indicates no max width
   </summary>
      <value>The width of the max.</value>
    </member>
    <member name="P:Nez.UI.Element.MaxHeight">
      <summary>
   Zero indicates no max height
   </summary>
      <value>The height of the max.</value>
    </member>
    <member name="M:Nez.UI.Element.Layout">
      <summary>
   Computes and caches any information needed for drawing and, if this element has children, positions and sizes each child,
   calls {@link #invalidate()} any each child whose width or height has changed, and calls {@link #validate()} on each child.
   This method should almost never be called directly, instead {@link #validate()} should be used
   </summary>
    </member>
    <member name="M:Nez.UI.Element.Invalidate">
      <summary>
   Invalidates this element's layout, causing {@link #layout()} to happen the next time {@link #validate()} is called. This
   method should be called when state changes in the element that requires a layout but does not change the minimum, preferred,
   maximum, or actual size of the element (meaning it does not affect the parent element's layout).
   </summary>
    </member>
    <member name="M:Nez.UI.Element.InvalidateHierarchy">
      <summary>
   Invalidates this element and all its parents, calling {@link #invalidate()} on each. This method should be called when state
   changes in the element that affects the minimum, preferred, maximum, or actual size of the element (meaning it it potentially
   affects the parent element's layout).
   </summary>
    </member>
    <member name="M:Nez.UI.Element.Validate">
      <summary>
   Ensures the element has been laid out. Calls {@link #layout()} if {@link #invalidate()} has been called since the last time
   {@link #validate()} was called, or if the element otherwise needs to be laid out. This method is usually called in
   {@link element#draw(Batch, float)} before drawing is performed.
   </summary>
    </member>
    <member name="M:Nez.UI.Element.Pack">
      <summary>
   Sizes this element to its preferred width and height, then calls {@link #validate()}.
   Generally this method should not be called in an element's constructor because it calls {@link #layout()}, which means a
   subclass would have layout() called before the subclass' constructor. Instead, in constructors simply set the element's size
   to {@link #getPrefWidth()} and {@link #getPrefHeight()}. This allows the element to have a size at construction time for more
   convenient use with groups that do not layout their children.
   </summary>
    </member>
    <member name="T:Nez.UI.Group">
      <summary>
   Class Group.
   Implements the <see cref="T:Nez.UI.Element" />
   Implements the <see cref="T:Nez.UI.ICullable" /></summary>
      <seealso cref="T:Nez.UI.Element" />
      <seealso cref="T:Nez.UI.ICullable" />
    </member>
    <member name="M:Nez.UI.Group.AddElement``1(``0)">
      <summary>
   Adds the element.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="element">The element.</param>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.UI.Group.InsertElement``1(System.Int32,``0)">
      <summary>
   Inserts the element.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="index">The index.</param>
      <param name="element">The element.</param>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.UI.Group.RemoveElement(Element)">
      <summary>
   Removes the element.
   </summary>
      <param name="element">The element.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.Group.GetChildren">
      <summary>
   Returns an ordered list of child elements in this group
   </summary>
      <returns>The children.</returns>
    </member>
    <member name="M:Nez.UI.Group.SetTransform(System.Boolean)">
      <summary>
   Sets the transform.
   </summary>
      <param name="transform">if set to <c>true</c> [transform].</param>
    </member>
    <member name="M:Nez.UI.Group.Clear">
      <summary>
   Removes all children
   </summary>
    </member>
    <member name="M:Nez.UI.Group.ClearChildren">
      <summary>
   Removes all elements from this group
   </summary>
    </member>
    <member name="M:Nez.UI.Group.Hit(Vector2)">
      <summary>
   Hits the specified point.
   </summary>
      <param name="point">The point.</param>
      <returns>Element.</returns>
    </member>
    <member name="M:Nez.UI.Group.Draw(Batcher,System.Single)">
      <summary>
   If this method is overridden, the super method or {@link #validate()} should be called to ensure the widget is laid out.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="parentAlpha">Parent alpha.</param>
    </member>
    <member name="M:Nez.UI.Group.DrawChildren(Batcher,System.Single)">
      <summary>
   Draws the children.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="parentAlpha">The parent alpha.</param>
    </member>
    <member name="M:Nez.UI.Group.DebugRender(Batcher)">
      <summary>
   Draws this element's debug lines
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="M:Nez.UI.Group.DebugRenderChildren(Batcher,System.Single)">
      <summary>
   Debugs the render children.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="parentAlpha">The parent alpha.</param>
    </member>
    <member name="M:Nez.UI.Group.SetDebug(System.Boolean,System.Boolean)">
      <summary>
   If true, drawDebug() will be called for this group and, optionally, all children recursively.
   </summary>
      <param name="enabled">If set to <c>true</c> enabled.</param>
      <param name="recursively">If set to <c>true</c> recursively.</param>
    </member>
    <member name="M:Nez.UI.Group.DebugAll">
      <summary>
   Calls {setDebug(true, true)
   </summary>
      <returns>The all.</returns>
    </member>
    <member name="P:Nez.UI.Group.LayoutEnabled">
      <summary>
   Enables or disables the layout for this element and all child elements, recursively. When false, {@link #validate()} will not
   cause a layout to occur. This can be useful when an element will be manipulated externally, such as with actions.
   Default is true.
   </summary>
      <value>
        <c>true</c> if layout enabled; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:Nez.UI.Group.Pack">
      <summary>
   Sizes this element to its preferred width and height, then calls {@link #validate()}.
   Generally this method should not be called in an element's constructor because it calls {@link #layout()}, which means a
   subclass would have layout() called before the subclass' constructor. Instead, in constructors simply set the element's size
   to {@link #getPrefWidth()} and {@link #getPrefHeight()}. This allows the element to have a size at construction time for more
   convenient use with groups that do not layout their children.
   </summary>
    </member>
    <member name="M:Nez.UI.Group.SetCullingArea(Rectangle)">
      <summary>
   Sets the culling area.
   </summary>
      <param name="cullingArea">The culling area.</param>
    </member>
    <member name="T:Nez.UI.ICullable">
      <summary>
   Interface ICullable
   </summary>
    </member>
    <member name="M:Nez.UI.ICullable.SetCullingArea(Rectangle)">
      <summary>
   Sets the culling area.
   </summary>
      <param name="cullingArea">The culling area.</param>
    </member>
    <member name="T:Nez.UI.IGamepadFocusable">
      <summary>
   interface applied to any Element that wants to take part in gamepad focus. By default, the Button class implements this which cascades
   down to Checkbox and TextButton. When using the properties you must set shouldUseExplicitFocusableControl to true. If you want a direction
   to not change focus make that direction null. If shouldUseExplicitFocusableControl the Stage will attempt to find the next focusable
   in the direction pressed.
   </summary>
    </member>
    <member name="P:Nez.UI.IGamepadFocusable.ShouldUseExplicitFocusableControl">
      <summary>
   Gets or sets a value indicating whether [should use explicit focusable control].
   </summary>
      <value>
        <c>true</c> if [should use explicit focusable control]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.UI.IGamepadFocusable.GamepadUpElement">
      <summary>
   Gets or sets the gamepad up element.
   </summary>
      <value>The gamepad up element.</value>
    </member>
    <member name="P:Nez.UI.IGamepadFocusable.GamepadDownElement">
      <summary>
   Gets or sets the gamepad down element.
   </summary>
      <value>The gamepad down element.</value>
    </member>
    <member name="P:Nez.UI.IGamepadFocusable.GamepadLeftElement">
      <summary>
   Gets or sets the gamepad left element.
   </summary>
      <value>The gamepad left element.</value>
    </member>
    <member name="P:Nez.UI.IGamepadFocusable.GamepadRightElement">
      <summary>
   Gets or sets the gamepad right element.
   </summary>
      <value>The gamepad right element.</value>
    </member>
    <member name="M:Nez.UI.IGamepadFocusable.EnableExplicitFocusableControl(IGamepadFocusable,IGamepadFocusable,IGamepadFocusable,IGamepadFocusable)">
      <summary>
   enables shouldUseExplicitFocusableControl and sets the elements corresponding to each direction
   </summary>
      <param name="upEle">Up ele.</param>
      <param name="downEle">Down ele.</param>
      <param name="leftEle">Left ele.</param>
      <param name="rightEle">Right ele.</param>
    </member>
    <member name="M:Nez.UI.IGamepadFocusable.OnUnhandledDirectionPressed(Direction)">
      <summary>
   called only when the following conditions are met:
   - shouldUseExplicitFocusableControl is true
   - this Element is focused
   - a gamepad direction was pressed with a null gamepadDIRECTIONElement
   </summary>
      <param name="direction">Direction.</param>
    </member>
    <member name="M:Nez.UI.IGamepadFocusable.OnFocused">
      <summary>
   called when gamepad focuses on the Element
   </summary>
    </member>
    <member name="M:Nez.UI.IGamepadFocusable.OnUnfocused">
      <summary>
   called when gamepad focus is removed from the Element
   </summary>
    </member>
    <member name="M:Nez.UI.IGamepadFocusable.OnActionButtonPressed">
      <summary>
   called when the action button is pressed while the Element is focused
   </summary>
    </member>
    <member name="M:Nez.UI.IGamepadFocusable.OnActionButtonReleased">
      <summary>
   called when the action button is released while the Element is focused
   </summary>
    </member>
    <member name="T:Nez.UI.IInputListener">
      <summary>
   Interface IInputListener
   </summary>
    </member>
    <member name="M:Nez.UI.IInputListener.OnMouseEnter">
      <summary>
   Called when [mouse enter].
   </summary>
    </member>
    <member name="M:Nez.UI.IInputListener.OnMouseExit">
      <summary>
   Called when [mouse exit].
   </summary>
    </member>
    <member name="M:Nez.UI.IInputListener.OnLeftMousePressed(Vector2)">
      <summary>
   if true is returned then onMouseDown/Up will be called else they will not be called
   </summary>
      <param name="mousePos">Mouse position.</param>
      <returns>
        <c>true</c>, if mouse pressed was oned, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.IInputListener.OnRightMousePressed(Vector2)">
      <summary>
   if true is returned then onMouseDown/Up will be called else they will not be called
   </summary>
      <param name="mousePos">Mouse position.</param>
      <returns>
        <c>true</c>, if right mouse pressed was oned, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.IInputListener.OnMouseMoved(Vector2)">
      <summary>
   called when the mouse moves only on an element that returned true for onMousePressed. It is safe to call stage.removeInputFocusListener
   here if you are uninterested in the onMouseUp event.
   </summary>
      <param name="mousePos">Mouse position.</param>
    </member>
    <member name="M:Nez.UI.IInputListener.OnLeftMouseUp(Vector2)">
      <summary>
   called when the left mouse button is released
   </summary>
      <param name="mousePos">Mouse position.</param>
    </member>
    <member name="M:Nez.UI.IInputListener.OnRightMouseUp(Vector2)">
      <summary>
   called when the right mouse button is released
   </summary>
      <param name="mousePos">Mouse position.</param>
    </member>
    <member name="M:Nez.UI.IInputListener.OnMouseScrolled(System.Int32)">
      <summary>
   if true is returned the scroll event will be consumed by the Element
   </summary>
      <param name="mouseWheelDelta">The mouse wheel delta.</param>
      <returns>The mouse scrolled.</returns>
    </member>
    <member name="T:Nez.UI.IKeyboardListener">
      <summary>
   Interface IKeyboardListener
   </summary>
    </member>
    <member name="M:Nez.UI.IKeyboardListener.KeyDown(Keys)">
      <summary>
   called when a key is first pressed
   </summary>
      <param name="key">Key.</param>
    </member>
    <member name="M:Nez.UI.IKeyboardListener.KeyPressed(Keys,System.Char)">
      <summary>
   called the same frame as keyDown and for repeating keys (key held down). This is only called for non-modifier keys.
   </summary>
      <param name="key">Key.</param>
      <param name="character">The character.</param>
    </member>
    <member name="M:Nez.UI.IKeyboardListener.KeyReleased(Keys)">
      <summary>
   called when a key is released
   </summary>
      <param name="key">Key.</param>
    </member>
    <member name="M:Nez.UI.IKeyboardListener.GainedFocus">
      <summary>
   called when keyboard focus is gained
   </summary>
    </member>
    <member name="M:Nez.UI.IKeyboardListener.LostFocus">
      <summary>
   called when keyboard focus is lost
   </summary>
    </member>
    <member name="T:Nez.UI.Scaling">
      <summary>
   Enum Scaling
   </summary>
    </member>
    <member name="T:Nez.UI.ScalingExt">
      <summary>
   Class ScalingExt.
   </summary>
    </member>
    <member name="F:Nez.UI.Scaling.Fit">
      <summary>
   Scales the source to fit the target while keeping the same aspect ratio. This may cause the source to be smaller than the
   target in one direction
   </summary>
    </member>
    <member name="F:Nez.UI.Scaling.Fill">
      <summary>
   Scales the source to fill the target while keeping the same aspect ratio. This may cause the source to be larger than the
   target in one direction.
   </summary>
    </member>
    <member name="F:Nez.UI.Scaling.FillX">
      <summary>
   Scales the source to fill the target in the x direction while keeping the same aspect ratio. This may cause the source to be
   smaller or larger than the target in the y direction.
   </summary>
    </member>
    <member name="F:Nez.UI.Scaling.FillY">
      <summary>
   Scales the source to fill the target in the y direction while keeping the same aspect ratio. This may cause the source to be
   smaller or larger than the target in the x direction.
   </summary>
    </member>
    <member name="F:Nez.UI.Scaling.Stretch">
      <summary>
   Scales the source to fill the target. This may cause the source to not keep the same aspect ratio.
   </summary>
    </member>
    <member name="F:Nez.UI.Scaling.StretchX">
      <summary>
   Scales the source to fill the target in the x direction, without changing the y direction. This may cause the source to not
   keep the same aspect ratio.
   </summary>
    </member>
    <member name="F:Nez.UI.Scaling.StretchY">
      <summary>
   Scales the source to fill the target in the y direction, without changing the x direction. This may cause the source to not
   keep the same aspect ratio.
   </summary>
    </member>
    <member name="F:Nez.UI.Scaling.None">
      <summary>
   The source is not scaled.
   </summary>
    </member>
    <member name="M:Nez.UI.ScalingExt.Apply(Scaling,System.Single,System.Single,System.Single,System.Single)">
      <summary>
   Returns the size of the source scaled to the target
   </summary>
      <param name="self">Self.</param>
      <param name="sourceWidth">Source width.</param>
      <param name="sourceHeight">Source height.</param>
      <param name="targetWidth">Target width.</param>
      <param name="targetHeight">Target height.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="T:Nez.UI.Touchable">
      <summary>
   Enum Touchable
   </summary>
    </member>
    <member name="F:Nez.UI.Touchable.Enabled">
      <summary>
   All touch input events will be received by the element and any children.
   </summary>
    </member>
    <member name="F:Nez.UI.Touchable.Disabled">
      <summary>
   No touch input events will be received by the element or any children.
   </summary>
    </member>
    <member name="F:Nez.UI.Touchable.ChildrenOnly">
      <summary>
   No touch input events will be received by the element, but children will still receive events. Note that events on the
   children will still bubble to the parent.
   </summary>
    </member>
    <member name="T:Nez.UI.Value">
      <summary>
   Value placeholder, allowing the value to be computed on request. Values are provided an element for context which reduces the
   number of value instances that need to be created and reduces verbosity in code that specifies values
   </summary>
    </member>
    <member name="T:Nez.UI.Value.Fixed">
      <summary>
   A fixed value that is not computed each time it is used.
   </summary>
    </member>
    <member name="T:Nez.UI.Value.MinWidthValue">
      <summary>
   Value that is the minWidth of the element in the cell.
   </summary>
    </member>
    <member name="T:Nez.UI.Value.MinHeightValue">
      <summary>
   Value that is the minHeight of the element in the cell.
   </summary>
    </member>
    <member name="T:Nez.UI.Value.PrefWidthValue">
      <summary>
   Value that is the prefWidth of the element in the cell.
   </summary>
    </member>
    <member name="T:Nez.UI.Value.PrefHeightValue">
      <summary>
   Value that is the prefHeight of the element in the cell.
   </summary>
    </member>
    <member name="T:Nez.UI.Value.MaxWidthValue">
      <summary>
   Value that is the maxWidth of the element in the cell.
   </summary>
    </member>
    <member name="T:Nez.UI.Value.MaxHeightValue">
      <summary>
   Value that is the maxHeight of the element in the cell.
   </summary>
    </member>
    <member name="T:Nez.UI.Value.PercentWidthValue">
      <summary>
   Returns a value that is a percentage of the element's width.
   </summary>
    </member>
    <member name="T:Nez.UI.Value.PercentWidthDelegateValue">
      <summary>
   Returns a value that is a percentage of the specified elements's width. The context element is ignored.
   </summary>
    </member>
    <member name="T:Nez.UI.Value.PercentageHeightValue">
      <summary>
   Returns a value that is a percentage of the element's height.
   </summary>
    </member>
    <member name="T:Nez.UI.Value.PercentHeightDelegateValue">
      <summary>
   Returns a value that is a percentage of the specified elements's height. The context element is ignored.
   </summary>
    </member>
    <member name="M:Nez.UI.Value.Get(Element)">
      <summary>
   context May be null
   </summary>
      <param name="context">Context.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="F:Nez.UI.Value.Zero">
      <summary>
   A value that is always zero.
   </summary>
    </member>
    <member name="M:Nez.UI.Value.Fixed.#ctor(System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Value.Fixed" /> class.
   </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Nez.UI.Value.Fixed.Get(Element)">
      <summary>
   context May be null
   </summary>
      <param name="context">Context.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="F:Nez.UI.Value.MinWidth">
      <summary>
   The minimum width
   </summary>
    </member>
    <member name="M:Nez.UI.Value.MinWidthValue.Get(Element)">
      <summary>
   context May be null
   </summary>
      <param name="context">Context.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="F:Nez.UI.Value.MinHeight">
      <summary>
   The minimum height
   </summary>
    </member>
    <member name="M:Nez.UI.Value.MinHeightValue.Get(Element)">
      <summary>
   context May be null
   </summary>
      <param name="context">Context.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="F:Nez.UI.Value.PrefWidth">
      <summary>
   The preference width
   </summary>
    </member>
    <member name="M:Nez.UI.Value.PrefWidthValue.Get(Element)">
      <summary>
   context May be null
   </summary>
      <param name="context">Context.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="F:Nez.UI.Value.PrefHeight">
      <summary>
   The preference height
   </summary>
    </member>
    <member name="M:Nez.UI.Value.PrefHeightValue.Get(Element)">
      <summary>
   context May be null
   </summary>
      <param name="context">Context.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="F:Nez.UI.Value.MaxWidth">
      <summary>
   The maximum width
   </summary>
    </member>
    <member name="M:Nez.UI.Value.MaxWidthValue.Get(Element)">
      <summary>
   context May be null
   </summary>
      <param name="context">Context.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="F:Nez.UI.Value.MaxHeight">
      <summary>
   The maximum height
   </summary>
    </member>
    <member name="M:Nez.UI.Value.MaxHeightValue.Get(Element)">
      <summary>
   context May be null
   </summary>
      <param name="context">Context.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Value.PercentWidth(System.Single)">
      <summary>
   Value that is the maxHeight of the element in the cell.
   </summary>
      <param name="percent">The percent.</param>
      <returns>Value.</returns>
    </member>
    <member name="F:Nez.UI.Value.PercentWidthValue.Percent">
      <summary>
   The percent
   </summary>
    </member>
    <member name="M:Nez.UI.Value.PercentWidthValue.Get(Element)">
      <summary>
   context May be null
   </summary>
      <param name="element">The element.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Value.PercentWidth(System.Single,Element)">
      <summary>
   Returns a value that is a percentage of the specified elements's width. The context element is ignored.
   </summary>
      <param name="percent">The percent.</param>
      <param name="delegateElement">The delegate element.</param>
      <returns>Value.</returns>
    </member>
    <member name="F:Nez.UI.Value.PercentWidthDelegateValue.DelegateElement">
      <summary>
   The delegate element
   </summary>
    </member>
    <member name="F:Nez.UI.Value.PercentWidthDelegateValue.Percent">
      <summary>
   The percent
   </summary>
    </member>
    <member name="M:Nez.UI.Value.PercentWidthDelegateValue.Get(Element)">
      <summary>
   context May be null
   </summary>
      <param name="element">The element.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Value.PercentHeight(System.Single)">
      <summary>
   Returns a value that is a percentage of the element's height.
   </summary>
      <param name="percent">The percent.</param>
      <returns>Value.</returns>
    </member>
    <member name="F:Nez.UI.Value.PercentageHeightValue.Percent">
      <summary>
   The percent
   </summary>
    </member>
    <member name="M:Nez.UI.Value.PercentageHeightValue.Get(Element)">
      <summary>
   context May be null
   </summary>
      <param name="element">The element.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Value.PercentHeight(System.Single,Element)">
      <summary>
   Returns a value that is a percentage of the specified elements's height. The context element is ignored.
   </summary>
      <param name="percent">The percent.</param>
      <param name="delegateElement">The delegate element.</param>
      <returns>Value.</returns>
    </member>
    <member name="F:Nez.UI.Value.PercentHeightDelegateValue.DelegateElement">
      <summary>
   The delegate element
   </summary>
    </member>
    <member name="F:Nez.UI.Value.PercentHeightDelegateValue.Percent">
      <summary>
   The percent
   </summary>
    </member>
    <member name="M:Nez.UI.Value.PercentHeightDelegateValue.Get(Element)">
      <summary>
   context May be null
   </summary>
      <param name="element">The element.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="T:Nez.UI.Container">
      <summary>
   A group with a single child that sizes and positions the child using constraints. This provides layout similar to a
   {@link Table} with a single cell but is more lightweight.
   </summary>
    </member>
    <member name="P:Nez.UI.Container.MinWidth">
      <summary>
   Gets the minimum width.
   </summary>
      <value>The minimum width.</value>
    </member>
    <member name="P:Nez.UI.Container.MinHeight">
      <summary>
   Gets the minimum height.
   </summary>
      <value>The minimum height.</value>
    </member>
    <member name="P:Nez.UI.Container.PreferredWidth">
      <summary>
   Gets the width of the preferred.
   </summary>
      <value>The width of the preferred.</value>
    </member>
    <member name="P:Nez.UI.Container.PreferredHeight">
      <summary>
   Gets the height of the preferred.
   </summary>
      <value>The height of the preferred.</value>
    </member>
    <member name="P:Nez.UI.Container.MaxWidth">
      <summary>
   Zero indicates no max width
   </summary>
      <value>The width of the max.</value>
    </member>
    <member name="P:Nez.UI.Container.MaxHeight">
      <summary>
   Zero indicates no max height
   </summary>
      <value>The height of the max.</value>
    </member>
    <member name="M:Nez.UI.Container.#ctor">
      <summary>
   Creates a container with no element
   </summary>
    </member>
    <member name="M:Nez.UI.Container.#ctor(Element)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Container" /> class.
   </summary>
      <param name="element">The element.</param>
    </member>
    <member name="M:Nez.UI.Container.Draw(Batcher,System.Single)">
      <summary>
   If this method is overridden, the super method or {@link #validate()} should be called to ensure the widget is laid out.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="parentAlpha">Parent alpha.</param>
    </member>
    <member name="M:Nez.UI.Container.SetBackground(IDrawable)">
      <summary>
   Sets the background drawable and adjusts the container's padding to match the background.
   </summary>
      <param name="background">Background.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetBackground(IDrawable,System.Boolean)">
      <summary>
   Sets the background drawable and, if adjustPadding is true, sets the container's padding to
   {@link Drawable#getBottomHeight()} , {@link Drawable#getTopHeight()}, {@link Drawable#getLeftWidth()}, and
   {@link Drawable#getRightWidth()}.
   If background is null, the background will be cleared and padding removed.
   </summary>
      <param name="background">Background.</param>
      <param name="adjustPadding">If set to <c>true</c> adjust padding.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetBackground">
      <summary>
   Gets the background.
   </summary>
      <returns>IDrawable.</returns>
    </member>
    <member name="M:Nez.UI.Container.Layout">
      <summary>
   Computes and caches any information needed for drawing and, if this element has children, positions and sizes each child,
   calls {@link #invalidate()} any each child whose width or height has changed, and calls {@link #validate()} on each child.
   This method should almost never be called directly, instead {@link #validate()} should be used
   </summary>
    </member>
    <member name="M:Nez.UI.Container.SetElement(Element)">
      <summary>
   element may be null
   </summary>
      <param name="element">element.</param>
      <returns>The element.</returns>
      <exception cref="T:System.Exception">element cannot be the Container.</exception>
    </member>
    <member name="M:Nez.UI.Container.GetElement``1">
      <summary>
   May be null
   </summary>
      <typeparam name="T">
      </typeparam>
      <returns>The element.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetElement">
      <summary>
   May be null
   </summary>
      <returns>The element.</returns>
    </member>
    <member name="M:Nez.UI.Container.RemoveElement(Element)">
      <summary>
   Removes the element.
   </summary>
      <param name="element">The element.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetSize(Value)">
      <summary>
   Sets the minWidth, prefWidth, maxWidth, minHeight, prefHeight, and maxHeight to the specified value
   </summary>
      <param name="size">Size.</param>
      <returns>Container.</returns>
      <exception cref="T:System.Exception">size cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Container.SetSize(Value,Value)">
      <summary>
   Sets the minWidth, prefWidth, maxWidth, minHeight, prefHeight, and maxHeight to the specified values
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <returns>Container.</returns>
      <exception cref="T:System.Exception">width cannot be null.</exception>
      <exception cref="T:System.Exception">height cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Container.SetSize(System.Single)">
      <summary>
   Sets the minWidth, prefWidth, maxWidth, minHeight, prefHeight, and maxHeight to the specified value
   </summary>
      <param name="size">Size.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetSize(System.Single,System.Single)">
      <summary>
   Sets the minWidth, prefWidth, maxWidth, minHeight, prefHeight, and maxHeight to the specified values
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetWidth(Value)">
      <summary>
   Sets the minWidth, prefWidth, and maxWidth to the specified value
   </summary>
      <param name="width">Width.</param>
      <returns>Container.</returns>
      <exception cref="T:System.Exception">width cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Container.SetWidth(System.Single)">
      <summary>
   Sets the minWidth, prefWidth, and maxWidth to the specified value
   </summary>
      <param name="width">Width.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetHeight(Value)">
      <summary>
   Sets the minHeight, prefHeight, and maxHeight to the specified value.
   </summary>
      <param name="height">Height.</param>
      <returns>Container.</returns>
      <exception cref="T:System.Exception">height cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Container.SetHeight(System.Single)">
      <summary>
   Sets the minHeight, prefHeight, and maxHeight to the specified value
   </summary>
      <param name="height">Height.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetMinSize(Value)">
      <summary>
   Sets the minWidth and minHeight to the specified value
   </summary>
      <param name="size">Size.</param>
      <returns>Container.</returns>
      <exception cref="T:System.Exception">size cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Container.SetMinSize(Value,Value)">
      <summary>
   Sets the minimum size.
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <returns>Container.</returns>
      <exception cref="T:System.Exception">width cannot be null.</exception>
      <exception cref="T:System.Exception">height cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Container.SetMinWidth(Value)">
      <summary>
   Sets the minimum width.
   </summary>
      <param name="minWidth">The minimum width.</param>
      <returns>Container.</returns>
      <exception cref="T:System.Exception">minWidth cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Container.SetMinHeight(Value)">
      <summary>
   Sets the minimum height.
   </summary>
      <param name="minHeight">The minimum height.</param>
      <returns>Container.</returns>
      <exception cref="T:System.Exception">minHeight cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Container.SetMinSize(System.Single)">
      <summary>
   Sets the minWidth and minHeight to the specified value
   </summary>
      <param name="size">Size.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetMinSize(System.Single,System.Single)">
      <summary>
   Sets the minWidth and minHeight to the specified values
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetMinWidth(System.Single)">
      <summary>
   Sets the minimum width.
   </summary>
      <param name="minWidth">The minimum width.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetMinHeight(System.Single)">
      <summary>
   Sets the minimum height.
   </summary>
      <param name="minHeight">The minimum height.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.PrefSize(Value)">
      <summary>
   Sets the prefWidth and prefHeight to the specified value.
   </summary>
      <param name="size">Size.</param>
      <returns>Container.</returns>
      <exception cref="T:System.Exception">size cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Container.PrefSize(Value,Value)">
      <summary>
   Sets the prefWidth and prefHeight to the specified values.
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <returns>Container.</returns>
      <exception cref="T:System.Exception">width cannot be null.</exception>
      <exception cref="T:System.Exception">height cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Container.SetPrefWidth(Value)">
      <summary>
   Sets the width of the preference.
   </summary>
      <param name="prefWidth">Width of the preference.</param>
      <returns>Container.</returns>
      <exception cref="T:System.Exception">prefWidth cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Container.SetPrefHeight(Value)">
      <summary>
   Sets the height of the preference.
   </summary>
      <param name="prefHeight">Height of the preference.</param>
      <returns>Container.</returns>
      <exception cref="T:System.Exception">prefHeight cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Container.SetPrefSize(System.Single,System.Single)">
      <summary>
   Sets the prefWidth and prefHeight to the specified value.
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetPrefSize(System.Single)">
      <summary>
   Sets the prefWidth and prefHeight to the specified values
   </summary>
      <param name="size">Size.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetPrefWidth(System.Single)">
      <summary>
   Sets the width of the preference.
   </summary>
      <param name="prefWidth">Width of the preference.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetPrefHeight(System.Single)">
      <summary>
   Sets the height of the preference.
   </summary>
      <param name="prefHeight">Height of the preference.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetMaxSize(Value)">
      <summary>
   Sets the maxWidth and maxHeight to the specified value.
   </summary>
      <param name="size">Size.</param>
      <returns>Container.</returns>
      <exception cref="T:System.Exception">size cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Container.SetMaxSize(Value,Value)">
      <summary>
   Sets the maxWidth and maxHeight to the specified values
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <returns>Container.</returns>
      <exception cref="T:System.Exception">width cannot be null.</exception>
      <exception cref="T:System.Exception">height cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Container.SetMaxWidth(Value)">
      <summary>
   Sets the maximum width.
   </summary>
      <param name="maxWidth">The maximum width.</param>
      <returns>Container.</returns>
      <exception cref="T:System.Exception">maxWidth cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Container.SetMaxHeight(Value)">
      <summary>
   Sets the maximum height.
   </summary>
      <param name="maxHeight">The maximum height.</param>
      <returns>Container.</returns>
      <exception cref="T:System.Exception">maxHeight cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Container.SetMaxSize(System.Single)">
      <summary>
   Sets the maxWidth and maxHeight to the specified value
   </summary>
      <param name="size">Size.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetMaxSize(System.Single,System.Single)">
      <summary>
   Sets the maxWidth and maxHeight to the specified values
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetMaxWidth(System.Single)">
      <summary>
   Sets the maximum width.
   </summary>
      <param name="maxWidth">The maximum width.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetMaxHeight(System.Single)">
      <summary>
   Sets the maximum height.
   </summary>
      <param name="maxHeight">The maximum height.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetPad(Value)">
      <summary>
   Sets the padTop, padLeft, padBottom, and padRight to the specified value.
   </summary>
      <param name="pad">Pad.</param>
      <returns>Container.</returns>
      <exception cref="T:System.Exception">pad cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Container.SetPad(Value,Value,Value,Value)">
      <summary>
   Sets the pad.
   </summary>
      <param name="top">The top.</param>
      <param name="left">The left.</param>
      <param name="bottom">The bottom.</param>
      <param name="right">The right.</param>
      <returns>Container.</returns>
      <exception cref="T:System.Exception">top cannot be null.</exception>
      <exception cref="T:System.Exception">left cannot be null.</exception>
      <exception cref="T:System.Exception">bottom cannot be null.</exception>
      <exception cref="T:System.Exception">right cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Container.SetPadTop(Value)">
      <summary>
   Sets the pad top.
   </summary>
      <param name="padTop">The pad top.</param>
      <returns>Container.</returns>
      <exception cref="T:System.Exception">padTop cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Container.SetPadLeft(Value)">
      <summary>
   Sets the pad left.
   </summary>
      <param name="padLeft">The pad left.</param>
      <returns>Container.</returns>
      <exception cref="T:System.Exception">padLeft cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Container.SetPadBottom(Value)">
      <summary>
   Sets the pad bottom.
   </summary>
      <param name="padBottom">The pad bottom.</param>
      <returns>Container.</returns>
      <exception cref="T:System.Exception">padBottom cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Container.SetPadRight(Value)">
      <summary>
   Sets the pad right.
   </summary>
      <param name="padRight">The pad right.</param>
      <returns>Container.</returns>
      <exception cref="T:System.Exception">padRight cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Container.SetPad(System.Single)">
      <summary>
   Sets the padTop, padLeft, padBottom, and padRight to the specified value
   </summary>
      <param name="pad">Pad.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetPad(System.Single,System.Single,System.Single,System.Single)">
      <summary>
   Sets the pad.
   </summary>
      <param name="top">The top.</param>
      <param name="left">The left.</param>
      <param name="bottom">The bottom.</param>
      <param name="right">The right.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetPadTop(System.Single)">
      <summary>
   Sets the pad top.
   </summary>
      <param name="padTop">The pad top.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetPadLeft(System.Single)">
      <summary>
   Sets the pad left.
   </summary>
      <param name="padLeft">The pad left.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetPadBottom(System.Single)">
      <summary>
   Sets the pad bottom.
   </summary>
      <param name="padBottom">The pad bottom.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetPadRight(System.Single)">
      <summary>
   Sets the pad right.
   </summary>
      <param name="padRight">The pad right.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetFill">
      <summary>
   Sets fillX and fillY to 1
   </summary>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetFillX">
      <summary>
   Sets fillX to 1
   </summary>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetFillY">
      <summary>
   Sets fillY to 1
   </summary>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetFill(System.Single,System.Single)">
      <summary>
   Sets the fill.
   </summary>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetFill(System.Boolean,System.Boolean)">
      <summary>
   Sets fillX and fillY to 1 if true, 0 if false
   </summary>
      <param name="x">If set to <c>true</c> x.</param>
      <param name="y">If set to <c>true</c> y.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetFill(System.Boolean)">
      <summary>
   Sets fillX and fillY to 1 if true, 0 if false
   </summary>
      <param name="fill">If set to <c>true</c> fill.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetAlign(Align)">
      <summary>
   Sets the alignment of the element within the container. Set to {@link Align#center}, {@link Align#top}, {@link Align#bottom},
   {@link Align#left}, {@link Align#right}, or any combination of those.
   </summary>
      <param name="align">Align.</param>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetAlignCenter">
      <summary>
   Sets the alignment of the element within the container to {@link Align#center}. This clears any other alignment.
   </summary>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetTop">
      <summary>
   Sets {@link Align#top} and clears {@link Align#bottom} for the alignment of the element within the container.
   </summary>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetLeft">
      <summary>
   Sets {@link Align#left} and clears {@link Align#right} for the alignment of the element within the container.
   </summary>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetBottom">
      <summary>
   Sets {@link Align#bottom} and clears {@link Align#top} for the alignment of the element within the container.
   </summary>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetRight">
      <summary>
   Sets {@link Align#right} and clears {@link Align#left} for the alignment of the element within the container.
   </summary>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetMinWidth">
      <summary>
   Gets the minimum width.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetMinHeightValue">
      <summary>
   Gets the minimum height value.
   </summary>
      <returns>Value.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetMinHeight">
      <summary>
   Gets the minimum height.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetPrefWidthValue">
      <summary>
   Gets the preference width value.
   </summary>
      <returns>Value.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetPrefWidth">
      <summary>
   Gets the width of the preference.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetPrefHeightValue">
      <summary>
   Gets the preference height value.
   </summary>
      <returns>Value.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetPrefHeight">
      <summary>
   Gets the height of the preference.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetMaxWidthValue">
      <summary>
   Gets the maximum width value.
   </summary>
      <returns>Value.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetMaxWidth">
      <summary>
   Gets the maximum width.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetMaxHeightValue">
      <summary>
   Gets the maximum height value.
   </summary>
      <returns>Value.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetMaxHeight">
      <summary>
   Gets the maximum height.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetPadTopValue">
      <summary>
   May be null if this value is not set
   </summary>
      <returns>The pad top value.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetPadTop">
      <summary>
   Gets the pad top.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetPadLeftValue">
      <summary>
   May be null if this value is not set
   </summary>
      <returns>The pad left value.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetPadLeft">
      <summary>
   Gets the pad left.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetPadBottomValue">
      <summary>
   May be null if this value is not set
   </summary>
      <returns>The pad bottom value.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetPadBottom">
      <summary>
   Gets the pad bottom.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetPadRightValue">
      <summary>
   May be null if this value is not set
   </summary>
      <returns>The pad right value.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetPadRight">
      <summary>
   Gets the pad right.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetPadX">
      <summary>
   Returns {@link #getPadLeft()} plus {@link #getPadRight()}.
   </summary>
      <returns>The pad x.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetPadY">
      <summary>
   Returns {@link #getPadTop()} plus {@link #getPadBottom()}
   </summary>
      <returns>The pad y.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetFillX">
      <summary>
   Gets the fill x.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetFillY">
      <summary>
   Gets the fill y.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Container.GetAlign">
      <summary>
   Gets the align.
   </summary>
      <returns>System.Int32.</returns>
    </member>
    <member name="M:Nez.UI.Container.SetRound(System.Boolean)">
      <summary>
   If true (the default), positions and sizes are rounded to integers
   </summary>
      <param name="round">If set to <c>true</c> round.</param>
    </member>
    <member name="M:Nez.UI.Container.SetClip(System.Boolean)">
      <summary>
   Causes the contents to be clipped if they exceed the container bounds. Enabling clipping will set
   {@link #setTransform(bool)} to true
   </summary>
      <param name="enabled">If set to <c>true</c> enabled.</param>
    </member>
    <member name="M:Nez.UI.Container.GetClip">
      <summary>
   Gets the clip.
   </summary>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.Container.Hit(Vector2)">
      <summary>
   Hits the specified point.
   </summary>
      <param name="point">The point.</param>
      <returns>Element.</returns>
    </member>
    <member name="M:Nez.UI.Container.DebugRender(Batcher)">
      <summary>
   Draws this element's debug lines
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="T:Nez.UI.HorizontalGroup">
      <summary>
   Class HorizontalGroup.
   Implements the <see cref="T:Nez.UI.Group" /></summary>
      <seealso cref="T:Nez.UI.Group" />
    </member>
    <member name="P:Nez.UI.HorizontalGroup.PreferredWidth">
      <summary>
   Gets the width of the preferred.
   </summary>
      <value>The width of the preferred.</value>
    </member>
    <member name="P:Nez.UI.HorizontalGroup.PreferredHeight">
      <summary>
   Gets the height of the preferred.
   </summary>
      <value>The height of the preferred.</value>
    </member>
    <member name="F:Nez.UI.HorizontalGroup._round">
      <summary>
   The round
   </summary>
    </member>
    <member name="F:Nez.UI.HorizontalGroup._align">
      <summary>
   The align
   </summary>
    </member>
    <member name="F:Nez.UI.HorizontalGroup._reverse">
      <summary>
   The reverse
   </summary>
    </member>
    <member name="F:Nez.UI.HorizontalGroup._spacing">
      <summary>
   The spacing
   </summary>
    </member>
    <member name="F:Nez.UI.HorizontalGroup._padTop">
      <summary>
   The pad top
   </summary>
    </member>
    <member name="F:Nez.UI.HorizontalGroup._fill">
      <summary>
   The fill
   </summary>
    </member>
    <member name="M:Nez.UI.HorizontalGroup.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.HorizontalGroup" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.HorizontalGroup.#ctor(System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.HorizontalGroup" /> class.
   </summary>
      <param name="spacing">The spacing.</param>
    </member>
    <member name="M:Nez.UI.HorizontalGroup.Invalidate">
      <summary>
   Invalidates this element's layout, causing {@link #layout()} to happen the next time {@link #validate()} is called. This
   method should be called when state changes in the element that requires a layout but does not change the minimum, preferred,
   maximum, or actual size of the element (meaning it does not affect the parent element's layout).
   </summary>
    </member>
    <member name="M:Nez.UI.HorizontalGroup.Layout">
      <summary>
   Computes and caches any information needed for drawing and, if this element has children, positions and sizes each child,
   calls {@link #invalidate()} any each child whose width or height has changed, and calls {@link #validate()} on each child.
   This method should almost never be called directly, instead {@link #validate()} should be used
   </summary>
    </member>
    <member name="M:Nez.UI.HorizontalGroup.SetAlignment(Align)">
      <summary>
   Sets the alignment of widgets within the vertical group. Set to {@link Align#center}, {@link Align#top},
   {@link Align#bottom}, {@link Align#left}, {@link Align#right}, or any combination of those
   </summary>
      <param name="align">Align.</param>
      <returns>HorizontalGroup.</returns>
    </member>
    <member name="M:Nez.UI.HorizontalGroup.SetReverse(System.Boolean)">
      <summary>
   If true, the children will be ordered from bottom to top rather than the default top to bottom.
   </summary>
      <param name="reverse">If set to <c>true</c> reverse.</param>
      <returns>HorizontalGroup.</returns>
    </member>
    <member name="M:Nez.UI.HorizontalGroup.SetSpacing(System.Single)">
      <summary>
   Sets the space between children
   </summary>
      <param name="spacing">Spacing.</param>
      <returns>HorizontalGroup.</returns>
    </member>
    <member name="M:Nez.UI.HorizontalGroup.SetPad(System.Single)">
      <summary>
   Sets the padTop, padLeft, padBottom, and padRight to the specified value
   </summary>
      <param name="pad">Pad.</param>
      <returns>HorizontalGroup.</returns>
    </member>
    <member name="M:Nez.UI.HorizontalGroup.SetPad(System.Single,System.Single,System.Single,System.Single)">
      <summary>
   Sets the pad.
   </summary>
      <param name="top">The top.</param>
      <param name="left">The left.</param>
      <param name="bottom">The bottom.</param>
      <param name="right">The right.</param>
      <returns>HorizontalGroup.</returns>
    </member>
    <member name="M:Nez.UI.HorizontalGroup.SetPadTop(System.Single)">
      <summary>
   Sets the pad top.
   </summary>
      <param name="padTop">The pad top.</param>
      <returns>HorizontalGroup.</returns>
    </member>
    <member name="M:Nez.UI.HorizontalGroup.SetPadLeft(System.Single)">
      <summary>
   Sets the pad left.
   </summary>
      <param name="padLeft">The pad left.</param>
      <returns>HorizontalGroup.</returns>
    </member>
    <member name="M:Nez.UI.HorizontalGroup.SetPadBottom(System.Single)">
      <summary>
   Sets the pad bottom.
   </summary>
      <param name="padBottom">The pad bottom.</param>
      <returns>HorizontalGroup.</returns>
    </member>
    <member name="M:Nez.UI.HorizontalGroup.SetPadRight(System.Single)">
      <summary>
   Sets the pad right.
   </summary>
      <param name="padRight">The pad right.</param>
      <returns>HorizontalGroup.</returns>
    </member>
    <member name="M:Nez.UI.HorizontalGroup.SetRound(System.Boolean)">
      <summary>
   If true (the default), positions and sizes are rounded to integers.
   </summary>
      <param name="round">If set to <c>true</c> round.</param>
      <returns>HorizontalGroup.</returns>
    </member>
    <member name="M:Nez.UI.HorizontalGroup.SetFill(System.Single)">
      <summary>
   fill 0 will use pref width
   </summary>
      <param name="fill">Fill.</param>
      <returns>HorizontalGroup.</returns>
    </member>
    <member name="T:Nez.UI.ScrollPane">
      <summary>
   A group that scrolls a child widget using scrollbars and/or mouse or touch dragging.
   The widget is sized to its preferred size.If the widget's preferred width or height is less than the size of this scroll pane,
   it is set to the size of this scroll pane. Scrollbars appear when the widget is larger than the scroll pane.
   The scroll pane's preferred size is that of the child widget. At this size, the child widget will not need to scroll, so
   scroll pane is typically sized by ignoring the preferred size in one or both directions.
   </summary>
    </member>
    <member name="T:Nez.UI.ScrollPaneStyle">
      <summary>
   Class ScrollPaneStyle.
   </summary>
    </member>
    <member name="M:Nez.UI.ScrollPane.#ctor(Element)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ScrollPane" /> class.
   </summary>
      <param name="widget">The widget.</param>
    </member>
    <member name="M:Nez.UI.ScrollPane.#ctor(Element,Skin)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ScrollPane" /> class.
   </summary>
      <param name="widget">The widget.</param>
      <param name="skin">The skin.</param>
    </member>
    <member name="M:Nez.UI.ScrollPane.#ctor(Element,Skin,System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ScrollPane" /> class.
   </summary>
      <param name="widget">The widget.</param>
      <param name="skin">The skin.</param>
      <param name="styleName">Name of the style.</param>
    </member>
    <member name="M:Nez.UI.ScrollPane.#ctor(Element,ScrollPaneStyle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ScrollPane" /> class.
   </summary>
      <param name="widget">The widget.</param>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.ScrollPane.Cancel">
      <summary>
   If currently scrolling by tracking a touch down, stop scrolling.
   </summary>
    </member>
    <member name="P:Nez.UI.ScrollPane.MinWidth">
      <summary>
   Gets the minimum width.
   </summary>
      <value>The minimum width.</value>
    </member>
    <member name="P:Nez.UI.ScrollPane.MinHeight">
      <summary>
   Gets the minimum height.
   </summary>
      <value>The minimum height.</value>
    </member>
    <member name="P:Nez.UI.ScrollPane.PreferredWidth">
      <summary>
   Gets the width of the preferred.
   </summary>
      <value>The width of the preferred.</value>
    </member>
    <member name="P:Nez.UI.ScrollPane.PreferredHeight">
      <summary>
   Gets the height of the preferred.
   </summary>
      <value>The height of the preferred.</value>
    </member>
    <member name="M:Nez.UI.ScrollPane.Layout">
      <summary>
   Computes and caches any information needed for drawing and, if this element has children, positions and sizes each child,
   calls {@link #invalidate()} any each child whose width or height has changed, and calls {@link #validate()} on each child.
   This method should almost never be called directly, instead {@link #validate()} should be used
   </summary>
    </member>
    <member name="M:Nez.UI.ScrollPane.SetStyle(ScrollPaneStyle)">
      <summary>
   Sets the style.
   </summary>
      <param name="style">The style.</param>
      <returns>ScrollPane.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.GetStyle">
      <summary>
   Returns the scroll pane's style. Modifying the returned style may not have an effect until {@link #setStyle(ScrollPaneStyle)} is called.
   </summary>
      <returns>The style.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.SetWidget(Element)">
      <summary>
   Sets the {@link Element} embedded in this scroll pane
   </summary>
      <param name="widget">Widget.</param>
      <returns>ScrollPane.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.GetWidget">
      <summary>
   Returns the Element embedded in this scroll pane, or null
   </summary>
      <returns>The widget.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.SetScrollSpeed(System.Single)">
      <summary>
   sets the scroll speed when the mouse wheel is used to scroll the ScrollPane
   </summary>
      <param name="scrollSpeed">Scroll speed.</param>
      <returns>ScrollPane.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.GetScrollSpeed">
      <summary>
   Returns the x scroll speed
   </summary>
      <returns>The scroll x.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.SetScrollX(System.Single)">
      <summary>
   sets x scroll amount
   </summary>
      <param name="pixelsX">Pixels x.</param>
      <returns>ScrollPane.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.GetScrollX">
      <summary>
   Returns the x scroll position in pixels, where 0 is the left of the scroll pane.
   </summary>
      <returns>The scroll x.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.SetScrollY(System.Single)">
      <summary>
   Called whenever the y scroll amount is changed
   </summary>
      <param name="pixelsY">Pixels y.</param>
      <returns>ScrollPane.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.GetScrollY">
      <summary>
   Returns the y scroll position in pixels, where 0 is the top of the scroll pane.
   </summary>
      <returns>The scroll y.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.SetUseNaturalScrolling(System.Boolean)">
      <summary>
   sets how the mouse wheel/trackpad operates. Natural scrolling moves the contents of a window the same direction as
   your fingers.
   </summary>
      <param name="useNaturalScrolling">Use natural scrolling.</param>
      <returns>ScrollPane.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.GetUseNaturalScrolling">
      <summary>
   Gets the use natural scrolling.
   </summary>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.UpdateVisualScroll">
      <summary>
   Sets the visual scroll amount equal to the scroll amount. This can be used when setting the scroll amount without animating.
   </summary>
      <returns>The visual scroll.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.GetVisualScrollX">
      <summary>
   Gets the visual scroll x.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.GetVisualScrollY">
      <summary>
   Gets the visual scroll y.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.GetVisualScrollPercentX">
      <summary>
   Gets the visual scroll percent x.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.GetVisualScrollPercentY">
      <summary>
   Gets the visual scroll percent y.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.GetScrollPercentX">
      <summary>
   Gets the scroll percent x.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.SetScrollPercentX(System.Single)">
      <summary>
   Sets the scroll percent x.
   </summary>
      <param name="percentX">The percent x.</param>
    </member>
    <member name="M:Nez.UI.ScrollPane.GetScrollPercentY">
      <summary>
   Gets the scroll percent y.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.SetScrollPercentY(System.Single)">
      <summary>
   Sets the scroll percent y.
   </summary>
      <param name="percentY">The percent y.</param>
    </member>
    <member name="M:Nez.UI.ScrollPane.GetMaxX">
      <summary>
   Returns the maximum scroll value in the x direction.
   </summary>
      <returns>The max x.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.GetMaxY">
      <summary>
   Returns the maximum scroll value in the y direction.
   </summary>
      <returns>The max y.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.GetScrollBarHeight">
      <summary>
   Gets the height of the scroll bar.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.GetScrollBarWidth">
      <summary>
   Gets the width of the scroll bar.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.GetScrollWidth">
      <summary>
   Returns the width of the scrolled viewport.
   </summary>
      <returns>The scroll width.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.GetScrollHeight">
      <summary>
   Returns the height of the scrolled viewport.
   </summary>
      <returns>The scroll height.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.IsScrollX">
      <summary>
   Returns true if the widget is larger than the scroll pane horizontally.
   </summary>
      <returns>The scroll x.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.IsScrollY">
      <summary>
   Returns true if the widget is larger than the scroll pane vertically.
   </summary>
      <returns>The scroll y.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.SetScrollingDisabled(System.Boolean,System.Boolean)">
      <summary>
   Disables scrolling in a direction. The widget will be sized to the FlickScrollPane in the disabled direction.
   </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
      <returns>ScrollPane.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.IsScrollingDisabledX">
      <summary>
   Determines whether [is scrolling disabled x].
   </summary>
      <returns>
        <c>true</c> if [is scrolling disabled x]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.IsScrollingDisabledY">
      <summary>
   Determines whether [is scrolling disabled y].
   </summary>
      <returns>
        <c>true</c> if [is scrolling disabled y]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.IsLeftEdge">
      <summary>
   Determines whether [is left edge].
   </summary>
      <returns>
        <c>true</c> if [is left edge]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.IsRightEdge">
      <summary>
   Determines whether [is right edge].
   </summary>
      <returns>
        <c>true</c> if [is right edge]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.IsTopEdge">
      <summary>
   Determines whether [is top edge].
   </summary>
      <returns>
        <c>true</c> if [is top edge]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.IsBottomEdge">
      <summary>
   Determines whether [is bottom edge].
   </summary>
      <returns>
        <c>true</c> if [is bottom edge]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.IsFlinging">
      <summary>
   Determines whether this instance is flinging.
   </summary>
      <returns>
        <c>true</c> if this instance is flinging; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.SetVelocityX(System.Single)">
      <summary>
   Sets the velocity x.
   </summary>
      <param name="velocityX">The velocity x.</param>
    </member>
    <member name="M:Nez.UI.ScrollPane.GetVelocityX">
      <summary>
   Gets the flick scroll x velocity
   </summary>
      <returns>The velocity x.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.SetVelocityY(System.Single)">
      <summary>
   Sets the velocity y.
   </summary>
      <param name="velocityY">The velocity y.</param>
      <returns>ScrollPane.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.GetVelocityY">
      <summary>
   Gets the flick scroll y velocity
   </summary>
      <returns>The velocity y.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.SetOverscroll(System.Boolean,System.Boolean)">
      <summary>
   For flick scroll, if true the widget can be scrolled slightly past its bounds and will animate back to its bounds
   when scrolling is stopped. Default is true.
   </summary>
      <param name="overscrollX">Overscroll x.</param>
      <param name="overscrollY">Overscroll y.</param>
      <returns>ScrollPane.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.SetupOverscroll(System.Single,System.Single,System.Single)">
      <summary>
   For flick scroll, sets the overscroll distance in pixels and the speed it returns to the widget's bounds in seconds.
   Default is 50, 30, 200.
   </summary>
      <param name="distance">Distance.</param>
      <param name="speedMin">Speed minimum.</param>
      <param name="speedMax">Speed max.</param>
      <returns>ScrollPane.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.SetForceScroll(System.Boolean,System.Boolean)">
      <summary>
   Forces enabling scrollbars (for non-flick scroll) and overscrolling (for flick scroll) in a direction, even if the
   contents do not exceed the bounds in that direction.
   </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
      <returns>The force scroll.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.IsForceScrollX">
      <summary>
   Determines whether [is force scroll x].
   </summary>
      <returns>
        <c>true</c> if [is force scroll x]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.IsForceScrollY">
      <summary>
   Determines whether [is force scroll y].
   </summary>
      <returns>
        <c>true</c> if [is force scroll y]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.SetFlingTime(System.Single)">
      <summary>
   For flick scroll, sets the amount of time in seconds that a fling will continue to scroll. Default is 1.
   </summary>
      <param name="flingTime">Fling time.</param>
      <returns>ScrollPane.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.SetClamp(System.Boolean)">
      <summary>
   For flick scroll, prevents scrolling out of the widget's bounds. Default is true.
   </summary>
      <param name="clamp">Clamp.</param>
      <returns>ScrollPane.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.SetScrollBarPositions(System.Boolean,System.Boolean)">
      <summary>
   Set the position of the vertical and horizontal scroll bars.
   </summary>
      <param name="bottom">Bottom.</param>
      <param name="right">Right.</param>
      <returns>ScrollPane.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.SetFadeScrollBars(System.Boolean)">
      <summary>
   When true the scrollbars don't reduce the scrollable size and fade out after some time of not being used.
   </summary>
      <param name="fadeScrollBars">Fade scroll bars.</param>
      <returns>ScrollPane.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.SetupFadeScrollBars(System.Single,System.Single)">
      <summary>
   Setups the fade scroll bars.
   </summary>
      <param name="fadeAlphaSeconds">The fade alpha seconds.</param>
      <param name="fadeDelaySeconds">The fade delay seconds.</param>
      <returns>ScrollPane.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.SetSmoothScrolling(System.Boolean)">
      <summary>
   Sets the smooth scrolling.
   </summary>
      <param name="smoothScrolling">if set to <c>true</c> [smooth scrolling].</param>
      <returns>ScrollPane.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.SetScrollbarsOnTop(System.Boolean)">
      <summary>
   When false (the default), the widget is clipped so it is not drawn under the scrollbars. When true, the widget is clipped
   to the entire scroll pane bounds and the scrollbars are drawn on top of the widget. If {@link #setFadeScrollBars(boolean)}
   is true, the scroll bars are always drawn on top.
   </summary>
      <param name="scrollbarsOnTop">Scrollbars on top.</param>
      <returns>ScrollPane.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.GetVariableSizeKnobs">
      <summary>
   Gets the variable size knobs.
   </summary>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.SetVariableSizeKnobs(System.Boolean)">
      <summary>
   If true, the scroll knobs are sized based on getMaxX() or getMaxY(). If false, the scroll knobs are sized
   based on Drawable#getMinWidth() or Drawable#getMinHeight(). Default is true.
   </summary>
      <param name="variableSizeKnobs">Variable size knobs.</param>
      <returns>ScrollPane.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.ScrollTo(System.Single,System.Single,System.Single,System.Single)">
      <summary>
   Sets the scroll offset so the specified rectangle is fully in view, if possible. Coordinates are in the scroll pane
   widget's coordinate system.
   </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <returns>The to.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.ScrollTo(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
      <summary>
   Sets the scroll offset so the specified rectangle is fully in view, and optionally centered vertically and/or horizontally,
   if possible. Coordinates are in the scroll pane widget's coordinate system.
   </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <param name="centerHorizontal">Center horizontal.</param>
      <param name="centerVertical">Center vertical.</param>
      <returns>The to.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.Hit(Vector2)">
      <summary>
   Hits the specified point.
   </summary>
      <param name="point">The point.</param>
      <returns>Element.</returns>
    </member>
    <member name="M:Nez.UI.ScrollPane.Draw(Batcher,System.Single)">
      <summary>
   If this method is overridden, the super method or {@link #validate()} should be called to ensure the widget is laid out.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="parentAlpha">Parent alpha.</param>
    </member>
    <member name="M:Nez.UI.ScrollPane.DebugRender(Batcher)">
      <summary>
   Draws this element's debug lines
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="M:Nez.UI.ScrollPane.Fling(System.Single,System.Single,System.Single)">
      <summary>
   Generate fling gesture
   </summary>
      <param name="flingTime">Fling time.</param>
      <param name="velocityX">Velocity x.</param>
      <param name="velocityY">Velocity y.</param>
    </member>
    <member name="F:Nez.UI.ScrollPaneStyle.Background">
      <summary>
   The background
   </summary>
    </member>
    <member name="F:Nez.UI.ScrollPaneStyle.HScroll">
      <summary>
   The h scroll
   </summary>
    </member>
    <member name="F:Nez.UI.ScrollPaneStyle.VScroll">
      <summary>
   The v scroll
   </summary>
    </member>
    <member name="M:Nez.UI.ScrollPaneStyle.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ScrollPaneStyle" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.ScrollPaneStyle.#ctor(IDrawable,IDrawable,IDrawable,IDrawable,IDrawable)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ScrollPaneStyle" /> class.
   </summary>
      <param name="background">The background.</param>
      <param name="hScroll">The h scroll.</param>
      <param name="hScrollKnob">The h scroll knob.</param>
      <param name="vScroll">The v scroll.</param>
      <param name="vScrollKnob">The v scroll knob.</param>
    </member>
    <member name="M:Nez.UI.ScrollPaneStyle.#ctor(ScrollPaneStyle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ScrollPaneStyle" /> class.
   </summary>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.ScrollPaneStyle.Clone">
      <summary>
   Clones this instance.
   </summary>
      <returns>ScrollPaneStyle.</returns>
    </member>
    <member name="T:Nez.UI.SplitPane">
      <summary>
   Class SplitPane.
   Implements the <see cref="T:Nez.UI.Group" />
   Implements the <see cref="T:Nez.UI.IInputListener" /></summary>
      <seealso cref="T:Nez.UI.Group" />
      <seealso cref="T:Nez.UI.IInputListener" />
    </member>
    <member name="T:Nez.UI.SplitPaneStyle">
      <summary>
   Class SplitPaneStyle.
   </summary>
    </member>
    <member name="P:Nez.UI.SplitPane.PreferredWidth">
      <summary>
   Gets the width of the preferred.
   </summary>
      <value>The width of the preferred.</value>
    </member>
    <member name="P:Nez.UI.SplitPane.PreferredHeight">
      <summary>
   Gets the height of the preferred.
   </summary>
      <value>The height of the preferred.</value>
    </member>
    <member name="M:Nez.UI.SplitPane.#ctor(Element,Element,SplitPaneStyle,System.Boolean)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.SplitPane" /> class.
   </summary>
      <param name="firstWidget">The first widget.</param>
      <param name="secondWidget">The second widget.</param>
      <param name="style">The style.</param>
      <param name="vertical">if set to <c>true</c> [vertical].</param>
    </member>
    <member name="M:Nez.UI.SplitPane.#ctor(Element,Element,IDrawable,System.Boolean)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.SplitPane" /> class.
   </summary>
      <param name="firstWidget">The first widget.</param>
      <param name="secondWidget">The second widget.</param>
      <param name="handle">The handle.</param>
      <param name="vertical">if set to <c>true</c> [vertical].</param>
    </member>
    <member name="M:Nez.UI.SplitPane.#ctor(SplitPaneStyle,System.Boolean)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.SplitPane" /> class.
   </summary>
      <param name="style">The style.</param>
      <param name="vertical">if set to <c>true</c> [vertical].</param>
    </member>
    <member name="M:Nez.UI.SplitPane.Layout">
      <summary>
   Computes and caches any information needed for drawing and, if this element has children, positions and sizes each child,
   calls {@link #invalidate()} any each child whose width or height has changed, and calls {@link #validate()} on each child.
   This method should almost never be called directly, instead {@link #validate()} should be used
   </summary>
    </member>
    <member name="M:Nez.UI.SplitPane.Draw(Batcher,System.Single)">
      <summary>
   If this method is overridden, the super method or {@link #validate()} should be called to ensure the widget is laid out.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="parentAlpha">Parent alpha.</param>
    </member>
    <member name="M:Nez.UI.SplitPane.SetStyle(SplitPaneStyle)">
      <summary>
   Sets the style.
   </summary>
      <param name="style">The style.</param>
      <returns>SplitPane.</returns>
    </member>
    <member name="M:Nez.UI.SplitPane.GetStyle">
      <summary>
   Gets the style.
   </summary>
      <returns>SplitPaneStyle.</returns>
    </member>
    <member name="M:Nez.UI.SplitPane.SetHandle(IDrawable)">
      <summary>
   Sets the handle.
   </summary>
      <param name="handle">The handle.</param>
      <returns>SplitPane.</returns>
    </member>
    <member name="M:Nez.UI.SplitPane.SetFirstWidget(Element)">
      <summary>
   Sets the first widget.
   </summary>
      <param name="firstWidget">The first widget.</param>
      <returns>SplitPane.</returns>
    </member>
    <member name="M:Nez.UI.SplitPane.SetSecondWidget(Element)">
      <summary>
   Sets the second widget.
   </summary>
      <param name="secondWidget">The second widget.</param>
      <returns>SplitPane.</returns>
    </member>
    <member name="M:Nez.UI.SplitPane.SetSplitAmount(System.Single)">
      <summary>
   The split amount between the min and max amount
   </summary>
      <param name="amount">Amount.</param>
      <returns>SplitPane.</returns>
    </member>
    <member name="M:Nez.UI.SplitPane.SetMinSplitAmount(System.Single)">
      <summary>
   Sets the minimum split amount.
   </summary>
      <param name="amount">The amount.</param>
      <returns>SplitPane.</returns>
    </member>
    <member name="M:Nez.UI.SplitPane.SetMaxSplitAmount(System.Single)">
      <summary>
   Sets the maximum split amount.
   </summary>
      <param name="amount">The amount.</param>
      <returns>SplitPane.</returns>
    </member>
    <member name="F:Nez.UI.SplitPaneStyle.Handle">
      <summary>
   The handle
   </summary>
    </member>
    <member name="M:Nez.UI.SplitPaneStyle.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.SplitPaneStyle" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.SplitPaneStyle.#ctor(IDrawable)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.SplitPaneStyle" /> class.
   </summary>
      <param name="handle">The handle.</param>
    </member>
    <member name="M:Nez.UI.SplitPaneStyle.Clone">
      <summary>
   Clones this instance.
   </summary>
      <returns>SplitPaneStyle.</returns>
    </member>
    <member name="T:Nez.UI.Stack">
      <summary>
   A stack is a container that sizes its children to its size and positions them at 0,0 on top of each other.
   The preferred and min size of the stack is the largest preferred and min size of any children. The max size of the stack is the
   smallest max size of any children.
   </summary>
    </member>
    <member name="P:Nez.UI.Stack.MinWidth">
      <summary>
   Gets the minimum width.
   </summary>
      <value>The minimum width.</value>
    </member>
    <member name="P:Nez.UI.Stack.MinHeight">
      <summary>
   Gets the minimum height.
   </summary>
      <value>The minimum height.</value>
    </member>
    <member name="P:Nez.UI.Stack.PreferredWidth">
      <summary>
   Gets the width of the preferred.
   </summary>
      <value>The width of the preferred.</value>
    </member>
    <member name="P:Nez.UI.Stack.PreferredHeight">
      <summary>
   Gets the height of the preferred.
   </summary>
      <value>The height of the preferred.</value>
    </member>
    <member name="P:Nez.UI.Stack.MaxWidth">
      <summary>
   Zero indicates no max width
   </summary>
      <value>The width of the max.</value>
    </member>
    <member name="P:Nez.UI.Stack.MaxHeight">
      <summary>
   Zero indicates no max height
   </summary>
      <value>The height of the max.</value>
    </member>
    <member name="M:Nez.UI.Stack.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Stack" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.Stack.Invalidate">
      <summary>
   Invalidates this element's layout, causing {@link #layout()} to happen the next time {@link #validate()} is called. This
   method should be called when state changes in the element that requires a layout but does not change the minimum, preferred,
   maximum, or actual size of the element (meaning it does not affect the parent element's layout).
   </summary>
    </member>
    <member name="M:Nez.UI.Stack.Add``1(``0)">
      <summary>
   Adds the specified element.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="element">The element.</param>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.UI.Stack.Layout">
      <summary>
   Computes and caches any information needed for drawing and, if this element has children, positions and sizes each child,
   calls {@link #invalidate()} any each child whose width or height has changed, and calls {@link #validate()} on each child.
   This method should almost never be called directly, instead {@link #validate()} should be used
   </summary>
    </member>
    <member name="T:Nez.UI.Table">
      <summary>
   A group that sizes and positions children using table constraints. By default, {@link #getTouchable()} is
   {@link Touchable#childrenOnly}.
   The preferred and minimum sizes are that of the chdebugn when laid out in columns and rows.
   </summary>
    </member>
    <member name="T:Nez.UI.Table.TableDebug">
      <summary>
   Enum TableDebug
   </summary>
    </member>
    <member name="T:Nez.UI.Table.BackgroundTopValue">
      <summary>
   Value that is the top padding of the table's background
   </summary>
    </member>
    <member name="T:Nez.UI.Table.BackgroundLeftValue">
      <summary>
   Value that is the left padding of the table's background
   </summary>
    </member>
    <member name="T:Nez.UI.Table.BackgroundBottomValue">
      <summary>
   Value that is the bottom padding of the table's background
   </summary>
    </member>
    <member name="T:Nez.UI.Table.BackgroundRightValue">
      <summary>
   Value that is the right padding of the table's background
   </summary>
    </member>
    <member name="F:Nez.UI.Table.TableDebug.None">
      <summary>
   The none
   </summary>
    </member>
    <member name="F:Nez.UI.Table.TableDebug.All">
      <summary>
   All
   </summary>
    </member>
    <member name="F:Nez.UI.Table.TableDebug.Table">
      <summary>
   The table
   </summary>
    </member>
    <member name="F:Nez.UI.Table.TableDebug.Cell">
      <summary>
   The cell
   </summary>
    </member>
    <member name="F:Nez.UI.Table.TableDebug.Element">
      <summary>
   The element
   </summary>
    </member>
    <member name="F:Nez.UI.Table.DebugTableColor">
      <summary>
   The debug table color
   </summary>
    </member>
    <member name="F:Nez.UI.Table.DebugCellColor">
      <summary>
   The debug cell color
   </summary>
    </member>
    <member name="F:Nez.UI.Table.DebugElementColor">
      <summary>
   The debug element color
   </summary>
    </member>
    <member name="P:Nez.UI.Table.MinWidth">
      <summary>
   Gets the minimum width.
   </summary>
      <value>The minimum width.</value>
    </member>
    <member name="P:Nez.UI.Table.MinHeight">
      <summary>
   Gets the minimum height.
   </summary>
      <value>The minimum height.</value>
    </member>
    <member name="P:Nez.UI.Table.PreferredWidth">
      <summary>
   Gets the width of the preferred.
   </summary>
      <value>The width of the preferred.</value>
    </member>
    <member name="P:Nez.UI.Table.PreferredHeight">
      <summary>
   Gets the height of the preferred.
   </summary>
      <value>The height of the preferred.</value>
    </member>
    <member name="F:Nez.UI.Table.Clip">
      <summary>
   The clip
   </summary>
    </member>
    <member name="M:Nez.UI.Table.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Table" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.Table.Draw(Batcher,System.Single)">
      <summary>
   If this method is overridden, the super method or {@link #validate()} should be called to ensure the widget is laid out.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="parentAlpha">Parent alpha.</param>
    </member>
    <member name="M:Nez.UI.Table.GetBackground">
      <summary>
   Gets the background.
   </summary>
      <returns>IDrawable.</returns>
    </member>
    <member name="M:Nez.UI.Table.Hit(Vector2)">
      <summary>
   Hits the specified point.
   </summary>
      <param name="point">The point.</param>
      <returns>Element.</returns>
    </member>
    <member name="M:Nez.UI.Table.Invalidate">
      <summary>
   Invalidates this element's layout, causing {@link #layout()} to happen the next time {@link #validate()} is called. This
   method should be called when state changes in the element that requires a layout but does not change the minimum, preferred,
   maximum, or actual size of the element (meaning it does not affect the parent element's layout).
   </summary>
    </member>
    <member name="M:Nez.UI.Table.Add(Element)">
      <summary>
   Adds a new cell to the table with the specified element.
   </summary>
      <param name="element">element.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Table.Add(System.String)">
      <summary>
   Adds a new cell with a label
   </summary>
      <param name="text">Text.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Table.Add">
      <summary>
   Adds a cell without an element
   </summary>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Table.Stack(Element[])">
      <summary>
   Adds a new cell to the table with the specified elements in a {@link Stack}.
   </summary>
      <param name="elements">Elements.</param>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Table.RemoveElement(Element)">
      <summary>
   Removes the element.
   </summary>
      <param name="element">The element.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.Table.ClearChildren">
      <summary>
   Removes all elements and cells from the table
   </summary>
    </member>
    <member name="M:Nez.UI.Table.Reset">
      <summary>
   Removes all elements and cells from the table (same as {@link #clear()}) and additionally resets all table properties and
   cell, column, and row defaults.
   </summary>
    </member>
    <member name="M:Nez.UI.Table.Row">
      <summary>
   Indicates that subsequent cells should be added to a new row and returns the cell values that will be used as the defaults
   for all cells in the new row.
   </summary>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Table.GetColumnDefaults(System.Int32)">
      <summary>
   Gets the cell values that will be used as the defaults for all cells in the specified column. Columns are indexed starting at 0
   </summary>
      <param name="column">Column.</param>
      <returns>The column defaults.</returns>
    </member>
    <member name="M:Nez.UI.Table.Defaults">
      <summary>
   The cell values that will be used as the defaults for all cells.
   </summary>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.Table.SetFillParent(System.Boolean)">
      <summary>
   Sets the fill parent.
   </summary>
      <param name="fillParent">if set to <c>true</c> [fill parent].</param>
      <returns>Table.</returns>
    </member>
    <member name="M:Nez.UI.Table.SetBackground(IDrawable)">
      <summary>
   background may be null to clear the background.
   </summary>
      <param name="background">Background.</param>
      <returns>Table.</returns>
    </member>
    <member name="M:Nez.UI.Table.Round(System.Boolean)">
      <summary>
   If true (the default), positions and sizes are rounded to integers.
   </summary>
      <param name="round">If set to <c>true</c> round.</param>
      <returns>Table.</returns>
    </member>
    <member name="M:Nez.UI.Table.Pad(Value)">
      <summary>
   Sets the padTop, padLeft, padBottom, and padRight around the table to the specified value.
   </summary>
      <param name="pad">Pad.</param>
      <returns>Table.</returns>
      <exception cref="T:System.Exception">pad cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Table.Pad(Value,Value,Value,Value)">
      <summary>
   Pads the specified top.
   </summary>
      <param name="top">The top.</param>
      <param name="left">The left.</param>
      <param name="bottom">The bottom.</param>
      <param name="right">The right.</param>
      <returns>Table.</returns>
      <exception cref="T:System.Exception">top cannot be null.</exception>
      <exception cref="T:System.Exception">left cannot be null.</exception>
      <exception cref="T:System.Exception">bottom cannot be null.</exception>
      <exception cref="T:System.Exception">right cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Table.PadTop(Value)">
      <summary>
   Padding at the top edge of the table.
   </summary>
      <param name="padTop">Pad top.</param>
      <returns>Table.</returns>
      <exception cref="T:System.Exception">padTop cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Table.PadLeft(Value)">
      <summary>
   Padding at the left edge of the table.
   </summary>
      <param name="padLeft">Pad left.</param>
      <returns>Table.</returns>
      <exception cref="T:System.Exception">padLeft cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Table.PadBottom(Value)">
      <summary>
   Padding at the bottom edge of the table.
   </summary>
      <param name="padBottom">Pad bottom.</param>
      <returns>Table.</returns>
      <exception cref="T:System.Exception">padBottom cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Table.PadRight(Value)">
      <summary>
   Padding at the right edge of the table.
   </summary>
      <param name="padRight">Pad right.</param>
      <returns>Table.</returns>
      <exception cref="T:System.Exception">padRight cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Table.Pad(System.Single)">
      <summary>
   Sets the padTop, padLeft, padBottom, and padRight around the table to the specified value.
   </summary>
      <param name="pad">Pad.</param>
      <returns>Table.</returns>
    </member>
    <member name="M:Nez.UI.Table.Pad(System.Single,System.Single,System.Single,System.Single)">
      <summary>
   Pads the specified top.
   </summary>
      <param name="top">The top.</param>
      <param name="left">The left.</param>
      <param name="bottom">The bottom.</param>
      <param name="right">The right.</param>
      <returns>Table.</returns>
    </member>
    <member name="M:Nez.UI.Table.PadTop(System.Single)">
      <summary>
   Padding at the top edge of the table.
   </summary>
      <param name="padTop">Pad top.</param>
      <returns>Table.</returns>
    </member>
    <member name="M:Nez.UI.Table.PadLeft(System.Single)">
      <summary>
   Padding at the left edge of the table.
   </summary>
      <param name="padLeft">Pad left.</param>
      <returns>Table.</returns>
    </member>
    <member name="M:Nez.UI.Table.PadBottom(System.Single)">
      <summary>
   Padding at the bottom edge of the table.
   </summary>
      <param name="padBottom">Pad bottom.</param>
      <returns>Table.</returns>
    </member>
    <member name="M:Nez.UI.Table.PadRight(System.Single)">
      <summary>
   Padding at the right edge of the table.
   </summary>
      <param name="padRight">Pad right.</param>
      <returns>Table.</returns>
    </member>
    <member name="M:Nez.UI.Table.Align(System.Int32)">
      <summary>
   Alignment of the logical table within the table element. Set to {@link Align#center}, {@link Align#top}, {@link Align#bottom}
   {@link Align#left}, {@link Align#right}, or any combination of those.
   </summary>
      <param name="align">Align.</param>
      <returns>Table.</returns>
    </member>
    <member name="M:Nez.UI.Table.Center">
      <summary>
   Sets the alignment of the logical table within the table element to {@link Align#center}. This clears any other alignment.
   </summary>
      <returns>Table.</returns>
    </member>
    <member name="M:Nez.UI.Table.Top">
      <summary>
   Adds {@link Align#top} and clears {@link Align#bottom} for the alignment of the logical table within the table element.
   </summary>
      <returns>Table.</returns>
    </member>
    <member name="M:Nez.UI.Table.Left">
      <summary>
   Adds {@link Align#left} and clears {@link Align#right} for the alignment of the logical table within the table element.
   </summary>
      <returns>Table.</returns>
    </member>
    <member name="M:Nez.UI.Table.Bottom">
      <summary>
   Adds {@link Align#bottom} and clears {@link Align#top} for the alignment of the logical table within the table element.
   </summary>
      <returns>Table.</returns>
    </member>
    <member name="M:Nez.UI.Table.Right">
      <summary>
   Adds {@link Align#right} and clears {@link Align#left} for the alignment of the logical table within the table element.
   </summary>
      <returns>Table.</returns>
    </member>
    <member name="M:Nez.UI.Table.SetDebug(System.Boolean)">
      <summary>
   enables/disables all debug lines (table, cell, and widget)
   </summary>
      <param name="enabled">If set to <c>true</c> enabled.</param>
    </member>
    <member name="M:Nez.UI.Table.DebugAll">
      <summary>
   Turn on all debug lines (table, cell, and element)
   </summary>
      <returns>The all.</returns>
    </member>
    <member name="M:Nez.UI.Table.DebugTable">
      <summary>
   Turns on table debug lines.
   </summary>
      <returns>The table.</returns>
    </member>
    <member name="M:Nez.UI.Table.DebugCell">
      <summary>
   Turns on cell debug lines.
   </summary>
      <returns>Table.</returns>
    </member>
    <member name="M:Nez.UI.Table.DebugElement">
      <summary>
   Turns on element debug lines.
   </summary>
      <returns>Table.</returns>
    </member>
    <member name="M:Nez.UI.Table.SetTableDebug(TableDebug)">
      <summary>
   Turns debug lines on or off.
   </summary>
      <param name="tableDebug">Table debug.</param>
      <returns>Table.</returns>
    </member>
    <member name="M:Nez.UI.Table.GetRowDefaults">
      <summary>
   gets the current Cell defaults. This is the same value returned by a call to row()
   </summary>
      <returns>The row defaults.</returns>
    </member>
    <member name="M:Nez.UI.Table.GetCell(Element)">
      <summary>
   Returns the cell for the specified element in this table, or null.
   </summary>
      <param name="element">element.</param>
      <returns>The cell.</returns>
    </member>
    <member name="M:Nez.UI.Table.GetCells">
      <summary>
   returns all the Cells in the table
   </summary>
      <returns>The cells.</returns>
    </member>
    <member name="M:Nez.UI.Table.GetPadTopValue">
      <summary>
   Gets the pad top value.
   </summary>
      <returns>Value.</returns>
    </member>
    <member name="M:Nez.UI.Table.GetPadTop">
      <summary>
   Gets the pad top.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Table.GetPadLeftValue">
      <summary>
   Gets the pad left value.
   </summary>
      <returns>Value.</returns>
    </member>
    <member name="M:Nez.UI.Table.GetPadLeft">
      <summary>
   Gets the pad left.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Table.GetPadBottomValue">
      <summary>
   Gets the pad bottom value.
   </summary>
      <returns>Value.</returns>
    </member>
    <member name="M:Nez.UI.Table.GetPadBottom">
      <summary>
   Gets the pad bottom.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Table.GetPadRightValue">
      <summary>
   Gets the pad right value.
   </summary>
      <returns>Value.</returns>
    </member>
    <member name="M:Nez.UI.Table.GetPadRight">
      <summary>
   Gets the pad right.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Table.GetPadX">
      <summary>
   Returns {@link #getPadLeft()} plus {@link #getPadRight()}.
   </summary>
      <returns>The pad x.</returns>
    </member>
    <member name="M:Nez.UI.Table.GetPadY">
      <summary>
   Returns {@link #getPadTop()} plus {@link #getPadBottom()}.
   </summary>
      <returns>The pad y.</returns>
    </member>
    <member name="M:Nez.UI.Table.GetAlign">
      <summary>
   Gets the align.
   </summary>
      <returns>System.Int32.</returns>
    </member>
    <member name="M:Nez.UI.Table.GetRows">
      <summary>
   Gets the rows.
   </summary>
      <returns>System.Int32.</returns>
    </member>
    <member name="M:Nez.UI.Table.GetColumns">
      <summary>
   Gets the columns.
   </summary>
      <returns>System.Int32.</returns>
    </member>
    <member name="M:Nez.UI.Table.GetRowHeight(System.Int32)">
      <summary>
   Returns the height of the specified row.
   </summary>
      <param name="rowIndex">Row index.</param>
      <returns>The row height.</returns>
    </member>
    <member name="M:Nez.UI.Table.GetColumnWidth(System.Int32)">
      <summary>
   Returns the width of the specified column.
   </summary>
      <param name="columnIndex">Column index.</param>
      <returns>The column width.</returns>
    </member>
    <member name="M:Nez.UI.Table.Layout">
      <summary>
   Computes and caches any information needed for drawing and, if this element has children, positions and sizes each child,
   calls {@link #invalidate()} any each child whose width or height has changed, and calls {@link #validate()} on each child.
   This method should almost never be called directly, instead {@link #validate()} should be used
   </summary>
    </member>
    <member name="M:Nez.UI.Table.DebugRender(Batcher)">
      <summary>
   Draws this element's debug lines
   </summary>
      <param name="batcher">Batcher.</param>
    </member>
    <member name="F:Nez.UI.Table.BackgroundTop">
      <summary>
   The background top
   </summary>
    </member>
    <member name="M:Nez.UI.Table.BackgroundTopValue.Get(Element)">
      <summary>
   context May be null
   </summary>
      <param name="context">Context.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="F:Nez.UI.Table.BackgroundLeft">
      <summary>
   The background left
   </summary>
    </member>
    <member name="M:Nez.UI.Table.BackgroundLeftValue.Get(Element)">
      <summary>
   context May be null
   </summary>
      <param name="context">Context.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="F:Nez.UI.Table.BackgroundBottom">
      <summary>
   The background bottom
   </summary>
    </member>
    <member name="M:Nez.UI.Table.BackgroundBottomValue.Get(Element)">
      <summary>
   context May be null
   </summary>
      <param name="context">Context.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="F:Nez.UI.Table.BackgroundRight">
      <summary>
   The background right
   </summary>
    </member>
    <member name="M:Nez.UI.Table.BackgroundRightValue.Get(Element)">
      <summary>
   context May be null
   </summary>
      <param name="context">Context.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="T:Nez.UI.TabPane">
      <summary>
   Class TabPane.
   Implements the <see cref="T:Nez.UI.Table" /></summary>
      <seealso cref="T:Nez.UI.Table" />
    </member>
    <member name="T:Nez.UI.TabWindowStyle">
      <summary>
   Class TabWindowStyle.
   </summary>
    </member>
    <member name="T:Nez.UI.Tab">
      <summary>
   Class Tab.
   Implements the <see cref="T:Nez.UI.Table" /></summary>
      <seealso cref="T:Nez.UI.Table" />
    </member>
    <member name="T:Nez.UI.TabStyle">
      <summary>
   Class TabStyle.
   </summary>
    </member>
    <member name="T:Nez.UI.TabButton">
      <summary>
   Class TabButton.
   Implements the <see cref="T:Nez.UI.Table" />
   Implements the <see cref="T:Nez.UI.IInputListener" /></summary>
      <seealso cref="T:Nez.UI.Table" />
      <seealso cref="T:Nez.UI.IInputListener" />
    </member>
    <member name="T:Nez.UI.TabButton.TabButtonState">
      <summary>
   Enum TabButtonState
   </summary>
    </member>
    <member name="T:Nez.UI.TabButtonStyle">
      <summary>
   Class TabButtonStyle.
   </summary>
    </member>
    <member name="F:Nez.UI.TabPane.CurrentTab">
      <summary>
   The current tab
   </summary>
    </member>
    <member name="F:Nez.UI.TabPane.Tabs">
      <summary>
   The tabs
   </summary>
    </member>
    <member name="F:Nez.UI.TabPane.TabButtons">
      <summary>
   The tab buttons
   </summary>
    </member>
    <member name="M:Nez.UI.TabPane.#ctor(TabWindowStyle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.TabPane" /> class.
   </summary>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.TabPane.AddTab(Tab)">
      <summary>
   Adds the tab.
   </summary>
      <param name="tab">The tab.</param>
    </member>
    <member name="M:Nez.UI.TabPane.SetActiveTab(System.Int32)">
      <summary>
   Sets the active tab.
   </summary>
      <param name="index">The index.</param>
    </member>
    <member name="F:Nez.UI.TabWindowStyle.Background">
      <summary>
   The background
   </summary>
    </member>
    <member name="F:Nez.UI.TabWindowStyle.TabButtonStyle">
      <summary>
   The tab button style
   </summary>
    </member>
    <member name="F:Nez.UI.Tab.TabName">
      <summary>
   The tab name
   </summary>
    </member>
    <member name="M:Nez.UI.Tab.#ctor(System.String,TabStyle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Tab" /> class.
   </summary>
      <param name="name">The name.</param>
      <param name="style">The style.</param>
    </member>
    <member name="F:Nez.UI.TabStyle.Background">
      <summary>
   The background
   </summary>
    </member>
    <member name="F:Nez.UI.TabButton.TabButtonState.Inactive">
      <summary>
   The inactive
   </summary>
    </member>
    <member name="F:Nez.UI.TabButton.TabButtonState.Active">
      <summary>
   The active
   </summary>
    </member>
    <member name="F:Nez.UI.TabButton.TabButtonState.Locked">
      <summary>
   The locked
   </summary>
    </member>
    <member name="F:Nez.UI.TabButton.OnClick">
      <summary>
   The on click
   </summary>
    </member>
    <member name="M:Nez.UI.TabButton.#ctor(Tab,TabButtonStyle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.TabButton" /> class.
   </summary>
      <param name="tab">The tab.</param>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.TabButton.GetTabeName">
      <summary>
   Gets the name of the tabe.
   </summary>
      <returns>System.String.</returns>
    </member>
    <member name="M:Nez.UI.TabButton.GetTab">
      <summary>
   Gets the tab.
   </summary>
      <returns>Tab.</returns>
    </member>
    <member name="M:Nez.UI.TabButton.IsSwitchedOn">
      <summary>
   Determines whether [is switched on].
   </summary>
      <returns>
        <c>true</c> if [is switched on]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.TabButton.Toggle">
      <summary>
   Toggles this instance.
   </summary>
    </member>
    <member name="M:Nez.UI.TabButton.ToggleOff">
      <summary>
   Toggles the off.
   </summary>
    </member>
    <member name="M:Nez.UI.TabButton.ToggleOn">
      <summary>
   Toggles the on.
   </summary>
    </member>
    <member name="M:Nez.UI.TabButton.ToggleLock">
      <summary>
   Toggles the lock.
   </summary>
    </member>
    <member name="M:Nez.UI.TabButton.Unlock">
      <summary>
   Unlocks this instance.
   </summary>
    </member>
    <member name="F:Nez.UI.TabButtonStyle.Active">
      <summary>
   The active
   </summary>
    </member>
    <member name="F:Nez.UI.TabButtonStyle.Inactive">
      <summary>
   The inactive
   </summary>
    </member>
    <member name="F:Nez.UI.TabButtonStyle.Locked">
      <summary>
   The locked
   </summary>
    </member>
    <member name="F:Nez.UI.TabButtonStyle.Hover">
      <summary>
   The hover
   </summary>
    </member>
    <member name="F:Nez.UI.TabButtonStyle.PaddingTop">
      <summary>
   The padding top
   </summary>
    </member>
    <member name="F:Nez.UI.TabButtonStyle.LabelStyle">
      <summary>
   The label style
   </summary>
    </member>
    <member name="T:Nez.UI.Containers.Tree">
      <summary>
   Class Tree.
   Implements the <see cref="T:Nez.UI.Group" />
   Implements the <see cref="T:Nez.UI.IInputListener" /></summary>
      <seealso cref="T:Nez.UI.Group" />
      <seealso cref="T:Nez.UI.IInputListener" />
    </member>
    <member name="T:Nez.UI.Containers.TreeStyle">
      <summary>
   Class TreeStyle.
   </summary>
    </member>
    <member name="T:Nez.UI.Containers.Node">
      <summary>
   Class Node.
   </summary>
    </member>
    <member name="P:Nez.UI.Containers.Tree.PreferredWidth">
      <summary>
   Gets the width of the preferred.
   </summary>
      <value>The width of the preferred.</value>
    </member>
    <member name="P:Nez.UI.Containers.Tree.PreferredHeight">
      <summary>
   Gets the height of the preferred.
   </summary>
      <value>The height of the preferred.</value>
    </member>
    <member name="M:Nez.UI.Containers.Tree.#ctor(TreeStyle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Containers.Tree" /> class.
   </summary>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.Containers.Tree.SetStyle(TreeStyle)">
      <summary>
   Sets the style.
   </summary>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.Containers.Tree.Add(Node)">
      <summary>
   Adds the specified node.
   </summary>
      <param name="node">The node.</param>
    </member>
    <member name="M:Nez.UI.Containers.Tree.Insert(System.Int32,Node)">
      <summary>
   Inserts the specified index.
   </summary>
      <param name="index">The index.</param>
      <param name="node">The node.</param>
    </member>
    <member name="M:Nez.UI.Containers.Tree.Remove(Node)">
      <summary>
   Removes the specified node.
   </summary>
      <param name="node">The node.</param>
    </member>
    <member name="M:Nez.UI.Containers.Tree.ClearChildren">
      <summary>
   Removes all elements from this group
   </summary>
    </member>
    <member name="M:Nez.UI.Containers.Tree.GetNodes">
      <summary>
   Gets the nodes.
   </summary>
      <returns>List&lt;Node&gt;.</returns>
    </member>
    <member name="M:Nez.UI.Containers.Tree.Invalidate">
      <summary>
   Invalidates this element's layout, causing {@link #layout()} to happen the next time {@link #validate()} is called. This
   method should be called when state changes in the element that requires a layout but does not change the minimum, preferred,
   maximum, or actual size of the element (meaning it does not affect the parent element's layout).
   </summary>
    </member>
    <member name="M:Nez.UI.Containers.Tree.Layout">
      <summary>
   Computes and caches any information needed for drawing and, if this element has children, positions and sizes each child,
   calls {@link #invalidate()} any each child whose width or height has changed, and calls {@link #validate()} on each child.
   This method should almost never be called directly, instead {@link #validate()} should be used
   </summary>
    </member>
    <member name="M:Nez.UI.Containers.Tree.Draw(Batcher,System.Single)">
      <summary>
   If this method is overridden, the super method or {@link #validate()} should be called to ensure the widget is laid out.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="parentAlpha">Parent alpha.</param>
    </member>
    <member name="M:Nez.UI.Containers.Tree.GetNodeAt(System.Single)">
      <summary>
   Gets the node at.
   </summary>
      <param name="y">The y.</param>
      <returns>Node.</returns>
    </member>
    <member name="M:Nez.UI.Containers.Tree.GetSelection">
      <summary>
   Gets the selection.
   </summary>
      <returns>Selection&lt;Node&gt;.</returns>
    </member>
    <member name="M:Nez.UI.Containers.Tree.GetStyle">
      <summary>
   Gets the style.
   </summary>
      <returns>TreeStyle.</returns>
    </member>
    <member name="M:Nez.UI.Containers.Tree.GetRootNodes">
      <summary>
   Gets the root nodes.
   </summary>
      <returns>List&lt;Node&gt;.</returns>
    </member>
    <member name="M:Nez.UI.Containers.Tree.GetOverNode">
      <summary>
   Gets the over node.
   </summary>
      <returns>Node.</returns>
    </member>
    <member name="M:Nez.UI.Containers.Tree.GetOverObject">
      <summary>
   Gets the over object.
   </summary>
      <returns>System.Object.</returns>
    </member>
    <member name="M:Nez.UI.Containers.Tree.SetOverNode(Node)">
      <summary>
   Sets the over node.
   </summary>
      <param name="overNode">The over node.</param>
    </member>
    <member name="M:Nez.UI.Containers.Tree.SetPadding(System.Single)">
      <summary>
   Sets the padding.
   </summary>
      <param name="padding">The padding.</param>
    </member>
    <member name="M:Nez.UI.Containers.Tree.GetIndentSpacing">
      <summary>
   Gets the indent spacing.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Containers.Tree.SetYSpacing(System.Single)">
      <summary>
   Sets the y spacing.
   </summary>
      <param name="ySpacing">The y spacing.</param>
    </member>
    <member name="M:Nez.UI.Containers.Tree.GetYSpacing">
      <summary>
   Gets the y spacing.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Containers.Tree.SetIconSpacing(System.Single,System.Single)">
      <summary>
   Sets the icon spacing.
   </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
    </member>
    <member name="M:Nez.UI.Containers.Tree.FindExpandedObjects(List{System.Object})">
      <summary>
   Finds the expanded objects.
   </summary>
      <param name="objects">The objects.</param>
    </member>
    <member name="M:Nez.UI.Containers.Tree.RestoreExpandedObjects(List{System.Object})">
      <summary>
   Restores the expanded objects.
   </summary>
      <param name="objects">The objects.</param>
    </member>
    <member name="M:Nez.UI.Containers.Tree.FindNode(System.Object)">
      <summary>
   Finds the node.
   </summary>
      <param name="o">The o.</param>
      <returns>Node.</returns>
      <exception cref="T:System.Exception">object cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Containers.Tree.CollapseAll">
      <summary>
   Collapses all.
   </summary>
    </member>
    <member name="M:Nez.UI.Containers.Tree.ExpandAll">
      <summary>
   Expands all.
   </summary>
    </member>
    <member name="F:Nez.UI.Containers.TreeStyle.Plus">
      <summary>
   The plus
   </summary>
    </member>
    <member name="F:Nez.UI.Containers.TreeStyle.Over">
      <summary>
   The over
   </summary>
    </member>
    <member name="M:Nez.UI.Containers.Node.#ctor(Element)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Containers.Node" /> class.
   </summary>
      <param name="element">The element.</param>
    </member>
    <member name="M:Nez.UI.Containers.Node.SetExpanded(System.Boolean)">
      <summary>
   Sets the expanded.
   </summary>
      <param name="expanded">if set to <c>true</c> [expanded].</param>
    </member>
    <member name="M:Nez.UI.Containers.Node.Add(Node)">
      <summary>
   Adds the specified node.
   </summary>
      <param name="node">The node.</param>
    </member>
    <member name="M:Nez.UI.Containers.Node.AddAll(List{Node})">
      <summary>
   Adds all.
   </summary>
      <param name="nodes">The nodes.</param>
    </member>
    <member name="M:Nez.UI.Containers.Node.Insert(System.Int32,Node)">
      <summary>
   Inserts the specified index.
   </summary>
      <param name="index">The index.</param>
      <param name="node">The node.</param>
    </member>
    <member name="M:Nez.UI.Containers.Node.Remove">
      <summary>
   Removes this instance.
   </summary>
    </member>
    <member name="M:Nez.UI.Containers.Node.Remove(Node)">
      <summary>
   Removes the specified node.
   </summary>
      <param name="node">The node.</param>
    </member>
    <member name="M:Nez.UI.Containers.Node.RemoveAll">
      <summary>
   Removes all.
   </summary>
    </member>
    <member name="M:Nez.UI.Containers.Node.GetTree">
      <summary>
   Gets the tree.
   </summary>
      <returns>Tree.</returns>
    </member>
    <member name="M:Nez.UI.Containers.Node.GetActor">
      <summary>
   Gets the actor.
   </summary>
      <returns>Element.</returns>
    </member>
    <member name="M:Nez.UI.Containers.Node.IsExpanded">
      <summary>
   Determines whether this instance is expanded.
   </summary>
      <returns>
        <c>true</c> if this instance is expanded; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.Containers.Node.GetChildren">
      <summary>
   Gets the children.
   </summary>
      <returns>List&lt;Node&gt;.</returns>
    </member>
    <member name="M:Nez.UI.Containers.Node.UpdateChildren">
      <summary>
   Updates the children.
   </summary>
    </member>
    <member name="M:Nez.UI.Containers.Node.GetParent">
      <summary>
   Gets the parent.
   </summary>
      <returns>Node.</returns>
    </member>
    <member name="M:Nez.UI.Containers.Node.SetIcon(IDrawable)">
      <summary>
   Sets the icon.
   </summary>
      <param name="icon">The icon.</param>
    </member>
    <member name="M:Nez.UI.Containers.Node.GetObject">
      <summary>
   Gets the object.
   </summary>
      <returns>System.Object.</returns>
    </member>
    <member name="M:Nez.UI.Containers.Node.SetObject(System.Object)">
      <summary>
   Sets the object.
   </summary>
      <param name="o">The o.</param>
    </member>
    <member name="M:Nez.UI.Containers.Node.GetIcon">
      <summary>
   Gets the icon.
   </summary>
      <returns>IDrawable.</returns>
    </member>
    <member name="M:Nez.UI.Containers.Node.GetLevel">
      <summary>
   Gets the level.
   </summary>
      <returns>System.Int32.</returns>
    </member>
    <member name="M:Nez.UI.Containers.Node.FindNode(System.Object)">
      <summary>
   Finds the node.
   </summary>
      <param name="o">The o.</param>
      <returns>Node.</returns>
      <exception cref="T:System.Exception">object cannot be null.</exception>
    </member>
    <member name="M:Nez.UI.Containers.Node.CollapseAll">
      <summary>
   Collapses all.
   </summary>
    </member>
    <member name="M:Nez.UI.Containers.Node.ExpandAll">
      <summary>
   Expands all.
   </summary>
    </member>
    <member name="M:Nez.UI.Containers.Node.ExpandTo">
      <summary>
   Expands to.
   </summary>
    </member>
    <member name="M:Nez.UI.Containers.Node.IsSelectable">
      <summary>
   Determines whether this instance is selectable.
   </summary>
      <returns>
        <c>true</c> if this instance is selectable; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.Containers.Node.SetSelectable(System.Boolean)">
      <summary>
   Sets the selectable.
   </summary>
      <param name="selectable">if set to <c>true</c> [selectable].</param>
    </member>
    <member name="M:Nez.UI.Containers.Node.FindExpandedObjects(List{System.Object})">
      <summary>
   Finds the expanded objects.
   </summary>
      <param name="objects">The objects.</param>
    </member>
    <member name="M:Nez.UI.Containers.Node.RestoreExpandedObjects(List{System.Object})">
      <summary>
   Restores the expanded objects.
   </summary>
      <param name="objects">The objects.</param>
    </member>
    <member name="M:Nez.UI.Containers.Node.GetHeight">
      <summary>
   Gets the height.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="T:Nez.UI.VerticalGroup">
      <summary>
   A group that lays out its children on top of each other in a single column. This can be easier than using {@link Table} when
   elements need to be inserted in the middle of the group.
   The preferred width is the largest preferred width of any child. The preferred height is the sum of the children's preferred
   heights, plus spacing between them if set. The min size is the preferred size and the max size is 0.
   </summary>
    </member>
    <member name="P:Nez.UI.VerticalGroup.PreferredWidth">
      <summary>
   Gets the width of the preferred.
   </summary>
      <value>The width of the preferred.</value>
    </member>
    <member name="P:Nez.UI.VerticalGroup.PreferredHeight">
      <summary>
   Gets the height of the preferred.
   </summary>
      <value>The height of the preferred.</value>
    </member>
    <member name="M:Nez.UI.VerticalGroup.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.VerticalGroup" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.VerticalGroup.#ctor(System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.VerticalGroup" /> class.
   </summary>
      <param name="spacing">The spacing.</param>
    </member>
    <member name="M:Nez.UI.VerticalGroup.Invalidate">
      <summary>
   Invalidates this element's layout, causing {@link #layout()} to happen the next time {@link #validate()} is called. This
   method should be called when state changes in the element that requires a layout but does not change the minimum, preferred,
   maximum, or actual size of the element (meaning it does not affect the parent element's layout).
   </summary>
    </member>
    <member name="M:Nez.UI.VerticalGroup.Layout">
      <summary>
   Computes and caches any information needed for drawing and, if this element has children, positions and sizes each child,
   calls {@link #invalidate()} any each child whose width or height has changed, and calls {@link #validate()} on each child.
   This method should almost never be called directly, instead {@link #validate()} should be used
   </summary>
    </member>
    <member name="M:Nez.UI.VerticalGroup.SetAlignment(Align)">
      <summary>
   Sets the alignment of widgets within the vertical group. Set to {@link Align#center}, {@link Align#top},
   {@link Align#bottom}, {@link Align#left}, {@link Align#right}, or any combination of those
   </summary>
      <param name="align">Align.</param>
      <returns>VerticalGroup.</returns>
    </member>
    <member name="M:Nez.UI.VerticalGroup.SetReverse(System.Boolean)">
      <summary>
   If true, the children will be ordered from bottom to top rather than the default top to bottom.
   </summary>
      <param name="reverse">If set to <c>true</c> reverse.</param>
      <returns>VerticalGroup.</returns>
    </member>
    <member name="M:Nez.UI.VerticalGroup.SetSpacing(System.Single)">
      <summary>
   Sets the space between children
   </summary>
      <param name="spacing">Spacing.</param>
      <returns>VerticalGroup.</returns>
    </member>
    <member name="M:Nez.UI.VerticalGroup.SetPad(System.Single)">
      <summary>
   Sets the padTop, padLeft, padBottom, and padRight to the specified value
   </summary>
      <param name="pad">Pad.</param>
      <returns>VerticalGroup.</returns>
    </member>
    <member name="M:Nez.UI.VerticalGroup.SetPad(System.Single,System.Single,System.Single,System.Single)">
      <summary>
   Sets the pad.
   </summary>
      <param name="top">The top.</param>
      <param name="left">The left.</param>
      <param name="bottom">The bottom.</param>
      <param name="right">The right.</param>
      <returns>VerticalGroup.</returns>
    </member>
    <member name="M:Nez.UI.VerticalGroup.SetPadTop(System.Single)">
      <summary>
   Sets the pad top.
   </summary>
      <param name="padTop">The pad top.</param>
      <returns>VerticalGroup.</returns>
    </member>
    <member name="M:Nez.UI.VerticalGroup.SetPadLeft(System.Single)">
      <summary>
   Sets the pad left.
   </summary>
      <param name="padLeft">The pad left.</param>
      <returns>VerticalGroup.</returns>
    </member>
    <member name="M:Nez.UI.VerticalGroup.SetPadBottom(System.Single)">
      <summary>
   Sets the pad bottom.
   </summary>
      <param name="padBottom">The pad bottom.</param>
      <returns>VerticalGroup.</returns>
    </member>
    <member name="M:Nez.UI.VerticalGroup.SetPadRight(System.Single)">
      <summary>
   Sets the pad right.
   </summary>
      <param name="padRight">The pad right.</param>
      <returns>VerticalGroup.</returns>
    </member>
    <member name="M:Nez.UI.VerticalGroup.SetRound(System.Boolean)">
      <summary>
   If true (the default), positions and sizes are rounded to integers.
   </summary>
      <param name="round">If set to <c>true</c> round.</param>
      <returns>VerticalGroup.</returns>
    </member>
    <member name="M:Nez.UI.VerticalGroup.SetFill(System.Single)">
      <summary>
   fill 0 will use pref width
   </summary>
      <param name="fill">Fill.</param>
      <returns>VerticalGroup.</returns>
    </member>
    <member name="T:Nez.UI.IDrawable">
      <summary>
   A drawable knows how to draw itself at a given rectangular size. It provides border sizes and a minimum size so that other code
   can determine how to size and position content.
   </summary>
    </member>
    <member name="P:Nez.UI.IDrawable.LeftWidth">
      <summary>
   Gets or sets the width of the left.
   </summary>
      <value>The width of the left.</value>
    </member>
    <member name="P:Nez.UI.IDrawable.RightWidth">
      <summary>
   Gets or sets the width of the right.
   </summary>
      <value>The width of the right.</value>
    </member>
    <member name="P:Nez.UI.IDrawable.TopHeight">
      <summary>
   Gets or sets the height of the top.
   </summary>
      <value>The height of the top.</value>
    </member>
    <member name="P:Nez.UI.IDrawable.BottomHeight">
      <summary>
   Gets or sets the height of the bottom.
   </summary>
      <value>The height of the bottom.</value>
    </member>
    <member name="P:Nez.UI.IDrawable.MinWidth">
      <summary>
   Gets or sets the minimum width.
   </summary>
      <value>The minimum width.</value>
    </member>
    <member name="P:Nez.UI.IDrawable.MinHeight">
      <summary>
   Gets or sets the minimum height.
   </summary>
      <value>The minimum height.</value>
    </member>
    <member name="M:Nez.UI.IDrawable.SetPadding(System.Single,System.Single,System.Single,System.Single)">
      <summary>
   Sets the padding.
   </summary>
      <param name="top">The top.</param>
      <param name="bottom">The bottom.</param>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
    </member>
    <member name="M:Nez.UI.IDrawable.Draw(Batcher,System.Single,System.Single,System.Single,System.Single,Color)">
      <summary>
   Draws the specified batcher.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="color">The color.</param>
    </member>
    <member name="T:Nez.UI.NinePatchDrawable">
      <summary>
   The drawable sizes are set when the ninepatch is set, but they are separate values. Eg, {@link Drawable#getLeftWidth()} could
   be set to more than {@link NinePatch#getLeftWidth()} in order to provide more space on the left than actually exists in the
   ninepatch.
   The min size is set to the ninepatch total size by default. It could be set to the left+right and top+bottom, excluding the
   middle size, to allow the drawable to be sized down as small as possible.
   </summary>
    </member>
    <member name="P:Nez.UI.NinePatchDrawable.LeftWidth">
      <summary>
   Gets or sets the width of the left.
   </summary>
      <value>The width of the left.</value>
    </member>
    <member name="P:Nez.UI.NinePatchDrawable.RightWidth">
      <summary>
   Gets or sets the width of the right.
   </summary>
      <value>The width of the right.</value>
    </member>
    <member name="P:Nez.UI.NinePatchDrawable.TopHeight">
      <summary>
   Gets or sets the height of the top.
   </summary>
      <value>The height of the top.</value>
    </member>
    <member name="P:Nez.UI.NinePatchDrawable.BottomHeight">
      <summary>
   Gets or sets the height of the bottom.
   </summary>
      <value>The height of the bottom.</value>
    </member>
    <member name="P:Nez.UI.NinePatchDrawable.MinWidth">
      <summary>
   Gets or sets the minimum width.
   </summary>
      <value>The minimum width.</value>
    </member>
    <member name="P:Nez.UI.NinePatchDrawable.MinHeight">
      <summary>
   Gets or sets the minimum height.
   </summary>
      <value>The minimum height.</value>
    </member>
    <member name="M:Nez.UI.NinePatchDrawable.SetPadding(System.Single,System.Single,System.Single,System.Single)">
      <summary>
   Sets the padding.
   </summary>
      <param name="top">The top.</param>
      <param name="bottom">The bottom.</param>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
    </member>
    <member name="F:Nez.UI.NinePatchDrawable.TintColor">
      <summary>
   The tint color
   </summary>
    </member>
    <member name="M:Nez.UI.NinePatchDrawable.#ctor(NinePatchSprite)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.NinePatchDrawable" /> class.
   </summary>
      <param name="sprite">The sprite.</param>
    </member>
    <member name="M:Nez.UI.NinePatchDrawable.#ctor(Texture2D,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
   creates a NinePatchDrawable using the full texture
   </summary>
      <param name="texture">Texture.</param>
      <param name="left">Left.</param>
      <param name="right">Right.</param>
      <param name="top">Top.</param>
      <param name="bottom">Bottom.</param>
    </member>
    <member name="M:Nez.UI.NinePatchDrawable.#ctor(Sprite,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.NinePatchDrawable" /> class.
   </summary>
      <param name="sprite">The sprite.</param>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <param name="top">The top.</param>
      <param name="bottom">The bottom.</param>
    </member>
    <member name="M:Nez.UI.NinePatchDrawable.SetPadding(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
   sets the padding on the NinePatchSprite
   </summary>
      <param name="left">Left.</param>
      <param name="right">Right.</param>
      <param name="top">Top.</param>
      <param name="bottom">Bottom.</param>
    </member>
    <member name="M:Nez.UI.NinePatchDrawable.Draw(Batcher,System.Single,System.Single,System.Single,System.Single,Color)">
      <summary>
   Draws the specified batcher.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.UI.NinePatchDrawable.NewTintedDrawable(Color)">
      <summary>
   returns a new drawable with the tint color specified
   </summary>
      <param name="tint">Tint.</param>
      <returns>The tinted drawable.</returns>
    </member>
    <member name="T:Nez.UI.PrimitiveDrawable">
      <summary>
   Class PrimitiveDrawable.
   Implements the <see cref="T:Nez.UI.IDrawable" /></summary>
      <seealso cref="T:Nez.UI.IDrawable" />
    </member>
    <member name="P:Nez.UI.PrimitiveDrawable.LeftWidth">
      <summary>
   Gets or sets the width of the left.
   </summary>
      <value>The width of the left.</value>
    </member>
    <member name="P:Nez.UI.PrimitiveDrawable.RightWidth">
      <summary>
   Gets or sets the width of the right.
   </summary>
      <value>The width of the right.</value>
    </member>
    <member name="P:Nez.UI.PrimitiveDrawable.TopHeight">
      <summary>
   Gets or sets the height of the top.
   </summary>
      <value>The height of the top.</value>
    </member>
    <member name="P:Nez.UI.PrimitiveDrawable.BottomHeight">
      <summary>
   Gets or sets the height of the bottom.
   </summary>
      <value>The height of the bottom.</value>
    </member>
    <member name="P:Nez.UI.PrimitiveDrawable.MinWidth">
      <summary>
   Gets or sets the minimum width.
   </summary>
      <value>The minimum width.</value>
    </member>
    <member name="P:Nez.UI.PrimitiveDrawable.MinHeight">
      <summary>
   Gets or sets the minimum height.
   </summary>
      <value>The minimum height.</value>
    </member>
    <member name="M:Nez.UI.PrimitiveDrawable.SetPadding(System.Single,System.Single,System.Single,System.Single)">
      <summary>
   Sets the padding.
   </summary>
      <param name="top">The top.</param>
      <param name="bottom">The bottom.</param>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
    </member>
    <member name="F:Nez.UI.PrimitiveDrawable.Color">
      <summary>
   The color
   </summary>
    </member>
    <member name="F:Nez.UI.PrimitiveDrawable.UseFilledRect">
      <summary>
   The use filled rect
   </summary>
    </member>
    <member name="M:Nez.UI.PrimitiveDrawable.#ctor(System.Nullable{Color})">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.PrimitiveDrawable" /> class.
   </summary>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.UI.PrimitiveDrawable.#ctor(Color,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.PrimitiveDrawable" /> class.
   </summary>
      <param name="color">The color.</param>
      <param name="horizontalPadding">The horizontal padding.</param>
    </member>
    <member name="M:Nez.UI.PrimitiveDrawable.#ctor(Color,System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.PrimitiveDrawable" /> class.
   </summary>
      <param name="color">The color.</param>
      <param name="horizontalPadding">The horizontal padding.</param>
      <param name="verticalPadding">The vertical padding.</param>
    </member>
    <member name="M:Nez.UI.PrimitiveDrawable.#ctor(System.Single,System.Single,System.Nullable{Color})">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.PrimitiveDrawable" /> class.
   </summary>
      <param name="minWidth">The minimum width.</param>
      <param name="minHeight">The minimum height.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.UI.PrimitiveDrawable.#ctor(System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.PrimitiveDrawable" /> class.
   </summary>
      <param name="minSize">The minimum size.</param>
    </member>
    <member name="M:Nez.UI.PrimitiveDrawable.#ctor(System.Single,Color)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.PrimitiveDrawable" /> class.
   </summary>
      <param name="minSize">The minimum size.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.UI.PrimitiveDrawable.Draw(Batcher,System.Single,System.Single,System.Single,System.Single,Color)">
      <summary>
   Draws the specified batcher.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="color">The color.</param>
    </member>
    <member name="T:Nez.UI.SpriteDrawable">
      <summary>
   Drawable for a {@link Sprite}
   </summary>
    </member>
    <member name="F:Nez.UI.SpriteDrawable.TintColor">
      <summary>
   The tint color
   </summary>
    </member>
    <member name="F:Nez.UI.SpriteDrawable.SpriteEffects">
      <summary>
   The sprite effects
   </summary>
    </member>
    <member name="P:Nez.UI.SpriteDrawable.FlipX">
      <summary>
   determines if the sprite should be rendered normally or flipped horizontally
   </summary>
      <value>
        <c>true</c> if flip x; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.UI.SpriteDrawable.FlipY">
      <summary>
   determines if the sprite should be rendered normally or flipped vertically
   </summary>
      <value>
        <c>true</c> if flip y; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.UI.SpriteDrawable.Sprite">
      <summary>
   Gets or sets the sprite.
   </summary>
      <value>The sprite.</value>
    </member>
    <member name="P:Nez.UI.SpriteDrawable.LeftWidth">
      <summary>
   Gets or sets the width of the left.
   </summary>
      <value>The width of the left.</value>
    </member>
    <member name="P:Nez.UI.SpriteDrawable.RightWidth">
      <summary>
   Gets or sets the width of the right.
   </summary>
      <value>The width of the right.</value>
    </member>
    <member name="P:Nez.UI.SpriteDrawable.TopHeight">
      <summary>
   Gets or sets the height of the top.
   </summary>
      <value>The height of the top.</value>
    </member>
    <member name="P:Nez.UI.SpriteDrawable.BottomHeight">
      <summary>
   Gets or sets the height of the bottom.
   </summary>
      <value>The height of the bottom.</value>
    </member>
    <member name="P:Nez.UI.SpriteDrawable.MinWidth">
      <summary>
   Gets or sets the minimum width.
   </summary>
      <value>The minimum width.</value>
    </member>
    <member name="P:Nez.UI.SpriteDrawable.MinHeight">
      <summary>
   Gets or sets the minimum height.
   </summary>
      <value>The minimum height.</value>
    </member>
    <member name="M:Nez.UI.SpriteDrawable.SetPadding(System.Single,System.Single,System.Single,System.Single)">
      <summary>
   Sets the padding.
   </summary>
      <param name="top">The top.</param>
      <param name="bottom">The bottom.</param>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
    </member>
    <member name="M:Nez.UI.SpriteDrawable.#ctor(Sprite)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.SpriteDrawable" /> class.
   </summary>
      <param name="sprite">The sprite.</param>
    </member>
    <member name="M:Nez.UI.SpriteDrawable.#ctor(Texture2D)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.SpriteDrawable" /> class.
   </summary>
      <param name="texture">The texture.</param>
    </member>
    <member name="M:Nez.UI.SpriteDrawable.Draw(Batcher,System.Single,System.Single,System.Single,System.Single,Color)">
      <summary>
   Draws the specified batcher.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.UI.SpriteDrawable.NewTintedDrawable(Color)">
      <summary>
   returns a new drawable with the tint color specified
   </summary>
      <param name="tint">Tint.</param>
      <returns>The tinted drawable.</returns>
    </member>
    <member name="T:Nez.UI.TiledDrawable">
      <summary>
   Draws a {@link Sprite} repeatedly to fill the area, instead of stretching it
   </summary>
    </member>
    <member name="M:Nez.UI.TiledDrawable.#ctor(Sprite)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.TiledDrawable" /> class.
   </summary>
      <param name="sprite">The sprite.</param>
    </member>
    <member name="M:Nez.UI.TiledDrawable.#ctor(Texture2D)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.TiledDrawable" /> class.
   </summary>
      <param name="texture">The texture.</param>
    </member>
    <member name="M:Nez.UI.TiledDrawable.Draw(Batcher,System.Single,System.Single,System.Single,System.Single,Color)">
      <summary>
   Draws the specified batcher.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="color">The color.</param>
    </member>
    <member name="T:Nez.UI.ArraySelection`1">
      <summary>
   Class ArraySelection.
   Implements the <see cref="T:Nez.UI.Selection`1" /></summary>
      <typeparam name="T">
      </typeparam>
      <seealso cref="T:Nez.UI.Selection`1" />
    </member>
    <member name="M:Nez.UI.ArraySelection`1.#ctor(List{`0})">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ArraySelection`1" /> class.
   </summary>
      <param name="array">The array.</param>
    </member>
    <member name="M:Nez.UI.ArraySelection`1.Choose(`0)">
      <summary>
   Selects or deselects the specified item based on how the selection is configured, whether ctrl is currently pressed, etc.
   This is typically invoked by user interaction.
   </summary>
      <param name="item">Item.</param>
    </member>
    <member name="M:Nez.UI.ArraySelection`1.GetRangeSelect">
      <summary>
   Gets the range select.
   </summary>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.ArraySelection`1.SetRangeSelect(System.Boolean)">
      <summary>
   Sets the range select.
   </summary>
      <param name="rangeSelect">if set to <c>true</c> [range select].</param>
    </member>
    <member name="M:Nez.UI.ArraySelection`1.Validate">
      <summary>
   Removes objects from the selection that are no longer in the items array. If getRequired() is true and there is
   no selected item, the first item is selected.
   </summary>
    </member>
    <member name="T:Nez.UI.Selection`1">
      <summary>
   Class Selection.
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.UI.Selection`1.SetElement(Element)">
      <summary>
   An Element to fire ChangeEvent on when the selection changes, or null
   </summary>
      <param name="element">element.</param>
      <returns>The element.</returns>
    </member>
    <member name="M:Nez.UI.Selection`1.Choose(`0)">
      <summary>
   Selects or deselects the specified item based on how the selection is configured, whether ctrl is currently pressed, etc.
   This is typically invoked by user interaction.
   </summary>
      <param name="item">Item.</param>
    </member>
    <member name="M:Nez.UI.Selection`1.HasItems">
      <summary>
   Determines whether this instance has items.
   </summary>
      <returns>
        <c>true</c> if this instance has items; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.Selection`1.IsEmpty">
      <summary>
   Determines whether this instance is empty.
   </summary>
      <returns>
        <c>true</c> if this instance is empty; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.Selection`1.Size">
      <summary>
   Sizes this instance.
   </summary>
      <returns>System.Int32.</returns>
    </member>
    <member name="M:Nez.UI.Selection`1.Items">
      <summary>
   Itemses this instance.
   </summary>
      <returns>List&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.UI.Selection`1.First">
      <summary>
   Returns the first selected item, or null
   </summary>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.UI.Selection`1.Set(`0)">
      <summary>
   Sets the selection to only the specified item
   </summary>
      <param name="item">Item.</param>
      <returns>Selection&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.UI.Selection`1.SetAll(List{`0})">
      <summary>
   Sets all.
   </summary>
      <param name="items">The items.</param>
      <returns>Selection&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.UI.Selection`1.Add(`0)">
      <summary>
   Adds the item to the selection
   </summary>
      <param name="item">Item.</param>
    </member>
    <member name="M:Nez.UI.Selection`1.AddAll(List{`0})">
      <summary>
   Adds all.
   </summary>
      <param name="items">The items.</param>
    </member>
    <member name="M:Nez.UI.Selection`1.Remove(`0)">
      <summary>
   Removes the specified item.
   </summary>
      <param name="item">The item.</param>
    </member>
    <member name="M:Nez.UI.Selection`1.RemoveAll(List{`0})">
      <summary>
   Removes all.
   </summary>
      <param name="items">The items.</param>
    </member>
    <member name="M:Nez.UI.Selection`1.Clear">
      <summary>
   Clears this instance.
   </summary>
    </member>
    <member name="M:Nez.UI.Selection`1.FireChangeEvent">
      <summary>
   Fires a change event on the selection's Element, if any. Called internally when the selection changes, depending on
   setProgrammaticChangeEvents(bool)
   </summary>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.Selection`1.Contains(`0)">
      <summary>
   Determines whether this instance contains the object.
   </summary>
      <param name="item">The item.</param>
      <returns>
        <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.Selection`1.GetLastSelected">
      <summary>
   Makes a best effort to return the last item selected, else returns an arbitrary item or null if the selection is empty.
   </summary>
      <returns>The last selected.</returns>
    </member>
    <member name="M:Nez.UI.Selection`1.SetDisabled(System.Boolean)">
      <summary>
   If true, prevents choose(Object) from changing the selection. Default is false.
   </summary>
      <param name="isDisabled">Is disabled.</param>
      <returns>Selection&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.UI.Selection`1.IsDisabled">
      <summary>
   Determines whether this instance is disabled.
   </summary>
      <returns>
        <c>true</c> if this instance is disabled; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.Selection`1.GetToggle">
      <summary>
   Gets the toggle.
   </summary>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.Selection`1.SetToggle(System.Boolean)">
      <summary>
   If true, prevents choose(Object) from clearing the selection. Default is false.
   </summary>
      <param name="toggle">Toggle.</param>
      <returns>Selection&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.UI.Selection`1.GetMultiple">
      <summary>
   Gets the multiple.
   </summary>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.Selection`1.SetMultiple(System.Boolean)">
      <summary>
   If true, allows choose(Object) to select multiple items. Default is false.
   </summary>
      <param name="multiple">Multiple.</param>
      <returns>Selection&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.UI.Selection`1.GetRequired">
      <summary>
   Gets the required.
   </summary>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.Selection`1.SetRequired(System.Boolean)">
      <summary>
   If true, prevents choose(Object) from selecting none. Default is false.
   </summary>
      <param name="required">Required.</param>
      <returns>Selection&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.UI.Selection`1.SetProgrammaticChangeEvents(System.Boolean)">
      <summary>
   If false, only choose(Object) will fire a change event. Default is true.
   </summary>
      <param name="programmaticChangeEvents">Programmatic change events.</param>
      <returns>Selection&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.UI.Selection`1.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="T:Nez.UI.TooltipManager">
      <summary>
   Class TooltipManager.
   </summary>
    </member>
    <member name="F:Nez.UI.TooltipManager.InitialTime">
      <summary>
   Seconds from when an actor is hovered to when the tooltip is shown. Call {hideAll() after changing to reset internal state
   </summary>
    </member>
    <member name="F:Nez.UI.TooltipManager.SubsequentTime">
      <summary>
   Once a tooltip is shown, this is used instead of initialTime. Default is 0.
   </summary>
    </member>
    <member name="F:Nez.UI.TooltipManager.ResetTime">
      <summary>
   Seconds to use subsequentTime
   </summary>
    </member>
    <member name="F:Nez.UI.TooltipManager.Enabled">
      <summary>
   If false, tooltips will not be shown. Default is true.
   </summary>
    </member>
    <member name="F:Nez.UI.TooltipManager.Animations">
      <summary>
   If false, tooltips will be shown without animations. Default is true.
   </summary>
    </member>
    <member name="F:Nez.UI.TooltipManager.MaxWidth">
      <summary>
   The maximum width of a TextTooltip. The label will wrap if needed. Default is int.MaxValue.
   </summary>
    </member>
    <member name="F:Nez.UI.TooltipManager.OffsetX">
      <summary>
   The distance from the mouse position to offset the tooltip actor
   </summary>
    </member>
    <member name="F:Nez.UI.TooltipManager.EdgeDistance">
      <summary>
   The distance from the tooltip actor position to the edge of the screen where the actor will be shown on the other side of
   the mouse cursor.
   </summary>
    </member>
    <member name="M:Nez.UI.TooltipManager.GetInstance">
      <summary>
   Gets the instance.
   </summary>
      <returns>TooltipManager.</returns>
    </member>
    <member name="M:Nez.UI.TooltipManager.TouchDown(Tooltip)">
      <summary>
   Touches down.
   </summary>
      <param name="tooltip">The tooltip.</param>
    </member>
    <member name="M:Nez.UI.TooltipManager.Enter(Tooltip)">
      <summary>
   Enters the specified tooltip.
   </summary>
      <param name="tooltip">The tooltip.</param>
    </member>
    <member name="M:Nez.UI.TooltipManager.Hide(Tooltip)">
      <summary>
   Hides the specified tooltip.
   </summary>
      <param name="tooltip">The tooltip.</param>
    </member>
    <member name="M:Nez.UI.TooltipManager.HideAll">
      <summary>
   Hides all.
   </summary>
    </member>
    <member name="M:Nez.UI.TooltipManager.Instant">
      <summary>
   Shows all tooltips on hover without a delay for resetTime seconds.
   </summary>
    </member>
    <member name="T:Nez.UI.Button">
      <summary>
   Class Button.
   Implements the <see cref="T:Nez.UI.Table" />
   Implements the <see cref="T:Nez.UI.IInputListener" />
   Implements the <see cref="T:Nez.UI.IGamepadFocusable" /></summary>
      <seealso cref="T:Nez.UI.Table" />
      <seealso cref="T:Nez.UI.IInputListener" />
      <seealso cref="T:Nez.UI.IGamepadFocusable" />
    </member>
    <member name="T:Nez.UI.ButtonStyle">
      <summary>
   The style for a button
   </summary>
    </member>
    <member name="E:Nez.UI.Button.OnChanged">
      <summary>
   Occurs when [on changed].
   </summary>
    </member>
    <member name="E:Nez.UI.Button.OnClicked">
      <summary>
   Occurs when [on clicked].
   </summary>
    </member>
    <member name="P:Nez.UI.Button.PreferredWidth">
      <summary>
   Gets the width of the preferred.
   </summary>
      <value>The width of the preferred.</value>
    </member>
    <member name="P:Nez.UI.Button.PreferredHeight">
      <summary>
   Gets the height of the preferred.
   </summary>
      <value>The height of the preferred.</value>
    </member>
    <member name="P:Nez.UI.Button.MinWidth">
      <summary>
   Gets the minimum width.
   </summary>
      <value>The minimum width.</value>
    </member>
    <member name="P:Nez.UI.Button.MinHeight">
      <summary>
   Gets the minimum height.
   </summary>
      <value>The minimum height.</value>
    </member>
    <member name="P:Nez.UI.Button.IsChecked">
      <summary>
   Gets or sets a value indicating whether this instance is checked.
   </summary>
      <value>
        <c>true</c> if this instance is checked; otherwise, <c>false</c>.</value>
    </member>
    <member name="F:Nez.UI.Button.ProgrammaticChangeEvents">
      <summary>
   The programmatic change events
   </summary>
    </member>
    <member name="F:Nez.UI.Button.ButtonBoundaryThreshold">
      <summary>
   the maximum distance outside the button the mouse can move when pressing it to cause it to be unfocused
   </summary>
    </member>
    <member name="M:Nez.UI.Button.#ctor(ButtonStyle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Button" /> class.
   </summary>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.Button.#ctor(Skin,System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Button" /> class.
   </summary>
      <param name="skin">The skin.</param>
      <param name="styleName">Name of the style.</param>
    </member>
    <member name="M:Nez.UI.Button.#ctor(IDrawable)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Button" /> class.
   </summary>
      <param name="up">Up.</param>
    </member>
    <member name="M:Nez.UI.Button.#ctor(IDrawable,IDrawable)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Button" /> class.
   </summary>
      <param name="up">Up.</param>
      <param name="down">Down.</param>
    </member>
    <member name="M:Nez.UI.Button.#ctor(IDrawable,IDrawable,IDrawable)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Button" /> class.
   </summary>
      <param name="up">Up.</param>
      <param name="down">Down.</param>
      <param name="checked_">The checked.</param>
    </member>
    <member name="P:Nez.UI.Button.ShouldUseExplicitFocusableControl">
      <summary>
   Gets or sets a value indicating whether [should use explicit focusable control].
   </summary>
      <value>
        <c>true</c> if [should use explicit focusable control]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.UI.Button.GamepadUpElement">
      <summary>
   Gets or sets the gamepad up element.
   </summary>
      <value>The gamepad up element.</value>
    </member>
    <member name="P:Nez.UI.Button.GamepadDownElement">
      <summary>
   Gets or sets the gamepad down element.
   </summary>
      <value>The gamepad down element.</value>
    </member>
    <member name="P:Nez.UI.Button.GamepadLeftElement">
      <summary>
   Gets or sets the gamepad left element.
   </summary>
      <value>The gamepad left element.</value>
    </member>
    <member name="P:Nez.UI.Button.GamepadRightElement">
      <summary>
   Gets or sets the gamepad right element.
   </summary>
      <value>The gamepad right element.</value>
    </member>
    <member name="M:Nez.UI.Button.EnableExplicitFocusableControl(IGamepadFocusable,IGamepadFocusable,IGamepadFocusable,IGamepadFocusable)">
      <summary>
   enables shouldUseExplicitFocusableControl and sets the elements corresponding to each direction
   </summary>
      <param name="upEle">Up ele.</param>
      <param name="downEle">Down ele.</param>
      <param name="leftEle">Left ele.</param>
      <param name="rightEle">Right ele.</param>
    </member>
    <member name="M:Nez.UI.Button.SetStyle(ButtonStyle)">
      <summary>
   Sets the style.
   </summary>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.Button.Toggle">
      <summary>
   Toggles the checked state. This method changes the checked state, which fires a {@link onChangedEvent} (if programmatic change
   events are enabled), so can be used to simulate a button click.
   </summary>
    </member>
    <member name="M:Nez.UI.Button.GetStyle">
      <summary>
   Returns the button's style. Modifying the returned style may not have an effect until {@link #setStyle(ButtonStyle)} is called.
   </summary>
      <returns>The style.</returns>
    </member>
    <member name="M:Nez.UI.Button.GetButtonGroup">
      <summary>
   May be null
   </summary>
      <returns>The button group.</returns>
    </member>
    <member name="M:Nez.UI.Button.SetDisabled(System.Boolean)">
      <summary>
   Sets the disabled.
   </summary>
      <param name="disabled">if set to <c>true</c> [disabled].</param>
    </member>
    <member name="M:Nez.UI.Button.GetDisabled">
      <summary>
   Gets the disabled.
   </summary>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.Button.Draw(Batcher,System.Single)">
      <summary>
   If this method is overridden, the super method or {@link #validate()} should be called to ensure the widget is laid out.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="parentAlpha">Parent alpha.</param>
    </member>
    <member name="M:Nez.UI.Button.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="F:Nez.UI.ButtonStyle.Up">
      <summary>
   Up
   </summary>
    </member>
    <member name="F:Nez.UI.ButtonStyle.PressedOffsetX">
      <summary>
   The pressed offset x
   </summary>
    </member>
    <member name="M:Nez.UI.ButtonStyle.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ButtonStyle" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.ButtonStyle.#ctor(IDrawable,IDrawable,IDrawable)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ButtonStyle" /> class.
   </summary>
      <param name="up">Up.</param>
      <param name="down">Down.</param>
      <param name="over">The over.</param>
    </member>
    <member name="M:Nez.UI.ButtonStyle.Create(Color,Color,Color)">
      <summary>
   Creates the specified up color.
   </summary>
      <param name="upColor">Up color.</param>
      <param name="downColor">Down color.</param>
      <param name="overColor">Color of the over.</param>
      <returns>ButtonStyle.</returns>
    </member>
    <member name="M:Nez.UI.ButtonStyle.Clone">
      <summary>
   Clones this instance.
   </summary>
      <returns>ButtonStyle.</returns>
    </member>
    <member name="T:Nez.UI.ButtonGroup">
      <summary>
   Manages a group of buttons to enforce a minimum and maximum number of checked buttons. This enables "radio button"
   functionality and more. A button may only be in one group at a time.
   The {@link #canCheck(Button, boolean)} method can be overridden to control if a button check or uncheck is allowed.
   </summary>
    </member>
    <member name="M:Nez.UI.ButtonGroup.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ButtonGroup" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.ButtonGroup.#ctor(Button[])">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ButtonGroup" /> class.
   </summary>
      <param name="buttons">The buttons.</param>
    </member>
    <member name="M:Nez.UI.ButtonGroup.Add(Button)">
      <summary>
   Adds the specified button.
   </summary>
      <param name="button">The button.</param>
    </member>
    <member name="M:Nez.UI.ButtonGroup.Add(Button[])">
      <summary>
   Adds the specified buttons.
   </summary>
      <param name="buttons">The buttons.</param>
    </member>
    <member name="M:Nez.UI.ButtonGroup.Remove(Button)">
      <summary>
   Removes the specified button.
   </summary>
      <param name="button">The button.</param>
    </member>
    <member name="M:Nez.UI.ButtonGroup.Remove(Button[])">
      <summary>
   Removes the specified buttons.
   </summary>
      <param name="buttons">The buttons.</param>
    </member>
    <member name="M:Nez.UI.ButtonGroup.Clear">
      <summary>
   Clears this instance.
   </summary>
    </member>
    <member name="M:Nez.UI.ButtonGroup.SetChecked(System.String)">
      <summary>
   Sets the first {@link TextButton} with the specified text to checked.
   </summary>
      <param name="text">Text.</param>
    </member>
    <member name="M:Nez.UI.ButtonGroup.CanCheck(Button,System.Boolean)">
      <summary>
   Called when a button is checked or unchecked. If overridden, generally changing button checked states should not be done
   from within this method.
   </summary>
      <param name="button">Button.</param>
      <param name="newState">New state.</param>
      <returns>True if the new state should be allowed</returns>
    </member>
    <member name="M:Nez.UI.ButtonGroup.UncheckAll">
      <summary>
   Sets all buttons' {@link Button#isChecked()} to false, regardless of {@link #setMinCheckCount(int)}.
   </summary>
    </member>
    <member name="M:Nez.UI.ButtonGroup.GetChecked">
      <summary>
   The first checked button, or null.
   </summary>
      <returns>The checked.</returns>
    </member>
    <member name="M:Nez.UI.ButtonGroup.GetCheckedIndex">
      <summary>
   The first checked button index, or -1
   </summary>
      <returns>The checked index.</returns>
    </member>
    <member name="M:Nez.UI.ButtonGroup.GetAllChecked">
      <summary>
   Gets all checked.
   </summary>
      <returns>List&lt;Button&gt;.</returns>
    </member>
    <member name="M:Nez.UI.ButtonGroup.GetButtons">
      <summary>
   Gets the buttons.
   </summary>
      <returns>List&lt;Button&gt;.</returns>
    </member>
    <member name="M:Nez.UI.ButtonGroup.SetMinCheckCount(System.Int32)">
      <summary>
   Sets the minimum number of buttons that must be checked. Default is 1.
   </summary>
      <param name="minCheckCount">Minimum check count.</param>
    </member>
    <member name="M:Nez.UI.ButtonGroup.SetMaxCheckCount(System.Int32)">
      <summary>
   Sets the maximum number of buttons that can be checked. Set to -1 for no maximum. Default is 1.
   </summary>
      <param name="maxCheckCount">Max check count.</param>
    </member>
    <member name="M:Nez.UI.ButtonGroup.SetUncheckLast(System.Boolean)">
      <summary>
   If true, when the maximum number of buttons are checked and an additional button is checked, the last button to be checked
   is unchecked so that the maximum is not exceeded. If false, additional buttons beyond the maximum are not allowed to be
   checked. Default is true.
   </summary>
      <param name="uncheckLast">Uncheck last.</param>
    </member>
    <member name="T:Nez.UI.CheckBox">
      <summary>
   A checkbox is a button that contains an image indicating the checked or unchecked state and a label
   </summary>
    </member>
    <member name="T:Nez.UI.CheckBoxStyle">
      <summary>
   The style for a select box
   </summary>
    </member>
    <member name="M:Nez.UI.CheckBox.#ctor(System.String,CheckBoxStyle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.CheckBox" /> class.
   </summary>
      <param name="text">The text.</param>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.CheckBox.#ctor(System.String,Skin,System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.CheckBox" /> class.
   </summary>
      <param name="text">The text.</param>
      <param name="skin">The skin.</param>
      <param name="styleName">Name of the style.</param>
    </member>
    <member name="M:Nez.UI.CheckBox.SetStyle(ButtonStyle)">
      <summary>
   Sets the style.
   </summary>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.CheckBox.GetStyle">
      <summary>
   Returns the checkbox's style. Modifying the returned style may not have an effect until {@link #setStyle(ButtonStyle)} is called
   </summary>
      <returns>The style.</returns>
    </member>
    <member name="M:Nez.UI.CheckBox.Draw(Batcher,System.Single)">
      <summary>
   Draws the specified batcher.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="parentAlpha">The parent alpha.</param>
    </member>
    <member name="M:Nez.UI.CheckBox.GetImage">
      <summary>
   Gets the image.
   </summary>
      <returns>Image.</returns>
    </member>
    <member name="M:Nez.UI.CheckBox.GetImageCell">
      <summary>
   Gets the image cell.
   </summary>
      <returns>Cell.</returns>
    </member>
    <member name="F:Nez.UI.CheckBoxStyle.CheckboxOn">
      <summary>
   The checkbox on
   </summary>
    </member>
    <member name="F:Nez.UI.CheckBoxStyle.CheckboxOver">
      <summary>
   The checkbox over
   </summary>
    </member>
    <member name="M:Nez.UI.CheckBoxStyle.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.CheckBoxStyle" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.CheckBoxStyle.#ctor(IDrawable,IDrawable,BitmapFont,Color)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.CheckBoxStyle" /> class.
   </summary>
      <param name="checkboxOff">The checkbox off.</param>
      <param name="checkboxOn">The checkbox on.</param>
      <param name="font">The font.</param>
      <param name="fontColor">Color of the font.</param>
    </member>
    <member name="T:Nez.UI.Dialog">
      <summary>
   Displays a dialog, which is a modal window containing a content table with a button table underneath it. Methods are provided
   to add a label to the content table and buttons to the button table, but any widgets can be added. When a button is clicked,
   {@link #result(Object)} is called and the dialog is removed from the stage.
   </summary>
    </member>
    <member name="M:Nez.UI.Dialog.#ctor(System.String,WindowStyle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Dialog" /> class.
   </summary>
      <param name="title">The title.</param>
      <param name="windowStyle">The window style.</param>
    </member>
    <member name="M:Nez.UI.Dialog.#ctor(System.String,Skin,System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Dialog" /> class.
   </summary>
      <param name="title">The title.</param>
      <param name="skin">The skin.</param>
      <param name="styleName">Name of the style.</param>
    </member>
    <member name="M:Nez.UI.Dialog.GetContentTable">
      <summary>
   Gets the content table.
   </summary>
      <returns>Table.</returns>
    </member>
    <member name="M:Nez.UI.Dialog.GetButtonTable">
      <summary>
   Gets the button table.
   </summary>
      <returns>Table.</returns>
    </member>
    <member name="M:Nez.UI.Dialog.AddText(System.String)">
      <summary>
   Adds a label to the content table
   </summary>
      <param name="text">Text.</param>
      <returns>The text.</returns>
    </member>
    <member name="M:Nez.UI.Dialog.AddText(Label)">
      <summary>
   Adds the given Label to the content table
   </summary>
      <param name="label">Label.</param>
      <returns>Dialog.</returns>
    </member>
    <member name="M:Nez.UI.Dialog.AddButton(System.String,TextButtonStyle)">
      <summary>
   Adds the button.
   </summary>
      <param name="text">The text.</param>
      <param name="buttonStyle">The button style.</param>
      <returns>Button.</returns>
    </member>
    <member name="M:Nez.UI.Dialog.AddButton(Button)">
      <summary>
   Adds the button.
   </summary>
      <param name="button">The button.</param>
      <returns>Button.</returns>
    </member>
    <member name="M:Nez.UI.Dialog.Show(Stage)">
      <summary>
   {@link #pack() Packs} the dialog and adds it to the stage
   </summary>
      <param name="stage">Stage.</param>
      <returns>Dialog.</returns>
    </member>
    <member name="M:Nez.UI.Dialog.Hide">
      <summary>
   Hides the dialog
   </summary>
    </member>
    <member name="T:Nez.UI.IconButton">
      <summary>
   Button with a background and an icon
   </summary>
    </member>
    <member name="T:Nez.UI.IconButtonStyle">
      <summary>
   Class IconButtonStyle.
   Implements the <see cref="T:Nez.UI.ImageButtonStyle" /></summary>
      <seealso cref="T:Nez.UI.ImageButtonStyle" />
    </member>
    <member name="M:Nez.UI.IconButton.#ctor(IconButtonStyle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.IconButton" /> class.
   </summary>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.IconButton.#ctor(Skin,System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.IconButton" /> class.
   </summary>
      <param name="skin">The skin.</param>
      <param name="styleName">Name of the style.</param>
    </member>
    <member name="M:Nez.UI.IconButton.#ctor(IDrawable,IDrawable)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.IconButton" /> class.
   </summary>
      <param name="icon">The icon.</param>
      <param name="imageUp">The image up.</param>
    </member>
    <member name="M:Nez.UI.IconButton.#ctor(IDrawable,IDrawable,IDrawable)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.IconButton" /> class.
   </summary>
      <param name="icon">The icon.</param>
      <param name="imageUp">The image up.</param>
      <param name="imageDown">The image down.</param>
    </member>
    <member name="M:Nez.UI.IconButton.#ctor(IDrawable,IDrawable,IDrawable,IDrawable)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.IconButton" /> class.
   </summary>
      <param name="icon">The icon.</param>
      <param name="imageUp">The image up.</param>
      <param name="imageDown">The image down.</param>
      <param name="imageOver">The image over.</param>
    </member>
    <member name="M:Nez.UI.IconButton.SetStyle(ButtonStyle)">
      <summary>
   Sets the style.
   </summary>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.IconButton.GetStyle">
      <summary>
   Gets the style.
   </summary>
      <returns>IconButtonStyle.</returns>
    </member>
    <member name="M:Nez.UI.IconButton.GetImage">
      <summary>
   Gets the image.
   </summary>
      <returns>Image.</returns>
    </member>
    <member name="M:Nez.UI.IconButton.GetImageCell">
      <summary>
   Gets the image cell.
   </summary>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.IconButton.Draw(Batcher,System.Single)">
      <summary>
   If this method is overridden, the super method or {@link #validate()} should be called to ensure the widget is laid out.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="parentAlpha">Parent alpha.</param>
    </member>
    <member name="F:Nez.UI.IconButtonStyle.Icon">
      <summary>
   The icon
   </summary>
    </member>
    <member name="F:Nez.UI.IconButtonStyle.PadLeft">
      <summary>
   The pad left
   </summary>
    </member>
    <member name="M:Nez.UI.IconButtonStyle.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.IconButtonStyle" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.IconButtonStyle.#ctor(IDrawable,IDrawable,IDrawable,IDrawable,IDrawable,IDrawable,IDrawable)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.IconButtonStyle" /> class.
   </summary>
      <param name="icon">The icon.</param>
      <param name="up">Up.</param>
      <param name="down">Down.</param>
      <param name="checkked">The checkked.</param>
      <param name="imageUp">The image up.</param>
      <param name="imageDown">The image down.</param>
      <param name="imageChecked">The image checked.</param>
    </member>
    <member name="M:Nez.UI.IconButtonStyle.Clone">
      <summary>
   Clones this instance.
   </summary>
      <returns>IconButtonStyle.</returns>
    </member>
    <member name="T:Nez.UI.Image">
      <summary>
   Class Image.
   Implements the <see cref="T:Nez.UI.Element" /></summary>
      <seealso cref="T:Nez.UI.Element" />
    </member>
    <member name="M:Nez.UI.Image.#ctor(IDrawable,Scaling,System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Image" /> class.
   </summary>
      <param name="drawable">The drawable.</param>
      <param name="scaling">The scaling.</param>
      <param name="align">The align.</param>
    </member>
    <member name="M:Nez.UI.Image.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Image" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.Image.#ctor(Sprite,Scaling,System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Image" /> class.
   </summary>
      <param name="sprite">The sprite.</param>
      <param name="scaling">The scaling.</param>
      <param name="align">The align.</param>
    </member>
    <member name="M:Nez.UI.Image.#ctor(Texture2D,Scaling,System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Image" /> class.
   </summary>
      <param name="texture">The texture.</param>
      <param name="scaling">The scaling.</param>
      <param name="align">The align.</param>
    </member>
    <member name="M:Nez.UI.Image.SetDrawable(IDrawable)">
      <summary>
   Sets the drawable.
   </summary>
      <param name="drawable">The drawable.</param>
      <returns>Image.</returns>
    </member>
    <member name="M:Nez.UI.Image.SetAlignment(Align)">
      <summary>
   Sets the alignment.
   </summary>
      <param name="alignment">Alignment.</param>
      <returns>Image.</returns>
    </member>
    <member name="M:Nez.UI.Image.SetScaling(Scaling)">
      <summary>
   Sets the scaling.
   </summary>
      <param name="scaling">The scaling.</param>
      <returns>Image.</returns>
    </member>
    <member name="M:Nez.UI.Image.Draw(Batcher,System.Single)">
      <summary>
   If this method is overridden, the super method or {@link #validate()} should be called to ensure the widget is laid out.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="parentAlpha">Parent alpha.</param>
    </member>
    <member name="M:Nez.UI.Image.Layout">
      <summary>
   Computes and caches any information needed for drawing and, if this element has children, positions and sizes each child,
   calls {@link #invalidate()} any each child whose width or height has changed, and calls {@link #validate()} on each child.
   This method should almost never be called directly, instead {@link #validate()} should be used
   </summary>
    </member>
    <member name="P:Nez.UI.Image.PreferredWidth">
      <summary>
   Gets the width of the preferred.
   </summary>
      <value>The width of the preferred.</value>
    </member>
    <member name="P:Nez.UI.Image.PreferredHeight">
      <summary>
   Gets the height of the preferred.
   </summary>
      <value>The height of the preferred.</value>
    </member>
    <member name="T:Nez.UI.ImageButton">
      <summary>
   A button with a child {@link Image} to display an image. This is useful when the button must be larger than the image and the
   image centered on the button. If the image is the size of the button, a {@link Button} without any children can be used, where
   the {@link Button.ButtonStyle#up}, {@link Button.ButtonStyle#down}, and {@link Button.ButtonStyle#checked} nine patches define
   the image.
   </summary>
    </member>
    <member name="T:Nez.UI.ImageButtonStyle">
      <summary>
   Class ImageButtonStyle.
   Implements the <see cref="T:Nez.UI.ButtonStyle" /></summary>
      <seealso cref="T:Nez.UI.ButtonStyle" />
    </member>
    <member name="M:Nez.UI.ImageButton.#ctor(ImageButtonStyle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ImageButton" /> class.
   </summary>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.ImageButton.#ctor(Skin,System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ImageButton" /> class.
   </summary>
      <param name="skin">The skin.</param>
      <param name="styleName">Name of the style.</param>
    </member>
    <member name="M:Nez.UI.ImageButton.#ctor(IDrawable)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ImageButton" /> class.
   </summary>
      <param name="imageUp">The image up.</param>
    </member>
    <member name="M:Nez.UI.ImageButton.#ctor(IDrawable,IDrawable)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ImageButton" /> class.
   </summary>
      <param name="imageUp">The image up.</param>
      <param name="imageDown">The image down.</param>
    </member>
    <member name="M:Nez.UI.ImageButton.#ctor(IDrawable,IDrawable,IDrawable)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ImageButton" /> class.
   </summary>
      <param name="imageUp">The image up.</param>
      <param name="imageDown">The image down.</param>
      <param name="imageOver">The image over.</param>
    </member>
    <member name="M:Nez.UI.ImageButton.SetStyle(ButtonStyle)">
      <summary>
   Sets the style.
   </summary>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.ImageButton.GetStyle">
      <summary>
   Gets the style.
   </summary>
      <returns>ImageButtonStyle.</returns>
    </member>
    <member name="M:Nez.UI.ImageButton.GetImage">
      <summary>
   Gets the image.
   </summary>
      <returns>Image.</returns>
    </member>
    <member name="M:Nez.UI.ImageButton.GetImageCell">
      <summary>
   Gets the image cell.
   </summary>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.ImageButton.Draw(Batcher,System.Single)">
      <summary>
   If this method is overridden, the super method or {@link #validate()} should be called to ensure the widget is laid out.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="parentAlpha">Parent alpha.</param>
    </member>
    <member name="F:Nez.UI.ImageButtonStyle.ImageUp">
      <summary>
   The image up
   </summary>
    </member>
    <member name="M:Nez.UI.ImageButtonStyle.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ImageButtonStyle" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.ImageButtonStyle.#ctor(IDrawable,IDrawable,IDrawable,IDrawable,IDrawable,IDrawable)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ImageButtonStyle" /> class.
   </summary>
      <param name="up">Up.</param>
      <param name="down">Down.</param>
      <param name="checkked">The checkked.</param>
      <param name="imageUp">The image up.</param>
      <param name="imageDown">The image down.</param>
      <param name="imageChecked">The image checked.</param>
    </member>
    <member name="M:Nez.UI.ImageButtonStyle.Clone">
      <summary>
   Clones this instance.
   </summary>
      <returns>ImageButtonStyle.</returns>
    </member>
    <member name="T:Nez.UI.ImageTextButton">
      <summary>
   Class ImageTextButton.
   Implements the <see cref="T:Nez.UI.Button" /></summary>
      <seealso cref="T:Nez.UI.Button" />
    </member>
    <member name="T:Nez.UI.ImageTextButtonStyle">
      <summary>
   Class ImageTextButtonStyle.
   Implements the <see cref="T:Nez.UI.TextButtonStyle" /></summary>
      <seealso cref="T:Nez.UI.TextButtonStyle" />
    </member>
    <member name="M:Nez.UI.ImageTextButton.#ctor(System.String,ImageTextButtonStyle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ImageTextButton" /> class.
   </summary>
      <param name="text">The text.</param>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.ImageTextButton.#ctor(System.String,Skin,System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ImageTextButton" /> class.
   </summary>
      <param name="text">The text.</param>
      <param name="skin">The skin.</param>
      <param name="styleName">Name of the style.</param>
    </member>
    <member name="M:Nez.UI.ImageTextButton.SetStyle(ImageTextButtonStyle)">
      <summary>
   Sets the style.
   </summary>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.ImageTextButton.GetStyle">
      <summary>
   Gets the style.
   </summary>
      <returns>ImageTextButtonStyle.</returns>
    </member>
    <member name="M:Nez.UI.ImageTextButton.Draw(Batcher,System.Single)">
      <summary>
   If this method is overridden, the super method or {@link #validate()} should be called to ensure the widget is laid out.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="parentAlpha">Parent alpha.</param>
    </member>
    <member name="M:Nez.UI.ImageTextButton.GetImage">
      <summary>
   Gets the image.
   </summary>
      <returns>Image.</returns>
    </member>
    <member name="M:Nez.UI.ImageTextButton.GetImageCell">
      <summary>
   Gets the image cell.
   </summary>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.ImageTextButton.GetLabel">
      <summary>
   Gets the label.
   </summary>
      <returns>Label.</returns>
    </member>
    <member name="M:Nez.UI.ImageTextButton.GetLabelCell">
      <summary>
   Gets the label cell.
   </summary>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.ImageTextButton.SetText(System.String)">
      <summary>
   Sets the text.
   </summary>
      <param name="text">The text.</param>
    </member>
    <member name="M:Nez.UI.ImageTextButton.GetText">
      <summary>
   Gets the text.
   </summary>
      <returns>System.String.</returns>
    </member>
    <member name="F:Nez.UI.ImageTextButtonStyle.ImageUp">
      <summary>
   The image up
   </summary>
    </member>
    <member name="M:Nez.UI.ImageTextButtonStyle.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ImageTextButtonStyle" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.ImageTextButtonStyle.#ctor(IDrawable,IDrawable,IDrawable,BitmapFont)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ImageTextButtonStyle" /> class.
   </summary>
      <param name="up">Up.</param>
      <param name="down">Down.</param>
      <param name="over">The over.</param>
      <param name="font">The font.</param>
    </member>
    <member name="M:Nez.UI.ImageTextButtonStyle.Clone">
      <summary>
   Clones this instance.
   </summary>
      <returns>ImageTextButtonStyle.</returns>
    </member>
    <member name="T:Nez.UI.Label">
      <summary>
   Class Label.
   Implements the <see cref="T:Nez.UI.Element" /></summary>
      <seealso cref="T:Nez.UI.Element" />
    </member>
    <member name="T:Nez.UI.LabelStyle">
      <summary>
   the style for a label
   </summary>
    </member>
    <member name="P:Nez.UI.Label.PreferredWidth">
      <summary>
   Gets the width of the preferred.
   </summary>
      <value>The width of the preferred.</value>
    </member>
    <member name="P:Nez.UI.Label.PreferredHeight">
      <summary>
   Gets the height of the preferred.
   </summary>
      <value>The height of the preferred.</value>
    </member>
    <member name="M:Nez.UI.Label.#ctor(System.String,LabelStyle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Label" /> class.
   </summary>
      <param name="text">The text.</param>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.Label.#ctor(System.String,Skin,System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Label" /> class.
   </summary>
      <param name="text">The text.</param>
      <param name="skin">The skin.</param>
      <param name="styleName">Name of the style.</param>
    </member>
    <member name="M:Nez.UI.Label.#ctor(System.String,BitmapFont,Color)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Label" /> class.
   </summary>
      <param name="text">The text.</param>
      <param name="font">The font.</param>
      <param name="fontColor">Color of the font.</param>
    </member>
    <member name="M:Nez.UI.Label.#ctor(System.String,BitmapFont,Color,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Label" /> class.
   </summary>
      <param name="text">The text.</param>
      <param name="font">The font.</param>
      <param name="fontColor">Color of the font.</param>
      <param name="fontScale">The font scale.</param>
    </member>
    <member name="M:Nez.UI.Label.#ctor(System.String,BitmapFont,Color,System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Label" /> class.
   </summary>
      <param name="text">The text.</param>
      <param name="font">The font.</param>
      <param name="fontColor">Color of the font.</param>
      <param name="fontScaleX">The font scale x.</param>
      <param name="fontScaleY">The font scale y.</param>
    </member>
    <member name="M:Nez.UI.Label.#ctor(System.String,BitmapFont)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Label" /> class.
   </summary>
      <param name="text">The text.</param>
      <param name="font">The font.</param>
    </member>
    <member name="M:Nez.UI.Label.#ctor(System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Label" /> class.
   </summary>
      <param name="text">The text.</param>
    </member>
    <member name="M:Nez.UI.Label.SetStyle(LabelStyle)">
      <summary>
   Sets the style.
   </summary>
      <param name="style">The style.</param>
      <returns>Label.</returns>
    </member>
    <member name="M:Nez.UI.Label.GetStyle">
      <summary>
   Returns the button's style. Modifying the returned style may not have an effect until {@link #setStyle(ButtonStyle)} is called.
   </summary>
      <returns>The style.</returns>
    </member>
    <member name="M:Nez.UI.Label.Invalidate">
      <summary>
   Invalidates this element's layout, causing {@link #layout()} to happen the next time {@link #validate()} is called. This
   method should be called when state changes in the element that requires a layout but does not change the minimum, preferred,
   maximum, or actual size of the element (meaning it does not affect the parent element's layout).
   </summary>
    </member>
    <member name="M:Nez.UI.Label.SetText(System.String)">
      <summary>
   Sets the text.
   </summary>
      <param name="text">The text.</param>
      <returns>Label.</returns>
    </member>
    <member name="M:Nez.UI.Label.GetText">
      <summary>
   Gets the text.
   </summary>
      <returns>System.String.</returns>
    </member>
    <member name="M:Nez.UI.Label.SetBackground(IDrawable)">
      <summary>
   background may be null to clear the background.
   </summary>
      <param name="background">Background.</param>
      <returns>this</returns>
    </member>
    <member name="M:Nez.UI.Label.SetAlignment(Align)">
      <summary>
   alignment Aligns all the text within the label (default left center) and each line of text horizontally (default left)
   </summary>
      <param name="alignment">Alignment.</param>
      <returns>Label.</returns>
    </member>
    <member name="M:Nez.UI.Label.SetAlignment(Align,Align)">
      <summary>
   labelAlign Aligns all the text within the label (default left center).
   lineAlign Aligns each line of text horizontally (default left).
   </summary>
      <param name="labelAlign">Label align.</param>
      <param name="lineAlign">Line align.</param>
      <returns>Label.</returns>
    </member>
    <member name="M:Nez.UI.Label.SetFontColor(Color)">
      <summary>
   Sets the color of the font.
   </summary>
      <param name="color">The color.</param>
      <returns>Label.</returns>
    </member>
    <member name="M:Nez.UI.Label.SetFontScale(System.Single)">
      <summary>
   Sets the font scale.
   </summary>
      <param name="fontScale">The font scale.</param>
      <returns>Label.</returns>
    </member>
    <member name="M:Nez.UI.Label.SetFontScale(System.Single,System.Single)">
      <summary>
   Sets the font scale.
   </summary>
      <param name="fontScaleX">The font scale x.</param>
      <param name="fontScaleY">The font scale y.</param>
      <returns>Label.</returns>
    </member>
    <member name="M:Nez.UI.Label.SetEllipsis(System.String)">
      <summary>
   When non-null the text will be truncated "..." if it does not fit within the width of the label. Wrapping will not occur
   when ellipsis is enabled. Default is null.
   </summary>
      <param name="ellipsis">Ellipsis.</param>
      <returns>Label.</returns>
    </member>
    <member name="M:Nez.UI.Label.SetEllipsis(System.Boolean)">
      <summary>
   When true the text will be truncated "..." if it does not fit within the width of the label. Wrapping will not occur when
   ellipsis is true. Default is false.
   </summary>
      <param name="ellipsis">Ellipsis.</param>
      <returns>Label.</returns>
    </member>
    <member name="M:Nez.UI.Label.SetWrap(System.Boolean)">
      <summary>
   should the text be wrapped?
   </summary>
      <param name="shouldWrap">If set to <c>true</c> should wrap.</param>
      <returns>Label.</returns>
    </member>
    <member name="M:Nez.UI.Label.Layout">
      <summary>
   Computes and caches any information needed for drawing and, if this element has children, positions and sizes each child,
   calls {@link #invalidate()} any each child whose width or height has changed, and calls {@link #validate()} on each child.
   This method should almost never be called directly, instead {@link #validate()} should be used
   </summary>
    </member>
    <member name="M:Nez.UI.Label.Draw(Batcher,System.Single)">
      <summary>
   If this method is overridden, the super method or {@link #validate()} should be called to ensure the widget is laid out.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="parentAlpha">Parent alpha.</param>
    </member>
    <member name="F:Nez.UI.LabelStyle.FontColor">
      <summary>
   The font color
   </summary>
    </member>
    <member name="F:Nez.UI.LabelStyle.Font">
      <summary>
   The font
   </summary>
    </member>
    <member name="F:Nez.UI.LabelStyle.Background">
      <summary>
   The background
   </summary>
    </member>
    <member name="F:Nez.UI.LabelStyle.FontScaleX">
      <summary>
   The font scale x
   </summary>
    </member>
    <member name="F:Nez.UI.LabelStyle.FontScaleY">
      <summary>
   The font scale y
   </summary>
    </member>
    <member name="P:Nez.UI.LabelStyle.FontScale">
      <summary>
   Sets the font scale.
   </summary>
      <value>The font scale.</value>
    </member>
    <member name="M:Nez.UI.LabelStyle.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.LabelStyle" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.LabelStyle.#ctor(BitmapFont,Color)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.LabelStyle" /> class.
   </summary>
      <param name="font">The font.</param>
      <param name="fontColor">Color of the font.</param>
    </member>
    <member name="M:Nez.UI.LabelStyle.#ctor(BitmapFont,Color,System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.LabelStyle" /> class.
   </summary>
      <param name="font">The font.</param>
      <param name="fontColor">Color of the font.</param>
      <param name="fontScaleX">The font scale x.</param>
      <param name="fontScaleY">The font scale y.</param>
    </member>
    <member name="M:Nez.UI.LabelStyle.#ctor(BitmapFont,Color,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.LabelStyle" /> class.
   </summary>
      <param name="font">The font.</param>
      <param name="fontColor">Color of the font.</param>
      <param name="fontScale">The font scale.</param>
    </member>
    <member name="M:Nez.UI.LabelStyle.#ctor(Color)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.LabelStyle" /> class.
   </summary>
      <param name="fontColor">Color of the font.</param>
    </member>
    <member name="M:Nez.UI.LabelStyle.Clone">
      <summary>
   Clones this instance.
   </summary>
      <returns>LabelStyle.</returns>
    </member>
    <member name="T:Nez.UI.ListBox`1">
      <summary>
   displays textual items and highlights the currently selected item
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:Nez.UI.ListBoxStyle">
      <summary>
   Class ListBoxStyle.
   </summary>
    </member>
    <member name="E:Nez.UI.ListBox`1.OnChanged">
      <summary>
   Occurs when [on changed].
   </summary>
    </member>
    <member name="M:Nez.UI.ListBox`1.#ctor(Skin,System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ListBox`1" /> class.
   </summary>
      <param name="skin">The skin.</param>
      <param name="styleName">Name of the style.</param>
    </member>
    <member name="M:Nez.UI.ListBox`1.#ctor(ListBoxStyle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ListBox`1" /> class.
   </summary>
      <param name="style">The style.</param>
    </member>
    <member name="P:Nez.UI.ListBox`1.PreferredWidth">
      <summary>
   Gets the width of the preferred.
   </summary>
      <value>The width of the preferred.</value>
    </member>
    <member name="P:Nez.UI.ListBox`1.PreferredHeight">
      <summary>
   Gets the height of the preferred.
   </summary>
      <value>The height of the preferred.</value>
    </member>
    <member name="M:Nez.UI.ListBox`1.Layout">
      <summary>
   Computes and caches any information needed for drawing and, if this element has children, positions and sizes each child,
   calls {@link #invalidate()} any each child whose width or height has changed, and calls {@link #validate()} on each child.
   This method should almost never be called directly, instead {@link #validate()} should be used
   </summary>
    </member>
    <member name="M:Nez.UI.ListBox`1.Draw(Batcher,System.Single)">
      <summary>
   If this method is overridden, the super method or {@link #validate()} should be called to ensure the widget is laid out.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="parentAlpha">Parent alpha.</param>
    </member>
    <member name="M:Nez.UI.ListBox`1.SetStyle(ListBoxStyle)">
      <summary>
   Sets the style.
   </summary>
      <param name="style">The style.</param>
      <returns>ListBox&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.UI.ListBox`1.GetStyle">
      <summary>
   Returns the list's style. Modifying the returned style may not have an effect until setStyle(ListStyle) is called
   </summary>
      <returns>The style.</returns>
    </member>
    <member name="M:Nez.UI.ListBox`1.GetSelection">
      <summary>
   Gets the selection.
   </summary>
      <returns>ArraySelection&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.UI.ListBox`1.GetSelected">
      <summary>
   Returns the first selected item, or null
   </summary>
      <returns>The selected.</returns>
    </member>
    <member name="M:Nez.UI.ListBox`1.SetSelected(`0)">
      <summary>
   Sets the selection to only the passed item, if it is a possible choice.
   </summary>
      <param name="item">Item.</param>
      <returns>ListBox&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.UI.ListBox`1.GetSelectedIndex">
      <summary>
   gets the index of the first selected item. The top item has an index of 0. Nothing selected has an index of -1.
   </summary>
      <returns>The selected index.</returns>
    </member>
    <member name="M:Nez.UI.ListBox`1.SetSelectedIndex(System.Int32)">
      <summary>
   Sets the selection to only the selected index
   </summary>
      <param name="index">Index.</param>
      <returns>ListBox&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.UI.ListBox`1.SetItems(`0[])">
      <summary>
   Sets the items.
   </summary>
      <param name="newItems">The new items.</param>
      <returns>ListBox&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.UI.ListBox`1.SetItems(IList{`0})">
      <summary>
   Sets the items visible in the list, clearing the selection if it is no longer valid. If a selection is
   ArraySelection#getRequired(), the first item is selected.
   </summary>
      <param name="newItems">New items.</param>
      <returns>ListBox&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.UI.ListBox`1.ClearItems">
      <summary>
   Clears the items.
   </summary>
    </member>
    <member name="M:Nez.UI.ListBox`1.GetItems">
      <summary>
   Returns the internal items array. If modified, {@link #setItems(Array)} must be called to reflect the changes.
   </summary>
      <returns>The items.</returns>
    </member>
    <member name="M:Nez.UI.ListBox`1.GetItemHeight">
      <summary>
   Gets the height of the item.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.ListBox`1.SetCullingArea(Rectangle)">
      <summary>
   Sets the culling area.
   </summary>
      <param name="cullingArea">The culling area.</param>
      <returns>ListBox&lt;T&gt;.</returns>
    </member>
    <member name="F:Nez.UI.ListBoxStyle.Font">
      <summary>
   The font
   </summary>
    </member>
    <member name="F:Nez.UI.ListBoxStyle.FontColorSelected">
      <summary>
   The font color selected
   </summary>
    </member>
    <member name="F:Nez.UI.ListBoxStyle.FontColorUnselected">
      <summary>
   The font color unselected
   </summary>
    </member>
    <member name="F:Nez.UI.ListBoxStyle.FontColorHovered">
      <summary>
   The font color hovered
   </summary>
    </member>
    <member name="F:Nez.UI.ListBoxStyle.Selection">
      <summary>
   The selection
   </summary>
    </member>
    <member name="F:Nez.UI.ListBoxStyle.HoverSelection">
      <summary>
   The hover selection
   </summary>
    </member>
    <member name="F:Nez.UI.ListBoxStyle.Background">
      <summary>
   The background
   </summary>
    </member>
    <member name="M:Nez.UI.ListBoxStyle.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ListBoxStyle" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.ListBoxStyle.#ctor(BitmapFont,Color,Color,IDrawable)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ListBoxStyle" /> class.
   </summary>
      <param name="font">The font.</param>
      <param name="fontColorSelected">The font color selected.</param>
      <param name="fontColorUnselected">The font color unselected.</param>
      <param name="selection">The selection.</param>
    </member>
    <member name="M:Nez.UI.ListBoxStyle.Clone">
      <summary>
   Clones this instance.
   </summary>
      <returns>ListBoxStyle.</returns>
    </member>
    <member name="T:Nez.UI.NumberField">
      <summary>
   Class NumberField.
   Implements the <see cref="T:Nez.UI.Table" />
   Implements the <see cref="T:Nez.UI.IInputListener" /></summary>
      <seealso cref="T:Nez.UI.Table" />
      <seealso cref="T:Nez.UI.IInputListener" />
    </member>
    <member name="T:Nez.UI.NumberFieldStyle">
      <summary>
   Class NumberFieldStyle.
   Implements the <see cref="T:Nez.UI.TextFieldStyle" /></summary>
      <seealso cref="T:Nez.UI.TextFieldStyle" />
    </member>
    <member name="E:Nez.UI.NumberField.OnNumberChanged">
      <summary>
   Occurs when [on number changed].
   </summary>
    </member>
    <member name="M:Nez.UI.NumberField.#ctor(System.Single,System.Single,System.Single,System.Single,System.Boolean,NumberFieldStyle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.NumberField" /> class.
   </summary>
      <param name="initial">The initial.</param>
      <param name="min">The minimum.</param>
      <param name="max">The maximum.</param>
      <param name="step">The step.</param>
      <param name="showButtons">if set to <c>true</c> [show buttons].</param>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.NumberField.GetDecreaseButton">
      <summary>
   Gets the decrease button.
   </summary>
      <returns>TextButton.</returns>
    </member>
    <member name="M:Nez.UI.NumberField.GetIncreaseButton">
      <summary>
   Gets the increase button.
   </summary>
      <returns>TextButton.</returns>
    </member>
    <member name="M:Nez.UI.NumberField.GetTextField">
      <summary>
   Gets the text field.
   </summary>
      <returns>TextField.</returns>
    </member>
    <member name="M:Nez.UI.NumberField.GetDecreaseButtonCell">
      <summary>
   Gets the decrease button cell.
   </summary>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.NumberField.GetIncreaseButtonCell">
      <summary>
   Gets the increase button cell.
   </summary>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.NumberField.GetNumberFieldCell">
      <summary>
   Gets the number field cell.
   </summary>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.NumberField.SetNumber(System.Single)">
      <summary>
   Sets the number.
   </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Nez.UI.NumberField.GetNumber">
      <summary>
   Gets the number.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.NumberField.#ctor(System.Single,System.Single,System.Single,System.Single,System.Boolean,Skin,System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.NumberField" /> class.
   </summary>
      <param name="initial">The initial.</param>
      <param name="min">The minimum.</param>
      <param name="max">The maximum.</param>
      <param name="step">The step.</param>
      <param name="showButtons">if set to <c>true</c> [show buttons].</param>
      <param name="skin">The skin.</param>
      <param name="styleName">Name of the style.</param>
    </member>
    <member name="M:Nez.UI.NumberField.SetMax(System.Single)">
      <summary>
   Sets the maximum.
   </summary>
      <param name="max">The maximum.</param>
    </member>
    <member name="M:Nez.UI.NumberField.SetStep(System.Single)">
      <summary>
   Sets the step.
   </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Nez.UI.NumberField.SetMin(System.Single)">
      <summary>
   Sets the minimum.
   </summary>
      <param name="min">The minimum.</param>
    </member>
    <member name="M:Nez.UI.NumberField.OnMouseEnter">
      <summary>
   Called when [mouse enter].
   </summary>
    </member>
    <member name="M:Nez.UI.NumberField.OnMouseExit">
      <summary>
   Called when [mouse exit].
   </summary>
    </member>
    <member name="M:Nez.UI.NumberField.OnLeftMousePressed(Vector2)">
      <summary>
   if true is returned then onMouseDown/Up will be called else they will not be called
   </summary>
      <param name="mousePos">Mouse position.</param>
      <returns>
        <c>true</c>, if mouse pressed was oned, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.NumberField.OnRightMousePressed(Vector2)">
      <summary>
   if true is returned then onMouseDown/Up will be called else they will not be called
   </summary>
      <param name="mousePos">Mouse position.</param>
      <returns>
        <c>true</c>, if right mouse pressed was oned, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.NumberField.OnMouseMoved(Vector2)">
      <summary>
   called when the mouse moves only on an element that returned true for onMousePressed. It is safe to call stage.removeInputFocusListener
   here if you are uninterested in the onMouseUp event.
   </summary>
      <param name="mousePos">Mouse position.</param>
    </member>
    <member name="M:Nez.UI.NumberField.OnLeftMouseUp(Vector2)">
      <summary>
   called when the left mouse button is released
   </summary>
      <param name="mousePos">Mouse position.</param>
    </member>
    <member name="M:Nez.UI.NumberField.OnRightMouseUp(Vector2)">
      <summary>
   called when the right mouse button is released
   </summary>
      <param name="mousePos">Mouse position.</param>
    </member>
    <member name="M:Nez.UI.NumberField.OnMouseScrolled(System.Int32)">
      <summary>
   if true is returned the scroll event will be consumed by the Element
   </summary>
      <param name="mouseWheelDelta">The mouse wheel delta.</param>
      <returns>The mouse scrolled.</returns>
    </member>
    <member name="F:Nez.UI.NumberFieldStyle.ImageUp">
      <summary>
   The image up
   </summary>
    </member>
    <member name="F:Nez.UI.NumberFieldStyle.DecreaseButtonStyle">
      <summary>
   The decrease button style
   </summary>
    </member>
    <member name="F:Nez.UI.NumberFieldStyle.IncreaseButtonStyle">
      <summary>
   The increase button style
   </summary>
    </member>
    <member name="M:Nez.UI.NumberFieldStyle.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.NumberFieldStyle" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.NumberFieldStyle.#ctor(BitmapFont,Color,IDrawable,IDrawable,IDrawable,TextButtonStyle,TextButtonStyle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.NumberFieldStyle" /> class.
   </summary>
      <param name="font">The font.</param>
      <param name="fontColor">Color of the font.</param>
      <param name="cursor">The cursor.</param>
      <param name="selection">The selection.</param>
      <param name="background">The background.</param>
      <param name="decreaseButtonStyle">The decrease button style.</param>
      <param name="increaseButtonStyle">The increase button style.</param>
    </member>
    <member name="M:Nez.UI.NumberFieldStyle.Clone">
      <summary>
   Clones this instance.
   </summary>
      <returns>TextFieldStyle.</returns>
    </member>
    <member name="T:Nez.UI.ProgressBar">
      <summary>
   Class ProgressBar.
   Implements the <see cref="T:Nez.UI.Element" /></summary>
      <seealso cref="T:Nez.UI.Element" />
    </member>
    <member name="T:Nez.UI.ProgressBarStyle">
      <summary>
   The style for a progress bar
   </summary>
    </member>
    <member name="E:Nez.UI.ProgressBar.OnChanged">
      <summary>
   Occurs when [on changed].
   </summary>
    </member>
    <member name="F:Nez.UI.ProgressBar.Disabled">
      <summary>
   The disabled
   </summary>
    </member>
    <member name="P:Nez.UI.ProgressBar.PreferredWidth">
      <summary>
   Gets the width of the preferred.
   </summary>
      <value>The width of the preferred.</value>
    </member>
    <member name="P:Nez.UI.ProgressBar.PreferredHeight">
      <summary>
   Gets the height of the preferred.
   </summary>
      <value>The height of the preferred.</value>
    </member>
    <member name="P:Nez.UI.ProgressBar.PreferredLength">
      <summary>
   Gets or sets the length of the preferred.
   </summary>
      <value>The length of the preferred.</value>
    </member>
    <member name="P:Nez.UI.ProgressBar.Min">
      <summary>
   Determines the minimum of the parameters.
   </summary>
      <value>The minimum.</value>
    </member>
    <member name="P:Nez.UI.ProgressBar.Max">
      <summary>
   Determines the maximum of the parameters.
   </summary>
      <value>The maximum.</value>
    </member>
    <member name="P:Nez.UI.ProgressBar.StepSize">
      <summary>
   Gets or sets the size of the step.
   </summary>
      <value>The size of the step.</value>
    </member>
    <member name="P:Nez.UI.ProgressBar.Value">
      <summary>
   Gets or sets the value.
   </summary>
      <value>The value.</value>
    </member>
    <member name="F:Nez.UI.ProgressBar.SnapValues">
      <summary>
   The snap values
   </summary>
    </member>
    <member name="F:Nez.UI.ProgressBar.SnapThreshold">
      <summary>
   The snap threshold
   </summary>
    </member>
    <member name="F:Nez.UI.ProgressBar.ShiftIgnoresSnap">
      <summary>
   The shift ignores snap
   </summary>
    </member>
    <member name="M:Nez.UI.ProgressBar.#ctor(System.Single,System.Single,System.Single,System.Boolean,ProgressBarStyle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ProgressBar" /> class.
   </summary>
      <param name="min">The minimum.</param>
      <param name="max">The maximum.</param>
      <param name="stepSize">Size of the step.</param>
      <param name="vertical">if set to <c>true</c> [vertical].</param>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.ProgressBar.#ctor(System.Single,System.Single,System.Single,System.Boolean,Skin,System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ProgressBar" /> class.
   </summary>
      <param name="min">The minimum.</param>
      <param name="max">The maximum.</param>
      <param name="stepSize">Size of the step.</param>
      <param name="vertical">if set to <c>true</c> [vertical].</param>
      <param name="skin">The skin.</param>
      <param name="styleName">Name of the style.</param>
    </member>
    <member name="M:Nez.UI.ProgressBar.#ctor(Skin,System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ProgressBar" /> class.
   </summary>
      <param name="skin">The skin.</param>
      <param name="styleName">Name of the style.</param>
    </member>
    <member name="M:Nez.UI.ProgressBar.SetStyle(ProgressBarStyle)">
      <summary>
   Sets the style.
   </summary>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.ProgressBar.GetStyle">
      <summary>
   Returns the progress bar's style. Modifying the returned style may not have an effect until
   {@link #setStyle(ProgressBarStyle)} is called.
   </summary>
      <returns>The style.</returns>
    </member>
    <member name="M:Nez.UI.ProgressBar.SetValue(System.Single,System.Boolean)">
      <summary>
   Sets the progress bar position, rounded to the nearest step size and clamped to the minimum and maximum values.
   </summary>
      <param name="value">Value.</param>
      <param name="ignoreSnap">If set to <c>true</c> we ignore value snapping.</param>
      <returns>ProgressBar.</returns>
    </member>
    <member name="M:Nez.UI.ProgressBar.SetStepSize(System.Single)">
      <summary>
   Sets the size of the step.
   </summary>
      <param name="stepSize">Size of the step.</param>
      <returns>ProgressBar.</returns>
    </member>
    <member name="M:Nez.UI.ProgressBar.SetMinMax(System.Single,System.Single)">
      <summary>
   Sets the minimum maximum.
   </summary>
      <param name="min">The minimum.</param>
      <param name="max">The maximum.</param>
      <returns>ProgressBar.</returns>
    </member>
    <member name="M:Nez.UI.ProgressBar.SetTotalSteps(System.Int32)">
      <summary>
   Sets stepSize to a value that will evenly divide this progress bar into specified amount of steps.
   </summary>
      <param name="totalSteps">Total amount of steps.</param>
      <returns>ProgressBar.</returns>
    </member>
    <member name="M:Nez.UI.ProgressBar.Draw(Batcher,System.Single)">
      <summary>
   If this method is overridden, the super method or {@link #validate()} should be called to ensure the widget is laid out.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="parentAlpha">Parent alpha.</param>
    </member>
    <member name="M:Nez.UI.ProgressBar.GetVisualPercent">
      <summary>
   Gets the visual percent.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="F:Nez.UI.ProgressBarStyle.Background">
      <summary>
   The progress bar background, stretched only in one direction. Optional.
   </summary>
    </member>
    <member name="F:Nez.UI.ProgressBarStyle.DisabledBackground">
      <summary>
   Optional
   </summary>
    </member>
    <member name="F:Nez.UI.ProgressBarStyle.Knob">
      <summary>
   Optional, centered on the background.
   </summary>
    </member>
    <member name="F:Nez.UI.ProgressBarStyle.KnobBefore">
      <summary>
   Optional
   </summary>
    </member>
    <member name="M:Nez.UI.ProgressBarStyle.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ProgressBarStyle" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.ProgressBarStyle.#ctor(IDrawable,IDrawable)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.ProgressBarStyle" /> class.
   </summary>
      <param name="background">The background.</param>
      <param name="knob">The knob.</param>
    </member>
    <member name="M:Nez.UI.ProgressBarStyle.Create(Color,Color)">
      <summary>
   Creates the specified knob before color.
   </summary>
      <param name="knobBeforeColor">Color of the knob before.</param>
      <param name="knobAfterColor">Color of the knob after.</param>
      <returns>ProgressBarStyle.</returns>
    </member>
    <member name="M:Nez.UI.ProgressBarStyle.CreateWithKnob(Color,Color)">
      <summary>
   Creates the with knob.
   </summary>
      <param name="backgroundColor">Color of the background.</param>
      <param name="knobColor">Color of the knob.</param>
      <returns>ProgressBarStyle.</returns>
    </member>
    <member name="M:Nez.UI.ProgressBarStyle.Clone">
      <summary>
   Clones this instance.
   </summary>
      <returns>ProgressBarStyle.</returns>
    </member>
    <member name="T:Nez.UI.SelectBox`1">
      <summary>
   Class SelectBox.
   Implements the <see cref="T:Nez.UI.Element" />
   Implements the <see cref="T:Nez.UI.IInputListener" /></summary>
      <typeparam name="T">
      </typeparam>
      <seealso cref="T:Nez.UI.Element" />
      <seealso cref="T:Nez.UI.IInputListener" />
    </member>
    <member name="T:Nez.UI.SelectBoxStyle">
      <summary>
   Class SelectBoxStyle.
   </summary>
    </member>
    <member name="F:Nez.UI.SelectBox`1.OnChanged">
      <summary>
   The on changed
   </summary>
    </member>
    <member name="M:Nez.UI.SelectBox`1.#ctor(Skin)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.SelectBox`1" /> class.
   </summary>
      <param name="skin">The skin.</param>
    </member>
    <member name="M:Nez.UI.SelectBox`1.#ctor(Skin,System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.SelectBox`1" /> class.
   </summary>
      <param name="skin">The skin.</param>
      <param name="styleName">Name of the style.</param>
    </member>
    <member name="M:Nez.UI.SelectBox`1.#ctor(SelectBoxStyle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.SelectBox`1" /> class.
   </summary>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.SelectBox`1.Layout">
      <summary>
   Computes and caches any information needed for drawing and, if this element has children, positions and sizes each child,
   calls {@link #invalidate()} any each child whose width or height has changed, and calls {@link #validate()} on each child.
   This method should almost never be called directly, instead {@link #validate()} should be used
   </summary>
    </member>
    <member name="M:Nez.UI.SelectBox`1.Draw(Batcher,System.Single)">
      <summary>
   If this method is overridden, the super method or {@link #validate()} should be called to ensure the widget is laid out.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="parentAlpha">Parent alpha.</param>
    </member>
    <member name="P:Nez.UI.SelectBox`1.PreferredWidth">
      <summary>
   Gets the width of the preferred.
   </summary>
      <value>The width of the preferred.</value>
    </member>
    <member name="P:Nez.UI.SelectBox`1.PreferredHeight">
      <summary>
   Gets the height of the preferred.
   </summary>
      <value>The height of the preferred.</value>
    </member>
    <member name="M:Nez.UI.SelectBox`1.SetMaxListCount(System.Int32)">
      <summary>
   Set the max number of items to display when the select box is opened. Set to 0 (the default) to display as many as fit in
   the stage height.
   </summary>
      <param name="maxListCount">Max list count.</param>
      <returns>The max list count.</returns>
    </member>
    <member name="M:Nez.UI.SelectBox`1.GetMaxListCount">
      <summary>
   Gets the maximum list count.
   </summary>
      <returns>System.Int32.</returns>
      <font color="red">Badly formed XML comment.</font>
    </member>
    <member name="M:Nez.UI.SelectBox`1.SetStyle(SelectBoxStyle)">
      <summary>
   Sets the style.
   </summary>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.SelectBox`1.GetStyle">
      <summary>
   Returns the select box's style. Modifying the returned style may not have an effect until setStyle(SelectBoxStyle)
   is called.
   </summary>
      <returns>The style.</returns>
    </member>
    <member name="M:Nez.UI.SelectBox`1.SetItems(`0[])">
      <summary>
   Set the backing Array that makes up the choices available in the SelectBox
   </summary>
      <param name="newItems">New items.</param>
      <returns>The items.</returns>
    </member>
    <member name="M:Nez.UI.SelectBox`1.SetItems(List{`0})">
      <summary>
   Sets the items visible in the select box
   </summary>
      <param name="newItems">New items.</param>
      <returns>The items.</returns>
    </member>
    <member name="M:Nez.UI.SelectBox`1.ClearItems">
      <summary>
   Clears the items.
   </summary>
    </member>
    <member name="M:Nez.UI.SelectBox`1.GetItems">
      <summary>
   Returns the internal items array. If modified, setItems(Array) must be called to reflect the changes.
   </summary>
      <returns>The items.</returns>
    </member>
    <member name="M:Nez.UI.SelectBox`1.GetSelection">
      <summary>
   Get the set of selected items, useful when multiple items are selected returns a Selection object containing the
   selected elements
   </summary>
      <returns>The selection.</returns>
    </member>
    <member name="M:Nez.UI.SelectBox`1.GetSelected">
      <summary>
   Returns the first selected item, or null. For multiple selections use SelectBox#getSelection()
   </summary>
      <returns>The selected.</returns>
    </member>
    <member name="M:Nez.UI.SelectBox`1.SetSelected(`0)">
      <summary>
   Sets the selection to only the passed item, if it is a possible choice, else selects the first item.
   </summary>
      <param name="item">Item.</param>
      <returns>The selected.</returns>
    </member>
    <member name="M:Nez.UI.SelectBox`1.GetSelectedIndex">
      <summary>
   returns The index of the first selected item. The top item has an index of 0. Nothing selected has an index of -1.
   </summary>
      <returns>The selected index.</returns>
    </member>
    <member name="M:Nez.UI.SelectBox`1.SetSelectedIndex(System.Int32)">
      <summary>
   Sets the selection to only the selected index
   </summary>
      <param name="index">Index.</param>
      <returns>The selected index.</returns>
    </member>
    <member name="M:Nez.UI.SelectBox`1.SetDisabled(System.Boolean)">
      <summary>
   Sets the disabled.
   </summary>
      <param name="disabled">if set to <c>true</c> [disabled].</param>
    </member>
    <member name="M:Nez.UI.SelectBox`1.IsDisabled">
      <summary>
   Determines whether this instance is disabled.
   </summary>
      <returns>
        <c>true</c> if this instance is disabled; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.SelectBox`1.ShowList">
      <summary>
   Shows the list.
   </summary>
    </member>
    <member name="M:Nez.UI.SelectBox`1.HideList">
      <summary>
   Hides the list.
   </summary>
    </member>
    <member name="M:Nez.UI.SelectBox`1.GetListBox">
      <summary>
   Returns the ListBox shown when the select box is open
   </summary>
      <returns>The list.</returns>
    </member>
    <member name="M:Nez.UI.SelectBox`1.SetScrollingDisabled(System.Boolean)">
      <summary>
   Disables scrolling of the list shown when the select box is open.
   </summary>
      <param name="y">The y coordinate.</param>
      <returns>The scrolling disabled.</returns>
    </member>
    <member name="M:Nez.UI.SelectBox`1.GetScrollPane">
      <summary>
   Returns the scroll pane containing the list that is shown when the select box is open.
   </summary>
      <returns>The scroll pane.</returns>
    </member>
    <member name="M:Nez.UI.SelectBox`1.OnShow(Element,System.Boolean)">
      <summary>
   Called when [show].
   </summary>
      <param name="selectBoxList">The select box list.</param>
      <param name="below">if set to <c>true</c> [below].</param>
    </member>
    <member name="M:Nez.UI.SelectBox`1.OnHide(Element)">
      <summary>
   Called when [hide].
   </summary>
      <param name="selectBoxList">The select box list.</param>
    </member>
    <member name="F:Nez.UI.SelectBoxStyle.Font">
      <summary>
   The font
   </summary>
    </member>
    <member name="F:Nez.UI.SelectBoxStyle.FontColor">
      <summary>
   The font color
   </summary>
    </member>
    <member name="F:Nez.UI.SelectBoxStyle.DisabledFontColor">
      <summary>
   The disabled font color
   </summary>
    </member>
    <member name="F:Nez.UI.SelectBoxStyle.Background">
      <summary>
   The background
   </summary>
    </member>
    <member name="F:Nez.UI.SelectBoxStyle.ScrollStyle">
      <summary>
   The scroll style
   </summary>
    </member>
    <member name="F:Nez.UI.SelectBoxStyle.ListStyle">
      <summary>
   The list style
   </summary>
    </member>
    <member name="F:Nez.UI.SelectBoxStyle.BackgroundOver">
      <summary>
   The background over
   </summary>
    </member>
    <member name="M:Nez.UI.SelectBoxStyle.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.SelectBoxStyle" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.SelectBoxStyle.#ctor(BitmapFont,Color,IDrawable,ScrollPaneStyle,ListBoxStyle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.SelectBoxStyle" /> class.
   </summary>
      <param name="font">The font.</param>
      <param name="fontColor">Color of the font.</param>
      <param name="background">The background.</param>
      <param name="scrollStyle">The scroll style.</param>
      <param name="listStyle">The list style.</param>
    </member>
    <member name="T:Nez.UI.SelectBoxList`1">
      <summary>
   Class SelectBoxList.
   Implements the <see cref="T:Nez.UI.ScrollPane" /></summary>
      <typeparam name="T">
      </typeparam>
      <seealso cref="T:Nez.UI.ScrollPane" />
    </member>
    <member name="F:Nez.UI.SelectBoxList`1.MaxListCount">
      <summary>
   The maximum list count
   </summary>
    </member>
    <member name="F:Nez.UI.SelectBoxList`1.ListBox">
      <summary>
   The ListBox
   </summary>
    </member>
    <member name="M:Nez.UI.SelectBoxList`1.#ctor(SelectBox{`0})">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.SelectBoxList`1" /> class.
   </summary>
      <param name="selectBox">The select box.</param>
    </member>
    <member name="M:Nez.UI.SelectBoxList`1.Show(Stage)">
      <summary>
   Shows the specified stage.
   </summary>
      <param name="stage">The stage.</param>
    </member>
    <member name="M:Nez.UI.SelectBoxList`1.Hide">
      <summary>
   Hides this instance.
   </summary>
    </member>
    <member name="M:Nez.UI.SelectBoxList`1.Draw(Batcher,System.Single)">
      <summary>
   If this method is overridden, the super method or {@link #validate()} should be called to ensure the widget is laid out.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="parentAlpha">Parent alpha.</param>
    </member>
    <member name="T:Nez.UI.Slider">
      <summary>
   Class Slider.
   Implements the <see cref="T:Nez.UI.ProgressBar" />
   Implements the <see cref="T:Nez.UI.IInputListener" />
   Implements the <see cref="T:Nez.UI.IGamepadFocusable" /></summary>
      <seealso cref="T:Nez.UI.ProgressBar" />
      <seealso cref="T:Nez.UI.IInputListener" />
      <seealso cref="T:Nez.UI.IGamepadFocusable" />
    </member>
    <member name="T:Nez.UI.SliderStyle">
      <summary>
   Class SliderStyle.
   Implements the <see cref="T:Nez.UI.ProgressBarStyle" /></summary>
      <seealso cref="T:Nez.UI.ProgressBarStyle" />
    </member>
    <member name="F:Nez.UI.Slider.SliderBoundaryThreshold">
      <summary>
   the maximum distance outside the slider the mouse can move when pressing it to cause it to be unfocused
   </summary>
    </member>
    <member name="M:Nez.UI.Slider.#ctor(System.Single,System.Single,System.Single,System.Boolean,SliderStyle)">
      <summary>
   Creates a new slider. It's width is determined by the given prefWidth parameter, its height is determined by the maximum of
   the height of either the slider {@link NinePatch} or slider handle {@link TextureRegion}. The min and max values determine
   the range the values of this slider can take on, the stepSize parameter specifies the distance between individual values.
   E.g. min could be 4, max could be 10 and stepSize could be 0.2, giving you a total of 30 values, 4.0 4.2, 4.4 and so on.
   </summary>
      <param name="min">Minimum.</param>
      <param name="max">Max.</param>
      <param name="stepSize">Step size.</param>
      <param name="vertical">If set to <c>true</c> vertical.</param>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.Slider.#ctor(System.Single,System.Single,System.Single,System.Boolean,Skin,System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Slider" /> class.
   </summary>
      <param name="min">The minimum.</param>
      <param name="max">The maximum.</param>
      <param name="stepSize">Size of the step.</param>
      <param name="vertical">if set to <c>true</c> [vertical].</param>
      <param name="skin">The skin.</param>
      <param name="styleName">Name of the style.</param>
    </member>
    <member name="M:Nez.UI.Slider.#ctor(Skin,System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Slider" /> class.
   </summary>
      <param name="skin">The skin.</param>
      <param name="styleName">Name of the style.</param>
    </member>
    <member name="M:Nez.UI.Slider.#ctor(Skin,System.String,System.Single,System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Slider" /> class.
   </summary>
      <param name="skin">The skin.</param>
      <param name="styleName">Name of the style.</param>
      <param name="min">The minimum.</param>
      <param name="max">The maximum.</param>
      <param name="step">The step.</param>
    </member>
    <member name="P:Nez.UI.Slider.ShouldUseExplicitFocusableControl">
      <summary>
   Gets or sets a value indicating whether [should use explicit focusable control].
   </summary>
      <value>
        <c>true</c> if [should use explicit focusable control]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.UI.Slider.GamepadUpElement">
      <summary>
   Gets or sets the gamepad up element.
   </summary>
      <value>The gamepad up element.</value>
    </member>
    <member name="P:Nez.UI.Slider.GamepadDownElement">
      <summary>
   Gets or sets the gamepad down element.
   </summary>
      <value>The gamepad down element.</value>
    </member>
    <member name="P:Nez.UI.Slider.GamepadLeftElement">
      <summary>
   Gets or sets the gamepad left element.
   </summary>
      <value>The gamepad left element.</value>
    </member>
    <member name="P:Nez.UI.Slider.GamepadRightElement">
      <summary>
   Gets or sets the gamepad right element.
   </summary>
      <value>The gamepad right element.</value>
    </member>
    <member name="M:Nez.UI.Slider.EnableExplicitFocusableControl(IGamepadFocusable,IGamepadFocusable,IGamepadFocusable,IGamepadFocusable)">
      <summary>
   enables shouldUseExplicitFocusableControl and sets the elements corresponding to each direction
   </summary>
      <param name="upEle">Up ele.</param>
      <param name="downEle">Down ele.</param>
      <param name="leftEle">Left ele.</param>
      <param name="rightEle">Right ele.</param>
    </member>
    <member name="M:Nez.UI.Slider.SetStyle(SliderStyle)">
      <summary>
   Sets the style.
   </summary>
      <param name="style">The style.</param>
      <returns>Slider.</returns>
    </member>
    <member name="M:Nez.UI.Slider.GetStyle">
      <summary>
   Returns the slider's style. Modifying the returned style may not have an effect until {@link #setStyle(SliderStyle)} is called
   </summary>
      <returns>The style.</returns>
    </member>
    <member name="M:Nez.UI.Slider.IsDragging">
      <summary>
   Determines whether this instance is dragging.
   </summary>
      <returns>
        <c>true</c> if this instance is dragging; otherwise, <c>false</c>.</returns>
    </member>
    <member name="F:Nez.UI.SliderStyle.KnobOver">
      <summary>
   The knob over
   </summary>
    </member>
    <member name="M:Nez.UI.SliderStyle.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.SliderStyle" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.SliderStyle.#ctor(IDrawable,IDrawable)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.SliderStyle" /> class.
   </summary>
      <param name="background">The background.</param>
      <param name="knob">The knob.</param>
    </member>
    <member name="M:Nez.UI.SliderStyle.Create(Color,Color)">
      <summary>
   Creates the specified background color.
   </summary>
      <param name="backgroundColor">Color of the background.</param>
      <param name="knobColor">Color of the knob.</param>
      <returns>SliderStyle.</returns>
    </member>
    <member name="M:Nez.UI.SliderStyle.Clone">
      <summary>
   Clones this instance.
   </summary>
      <returns>SliderStyle.</returns>
    </member>
    <member name="T:Nez.UI.TextButton">
      <summary>
   Class TextButton.
   Implements the <see cref="T:Nez.UI.Button" /></summary>
      <seealso cref="T:Nez.UI.Button" />
    </member>
    <member name="T:Nez.UI.TextButtonStyle">
      <summary>
   The style for a text button
   </summary>
    </member>
    <member name="M:Nez.UI.TextButton.#ctor(System.String,TextButtonStyle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.TextButton" /> class.
   </summary>
      <param name="text">The text.</param>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.TextButton.#ctor(System.String,Skin,System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.TextButton" /> class.
   </summary>
      <param name="text">The text.</param>
      <param name="skin">The skin.</param>
      <param name="styleName">Name of the style.</param>
    </member>
    <member name="M:Nez.UI.TextButton.SetStyle(ButtonStyle)">
      <summary>
   Sets the style.
   </summary>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.TextButton.GetStyle">
      <summary>
   Gets the style.
   </summary>
      <returns>TextButtonStyle.</returns>
    </member>
    <member name="M:Nez.UI.TextButton.Draw(Batcher,System.Single)">
      <summary>
   If this method is overridden, the super method or {@link #validate()} should be called to ensure the widget is laid out.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="parentAlpha">Parent alpha.</param>
    </member>
    <member name="M:Nez.UI.TextButton.GetLabel">
      <summary>
   Gets the label.
   </summary>
      <returns>Label.</returns>
    </member>
    <member name="M:Nez.UI.TextButton.GetLabelCell">
      <summary>
   Gets the label cell.
   </summary>
      <returns>Cell.</returns>
    </member>
    <member name="M:Nez.UI.TextButton.SetText(String)">
      <summary>
   Sets the text.
   </summary>
      <param name="text">The text.</param>
      <returns>TextButton.</returns>
    </member>
    <member name="M:Nez.UI.TextButton.GetText">
      <summary>
   Gets the text.
   </summary>
      <returns>System.String.</returns>
    </member>
    <member name="M:Nez.UI.TextButton.ToString">
      <summary>
   Returns a <see cref="T:System.String" /> that represents this instance.
   </summary>
      <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
    </member>
    <member name="F:Nez.UI.TextButtonStyle.Font">
      <summary>
   The font
   </summary>
    </member>
    <member name="F:Nez.UI.TextButtonStyle.FontColor">
      <summary>
   The font color
   </summary>
    </member>
    <member name="F:Nez.UI.TextButtonStyle.DownFontColor">
      <summary>
   Down font color
   </summary>
    </member>
    <member name="F:Nez.UI.TextButtonStyle.FontScaleX">
      <summary>
   The font scale x
   </summary>
    </member>
    <member name="F:Nez.UI.TextButtonStyle.FontScaleY">
      <summary>
   The font scale y
   </summary>
    </member>
    <member name="P:Nez.UI.TextButtonStyle.FontScale">
      <summary>
   Sets the font scale.
   </summary>
      <value>The font scale.</value>
    </member>
    <member name="M:Nez.UI.TextButtonStyle.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.TextButtonStyle" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.TextButtonStyle.#ctor(IDrawable,IDrawable,IDrawable,BitmapFont)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.TextButtonStyle" /> class.
   </summary>
      <param name="up">Up.</param>
      <param name="down">Down.</param>
      <param name="over">The over.</param>
      <param name="font">The font.</param>
    </member>
    <member name="M:Nez.UI.TextButtonStyle.#ctor(IDrawable,IDrawable,IDrawable)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.TextButtonStyle" /> class.
   </summary>
      <param name="up">Up.</param>
      <param name="down">Down.</param>
      <param name="over">The over.</param>
    </member>
    <member name="M:Nez.UI.TextButtonStyle.Create(Color,Color,Color)">
      <summary>
   Creates the specified up color.
   </summary>
      <param name="upColor">Up color.</param>
      <param name="downColor">Down color.</param>
      <param name="overColor">Color of the over.</param>
      <returns>TextButtonStyle.</returns>
    </member>
    <member name="M:Nez.UI.TextButtonStyle.Clone">
      <summary>
   Clones this instance.
   </summary>
      <returns>TextButtonStyle.</returns>
    </member>
    <member name="T:Nez.UI.TextField">
      <summary>
   A single-line text input field.
   The preferred height of a text field is the height of the {@link TextFieldStyle#font} and {@link TextFieldStyle#background}.
   The preferred width of a text field is 150, a relatively arbitrary size.
   The text field will copy the currently selected text when ctrl+c is pressed, and paste any text in the clipboard when ctrl+v is
   pressed. Clipboard functionality is provided via the {@link Clipboard} interface.
   The text field allows you to specify an {@link OnscreenKeyboard} for displaying a softkeyboard and piping all key events
   generated by the keyboard to the text field. There are two standard implementations, one for the desktop and one for Android.
   The desktop keyboard is a stub, as a softkeyboard is not needed on the desktop. The Android {@link OnscreenKeyboard}
   implementation will bring up the default IME.
   </summary>
    </member>
    <member name="T:Nez.UI.TextField.ITextFieldFilter">
      <summary>
   Interface for filtering characters entered into the text field.
   </summary>
    </member>
    <member name="T:Nez.UI.TextFieldStyle">
      <summary>
   Class TextFieldStyle.
   </summary>
    </member>
    <member name="T:Nez.UI.DigitsOnlyFilter">
      <summary>
   Class DigitsOnlyFilter.
   Implements the <see cref="T:Nez.UI.TextField.ITextFieldFilter" /></summary>
      <seealso cref="T:Nez.UI.TextField.ITextFieldFilter" />
    </member>
    <member name="T:Nez.UI.FloatFilter">
      <summary>
   Class FloatFilter.
   Implements the <see cref="T:Nez.UI.TextField.ITextFieldFilter" /></summary>
      <seealso cref="T:Nez.UI.TextField.ITextFieldFilter" />
    </member>
    <member name="T:Nez.UI.BoolFilter">
      <summary>
   Class BoolFilter.
   Implements the <see cref="T:Nez.UI.TextField.ITextFieldFilter" /></summary>
      <seealso cref="T:Nez.UI.TextField.ITextFieldFilter" />
    </member>
    <member name="E:Nez.UI.TextField.OnTextChanged">
      <summary>
   Occurs when [on text changed].
   </summary>
    </member>
    <member name="E:Nez.UI.TextField.OnEnterPressed">
      <summary>
   Occurs when [on enter pressed].
   </summary>
    </member>
    <member name="E:Nez.UI.TextField.OnTabPressed">
      <summary>
   Occurs when [on tab pressed].
   </summary>
    </member>
    <member name="P:Nez.UI.TextField.PreferredWidth">
      <summary>
   Gets the width of the preferred.
   </summary>
      <value>The width of the preferred.</value>
    </member>
    <member name="P:Nez.UI.TextField.PreferredHeight">
      <summary>
   Gets the height of the preferred.
   </summary>
      <value>The height of the preferred.</value>
    </member>
    <member name="F:Nez.UI.TextField.TextFieldBoundaryThreshold">
      <summary>
   the maximum distance outside the TextField the mouse can move when pressing it to cause it to be unfocused
   </summary>
    </member>
    <member name="F:Nez.UI.TextField.ShouldIgnoreTextUpdatesWhileFocused">
      <summary>
   if true and setText is called it will be ignored
   </summary>
    </member>
    <member name="M:Nez.UI.TextField.#ctor(System.String,TextFieldStyle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.TextField" /> class.
   </summary>
      <param name="text">The text.</param>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.TextField.#ctor(System.String,Skin,System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.TextField" /> class.
   </summary>
      <param name="text">The text.</param>
      <param name="skin">The skin.</param>
      <param name="styleName">Name of the style.</param>
    </member>
    <member name="M:Nez.UI.TextField.SetMaxLength(System.Int32)">
      <summary>
   Sets the maximum length.
   </summary>
      <param name="maxLength">The maximum length.</param>
      <returns>TextField.</returns>
    </member>
    <member name="M:Nez.UI.TextField.GetMaxLength">
      <summary>
   Gets the maximum length.
   </summary>
      <returns>System.Int32.</returns>
    </member>
    <member name="M:Nez.UI.TextField.SetOnlyFontChars(System.Boolean)">
      <summary>
   When false, text set by {@link #setText(String)} may contain characters not in the font, a space will be displayed instead.
   When true (the default), characters not in the font are stripped by setText. Characters not in the font are always stripped
   when typed or pasted.
   </summary>
      <param name="onlyFontChars">If set to <c>true</c> only font chars.</param>
      <returns>TextField.</returns>
    </member>
    <member name="M:Nez.UI.TextField.SetStyle(TextFieldStyle)">
      <summary>
   Sets the style.
   </summary>
      <param name="style">The style.</param>
      <returns>TextField.</returns>
    </member>
    <member name="M:Nez.UI.TextField.GetStyle">
      <summary>
   Returns the text field's style. Modifying the returned style may not have an effect until {@link #setStyle(TextFieldStyle)} is called
   </summary>
      <returns>The style.</returns>
    </member>
    <member name="M:Nez.UI.TextField.Draw(Batcher,System.Single)">
      <summary>
   If this method is overridden, the super method or {@link #validate()} should be called to ensure the widget is laid out.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="parentAlpha">Parent alpha.</param>
    </member>
    <member name="M:Nez.UI.TextField.Copy">
      <summary>
   Copies the contents of this TextField to the {@link Clipboard} implementation set on this TextField
   </summary>
    </member>
    <member name="M:Nez.UI.TextField.Cut">
      <summary>
   Copies the selected contents of this TextField to the {@link Clipboard} implementation set on this TextField, then removes it
   </summary>
    </member>
    <member name="M:Nez.UI.TextField.Next(System.Boolean)">
      <summary>
   Focuses the next TextField. If none is found, the keyboard is hidden. Does nothing if the text field is not in a stage
   up: If true, the TextField with the same or next smallest y coordinate is found, else the next highest.
   </summary>
      <param name="up">Up.</param>
    </member>
    <member name="M:Nez.UI.TextField.AppendText(System.String)">
      <summary>
   if str is null, "" is used
   </summary>
      <param name="str">String.</param>
    </member>
    <member name="M:Nez.UI.TextField.SetText(System.String)">
      <summary>
   str If null, "" is used
   </summary>
      <param name="str">String.</param>
      <returns>TextField.</returns>
    </member>
    <member name="M:Nez.UI.TextField.SetTextForced(System.String)">
      <summary>
   force sets the text without validating or firing change events. Use at your own risk.
   </summary>
      <param name="str">String.</param>
      <returns>TextField.</returns>
    </member>
    <member name="M:Nez.UI.TextField.GetText">
      <summary>
   Never null, might be an empty string
   </summary>
      <returns>The text.</returns>
    </member>
    <member name="M:Nez.UI.TextField.SetProgrammaticChangeEvents(System.Boolean)">
      <summary>
   If false, methods that change the text will not fire {@link onTextChanged}, the event will be fired only when user changes the text
   </summary>
      <param name="programmaticChangeEvents">If set to <c>true</c> programmatic change events.</param>
      <returns>TextField.</returns>
    </member>
    <member name="M:Nez.UI.TextField.GetSelectionStart">
      <summary>
   Gets the selection start.
   </summary>
      <returns>System.Int32.</returns>
    </member>
    <member name="M:Nez.UI.TextField.GetSelection">
      <summary>
   Gets the selection.
   </summary>
      <returns>System.String.</returns>
    </member>
    <member name="M:Nez.UI.TextField.SetSelection(System.Int32,System.Int32)">
      <summary>
   Sets the selected text
   </summary>
      <param name="selectionStart">Selection start.</param>
      <param name="selectionEnd">Selection end.</param>
      <returns>TextField.</returns>
    </member>
    <member name="M:Nez.UI.TextField.SelectAll">
      <summary>
   Selects all.
   </summary>
    </member>
    <member name="M:Nez.UI.TextField.ClearSelection">
      <summary>
   Clears the selection.
   </summary>
    </member>
    <member name="M:Nez.UI.TextField.SetCursorPosition(System.Int32)">
      <summary>
   Sets the cursor position and clears any selection
   </summary>
      <param name="cursorPosition">Cursor position.</param>
      <returns>TextField.</returns>
    </member>
    <member name="M:Nez.UI.TextField.GetCursorPosition">
      <summary>
   Gets the cursor position.
   </summary>
      <returns>System.Int32.</returns>
    </member>
    <member name="M:Nez.UI.TextField.SetPreferredWidth(System.Single)">
      <summary>
   Sets the width of the preferred.
   </summary>
      <param name="preferredWidth">Width of the preferred.</param>
      <returns>TextField.</returns>
    </member>
    <member name="M:Nez.UI.TextField.SetTextFieldFilter(ITextFieldFilter)">
      <summary>
   filter May be null
   </summary>
      <param name="filter">Filter.</param>
      <returns>TextField.</returns>
    </member>
    <member name="M:Nez.UI.TextField.GetTextFieldFilter">
      <summary>
   Gets the text field filter.
   </summary>
      <returns>ITextFieldFilter.</returns>
    </member>
    <member name="M:Nez.UI.TextField.SetFocusTraversal(System.Boolean)">
      <summary>
   If true (the default), tab/shift+tab will move to the next text field
   </summary>
      <param name="focusTraversal">If set to <c>true</c> focus traversal.</param>
      <returns>TextField.</returns>
    </member>
    <member name="M:Nez.UI.TextField.GetMessageText">
      <summary>
   May be null
   </summary>
      <returns>The message text.</returns>
    </member>
    <member name="M:Nez.UI.TextField.SetMessageText(System.String)">
      <summary>
   Sets the text that will be drawn in the text field if no text has been entered.
   </summary>
      <param name="messageText">Message text.</param>
      <returns>TextField.</returns>
    </member>
    <member name="M:Nez.UI.TextField.SetAlignment(Align)">
      <summary>
   Sets text horizontal alignment (left, center or right).
   </summary>
      <param name="alignment">Alignment.</param>
      <returns>TextField.</returns>
    </member>
    <member name="M:Nez.UI.TextField.SetPasswordMode(System.Boolean)">
      <summary>
   If true, the text in this text field will be shown as bullet characters.
   </summary>
      <param name="passwordMode">Password mode.</param>
      <returns>TextField.</returns>
    </member>
    <member name="M:Nez.UI.TextField.IsPasswordMode">
      <summary>
   Determines whether [is password mode].
   </summary>
      <returns>
        <c>true</c> if [is password mode]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.TextField.SetPasswordCharacter(System.Char)">
      <summary>
   Sets the password character for the text field. The character must be present in the {@link BitmapFont}. Default is 149 (bullet)
   </summary>
      <param name="passwordCharacter">Password character.</param>
      <returns>TextField.</returns>
    </member>
    <member name="M:Nez.UI.TextField.SetBlinkTime(System.Single)">
      <summary>
   Sets the blink time.
   </summary>
      <param name="blinkTime">The blink time.</param>
      <returns>TextField.</returns>
    </member>
    <member name="M:Nez.UI.TextField.SetDisabled(System.Boolean)">
      <summary>
   Sets the disabled.
   </summary>
      <param name="disabled">if set to <c>true</c> [disabled].</param>
      <returns>TextField.</returns>
    </member>
    <member name="M:Nez.UI.TextField.IsDisabled">
      <summary>
   Determines whether this instance is disabled.
   </summary>
      <returns>
        <c>true</c> if this instance is disabled; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.TextField.ITextFieldFilter.AcceptChar(TextField,System.Char)">
      <summary>
   Accepts the character.
   </summary>
      <param name="textField">The text field.</param>
      <param name="c">The c.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="F:Nez.UI.TextFieldStyle.Font">
      <summary>
   The font
   </summary>
    </member>
    <member name="F:Nez.UI.TextFieldStyle.FontColor">
      <summary>
   The font color
   </summary>
    </member>
    <member name="F:Nez.UI.TextFieldStyle.FocusedFontColor">
      <summary>
   The focused font color
   </summary>
    </member>
    <member name="F:Nez.UI.TextFieldStyle.Background">
      <summary>
   The background
   </summary>
    </member>
    <member name="F:Nez.UI.TextFieldStyle.MessageFont">
      <summary>
   The message font
   </summary>
    </member>
    <member name="F:Nez.UI.TextFieldStyle.MessageFontColor">
      <summary>
   The message font color
   </summary>
    </member>
    <member name="M:Nez.UI.TextFieldStyle.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.TextFieldStyle" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.TextFieldStyle.#ctor(BitmapFont,Color,IDrawable,IDrawable,IDrawable)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.TextFieldStyle" /> class.
   </summary>
      <param name="font">The font.</param>
      <param name="fontColor">Color of the font.</param>
      <param name="cursor">The cursor.</param>
      <param name="selection">The selection.</param>
      <param name="background">The background.</param>
    </member>
    <member name="M:Nez.UI.TextFieldStyle.Create(Color,Color,Color,Color)">
      <summary>
   Creates the specified font color.
   </summary>
      <param name="fontColor">Color of the font.</param>
      <param name="cursorColor">Color of the cursor.</param>
      <param name="selectionColor">Color of the selection.</param>
      <param name="backgroundColor">Color of the background.</param>
      <returns>TextFieldStyle.</returns>
    </member>
    <member name="M:Nez.UI.TextFieldStyle.Clone">
      <summary>
   Clones this instance.
   </summary>
      <returns>TextFieldStyle.</returns>
    </member>
    <member name="M:Nez.UI.DigitsOnlyFilter.AcceptChar(TextField,System.Char)">
      <summary>
   Accepts the character.
   </summary>
      <param name="textField">The text field.</param>
      <param name="c">The c.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.FloatFilter.AcceptChar(TextField,System.Char)">
      <summary>
   Accepts the character.
   </summary>
      <param name="textField">The text field.</param>
      <param name="c">The c.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.BoolFilter.AcceptChar(TextField,System.Char)">
      <summary>
   Accepts the character.
   </summary>
      <param name="textField">The text field.</param>
      <param name="c">The c.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="T:Nez.UI.TextTooltip">
      <summary>
   Class TextTooltip.
   Implements the <see cref="T:Nez.UI.Tooltip" /></summary>
      <seealso cref="T:Nez.UI.Tooltip" />
    </member>
    <member name="T:Nez.UI.TextTooltipStyle">
      <summary>
   Class TextTooltipStyle.
   </summary>
    </member>
    <member name="M:Nez.UI.TextTooltip.#ctor(System.String,Element,Skin,System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.TextTooltip" /> class.
   </summary>
      <param name="text">The text.</param>
      <param name="targetElement">The target element.</param>
      <param name="skin">The skin.</param>
      <param name="styleName">Name of the style.</param>
    </member>
    <member name="M:Nez.UI.TextTooltip.#ctor(System.String,Element,TextTooltipStyle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.TextTooltip" /> class.
   </summary>
      <param name="text">The text.</param>
      <param name="targetElement">The target element.</param>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.TextTooltip.SetStyle(TextTooltipStyle)">
      <summary>
   Sets the style.
   </summary>
      <param name="style">The style.</param>
      <returns>TextTooltip.</returns>
    </member>
    <member name="F:Nez.UI.TextTooltipStyle.LabelStyle">
      <summary>
   The label style
   </summary>
    </member>
    <member name="F:Nez.UI.TextTooltipStyle.Background">
      <summary>
   The background
   </summary>
    </member>
    <member name="M:Nez.UI.TextTooltipStyle.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.TextTooltipStyle" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.TextTooltipStyle.#ctor(LabelStyle,IDrawable)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.TextTooltipStyle" /> class.
   </summary>
      <param name="label">The label.</param>
      <param name="background">The background.</param>
    </member>
    <member name="T:Nez.UI.Tooltip">
      <summary>
   A listener that shows a tooltip Element when another Element is hovered over with the mouse.
   </summary>
    </member>
    <member name="M:Nez.UI.Tooltip.#ctor(Element,Element)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Tooltip" /> class.
   </summary>
      <param name="contents">The contents.</param>
      <param name="targetElement">The target element.</param>
    </member>
    <member name="M:Nez.UI.Tooltip.GetManager">
      <summary>
   Gets the manager.
   </summary>
      <returns>TooltipManager.</returns>
    </member>
    <member name="M:Nez.UI.Tooltip.GetContainer">
      <summary>
   Gets the container.
   </summary>
      <returns>Container.</returns>
    </member>
    <member name="M:Nez.UI.Tooltip.SetElement(Element)">
      <summary>
   Sets the element.
   </summary>
      <param name="contents">The contents.</param>
      <returns>Tooltip.</returns>
    </member>
    <member name="M:Nez.UI.Tooltip.GetElement">
      <summary>
   Gets the element.
   </summary>
      <returns>Element.</returns>
    </member>
    <member name="M:Nez.UI.Tooltip.GetElement``1">
      <summary>
   Gets the element.
   </summary>
      <typeparam name="T">
      </typeparam>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.UI.Tooltip.SetTargetElement(Element)">
      <summary>
   Sets the target element.
   </summary>
      <param name="targetElement">The target element.</param>
      <returns>Tooltip.</returns>
    </member>
    <member name="M:Nez.UI.Tooltip.GetTargetElement">
      <summary>
   Gets the target element.
   </summary>
      <returns>Element.</returns>
    </member>
    <member name="M:Nez.UI.Tooltip.SetInstant(System.Boolean)">
      <summary>
   If true, this tooltip is shown without delay when hovered
   </summary>
      <param name="instant">Instant.</param>
      <returns>Tooltip.</returns>
    </member>
    <member name="M:Nez.UI.Tooltip.GetInstant">
      <summary>
   Gets the instant.
   </summary>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.Tooltip.SetAlways(System.Boolean)">
      <summary>
   If true, this tooltip is shown even when tooltips are not TooltipManager#enabled
   </summary>
      <param name="always">Always.</param>
      <returns>Tooltip.</returns>
    </member>
    <member name="M:Nez.UI.Tooltip.GetAlways">
      <summary>
   Gets the always.
   </summary>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.Tooltip.Hit(Vector2)">
      <summary>
   Hits the specified point.
   </summary>
      <param name="point">The point.</param>
      <returns>Element.</returns>
    </member>
    <member name="T:Nez.UI.Window">
      <summary>
   A table that can be dragged and resized. The top padding is used as the window's title height.
   The preferred size of a window is the preferred size of the title text and the children as laid out by the table. After adding
   children to the window, it can be convenient to call {@link #pack()} to size the window to the size of the children.
   </summary>
    </member>
    <member name="T:Nez.UI.WindowStyle">
      <summary>
   Class WindowStyle.
   </summary>
    </member>
    <member name="M:Nez.UI.Window.#ctor(System.String,WindowStyle)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Window" /> class.
   </summary>
      <param name="title">The title.</param>
      <param name="style">The style.</param>
    </member>
    <member name="M:Nez.UI.Window.#ctor(System.String,Skin,System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Window" /> class.
   </summary>
      <param name="title">The title.</param>
      <param name="skin">The skin.</param>
      <param name="styleName">Name of the style.</param>
    </member>
    <member name="M:Nez.UI.Window.SetStyle(WindowStyle)">
      <summary>
   Sets the style.
   </summary>
      <param name="style">The style.</param>
      <returns>Window.</returns>
    </member>
    <member name="M:Nez.UI.Window.GetStyle">
      <summary>
   Returns the window's style. Modifying the returned style may not have an effect until {@link #setStyle(WindowStyle)} is called
   </summary>
      <returns>The style.</returns>
    </member>
    <member name="M:Nez.UI.Window.KeepWithinStage">
      <summary>
   Keeps the within stage.
   </summary>
    </member>
    <member name="M:Nez.UI.Window.Draw(Batcher,System.Single)">
      <summary>
   If this method is overridden, the super method or {@link #validate()} should be called to ensure the widget is laid out.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="parentAlpha">Parent alpha.</param>
    </member>
    <member name="M:Nez.UI.Window.Hit(Vector2)">
      <summary>
   Hits the specified point.
   </summary>
      <param name="point">The point.</param>
      <returns>Element.</returns>
    </member>
    <member name="M:Nez.UI.Window.IsMovable">
      <summary>
   Determines whether this instance is movable.
   </summary>
      <returns>
        <c>true</c> if this instance is movable; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.Window.SetMovable(System.Boolean)">
      <summary>
   Sets the movable.
   </summary>
      <param name="isMovable">if set to <c>true</c> [is movable].</param>
      <returns>Window.</returns>
    </member>
    <member name="M:Nez.UI.Window.SetKeepWithinStage(System.Boolean)">
      <summary>
   Sets the keep within stage.
   </summary>
      <param name="keepWithinStage">if set to <c>true</c> [keep within stage].</param>
      <returns>Window.</returns>
    </member>
    <member name="M:Nez.UI.Window.IsResizable">
      <summary>
   Determines whether this instance is resizable.
   </summary>
      <returns>
        <c>true</c> if this instance is resizable; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.Window.SetResizable(System.Boolean)">
      <summary>
   Sets the resizable.
   </summary>
      <param name="isResizable">if set to <c>true</c> [is resizable].</param>
      <returns>Window.</returns>
    </member>
    <member name="M:Nez.UI.Window.SetResizeBorderSize(System.Int32)">
      <summary>
   Sets the size of the resize border.
   </summary>
      <param name="resizeBorderSize">Size of the resize border.</param>
      <returns>Window.</returns>
    </member>
    <member name="M:Nez.UI.Window.IsDragging">
      <summary>
   Determines whether this instance is dragging.
   </summary>
      <returns>
        <c>true</c> if this instance is dragging; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.Window.GetPrefWidth">
      <summary>
   Gets the width of the preference.
   </summary>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.UI.Window.GetTitleTable">
      <summary>
   Gets the title table.
   </summary>
      <returns>Table.</returns>
    </member>
    <member name="M:Nez.UI.Window.GetTitleLabel">
      <summary>
   Gets the title label.
   </summary>
      <returns>Label.</returns>
    </member>
    <member name="F:Nez.UI.WindowStyle.TitleFont">
      <summary>
   The title font
   </summary>
    </member>
    <member name="F:Nez.UI.WindowStyle.TitleFontScaleX">
      <summary>
   The title font scale x
   </summary>
    </member>
    <member name="F:Nez.UI.WindowStyle.TitleFontScaleY">
      <summary>
   The title font scale y
   </summary>
    </member>
    <member name="F:Nez.UI.WindowStyle.Background">
      <summary>
   The background
   </summary>
    </member>
    <member name="F:Nez.UI.WindowStyle.TitleFontColor">
      <summary>
   The title font color
   </summary>
    </member>
    <member name="F:Nez.UI.WindowStyle.StageBackground">
      <summary>
   The stage background
   </summary>
    </member>
    <member name="M:Nez.UI.WindowStyle.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.WindowStyle" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.WindowStyle.#ctor(BitmapFont,Color,IDrawable)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.WindowStyle" /> class.
   </summary>
      <param name="titleFont">The title font.</param>
      <param name="titleFontColor">Color of the title font.</param>
      <param name="background">The background.</param>
    </member>
    <member name="M:Nez.UI.WindowStyle.#ctor(BitmapFont,Color,IDrawable,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.WindowStyle" /> class.
   </summary>
      <param name="titleFont">The title font.</param>
      <param name="titleFontColor">Color of the title font.</param>
      <param name="background">The background.</param>
      <param name="titleFontScale">The title font scale.</param>
    </member>
    <member name="M:Nez.UI.WindowStyle.#ctor(BitmapFont,Color,IDrawable,System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.WindowStyle" /> class.
   </summary>
      <param name="titleFont">The title font.</param>
      <param name="titleFontColor">Color of the title font.</param>
      <param name="background">The background.</param>
      <param name="titleFontScaleX">The title font scale x.</param>
      <param name="titleFontScaleY">The title font scale y.</param>
    </member>
    <member name="M:Nez.UI.WindowStyle.Clone">
      <summary>
   Clones this instance.
   </summary>
      <returns>WindowStyle.</returns>
    </member>
    <member name="T:Nez.IMGUI">
      <summary>
   IMGUI is a very simple class with only static methods designed to make sticking buttons, checkboxes, sliders and progress bars on screen
   in quick and dirty fashion. It is not designed to be a full and proper UI system.
   </summary>
    </member>
    <member name="M:Nez.IMGUI.BeginWindow(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
      <summary>
   begins an IMGUI window specifying where and how large it should be. If you are not using IMGUI in world space (for example, inside
   a Scene with a scaled resolution policy) passing false for useRawMousePosition will use the Input.scaledMousePosition.
   </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <param name="useRawMousePosition">If set to <c>true</c> use raw mouse position.</param>
    </member>
    <member name="M:Nez.IMGUI.EndWindow">
      <summary>
   Ends the window.
   </summary>
    </member>
    <member name="M:Nez.IMGUI.Button(System.String)">
      <summary>
   Buttons the specified text.
   </summary>
      <param name="text">The text.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.IMGUI.Toggle(System.String,System.Boolean)">
      <summary>
   creates a checkbox/toggle
   </summary>
      <param name="text">Text.</param>
      <param name="isChecked">If set to <c>true</c> is checked.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.IMGUI.Slider(System.Single,System.String)">
      <summary>
   value should be between 0 and 1
   </summary>
      <param name="value">Value.</param>
      <param name="name">The name.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.IMGUI.ProgressBar(System.Single)">
      <summary>
   value should be between 0 and 1
   </summary>
      <param name="value">Value.</param>
      <returns>The bar.</returns>
    </member>
    <member name="M:Nez.IMGUI.Header(System.String)">
      <summary>
   creates a full width header with text
   </summary>
      <param name="text">Text.</param>
    </member>
    <member name="M:Nez.IMGUI.Space(System.Single)">
      <summary>
   adds some vertical space
   </summary>
      <param name="verticalSpace">Vertical space.</param>
    </member>
    <member name="T:Nez.UI.Skin">
      <summary>
   Class Skin.
   </summary>
    </member>
    <member name="M:Nez.UI.Skin.CreateDefaultSkin">
      <summary>
   creates a default Skin that can be used for quick mockups. Includes button, textu button, checkbox, progress bar and slider styles.
   </summary>
      <returns>The default skin.</returns>
    </member>
    <member name="M:Nez.UI.Skin.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Skin" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.Skin.SetStylesForStyleClass``1(``0,Dictionary{System.String, System.Object},NezContentManager,System.String)">
      <summary>
   Recursively finds and sets all styles for a specific style config class that are within
   the dictionary passed in. This allows skins to contain nested, dynamic style declarations.
   For example, it allows a SelectBoxStyle to contain a listStyle that is declared inline
   (and not a reference).
   </summary>
      <typeparam name="T">The style config class type (i.e. SelectBoxStyle)</typeparam>
      <param name="styleClass">The style config class instance that needs to be "filled out"</param>
      <param name="styleDict">A dictionary that represents one style name within the style config class (i.e. 'default').</param>
      <param name="contentManager">The content manager.</param>
      <param name="styleName">The style name that the dictionary represents (i.e. 'default').</param>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.UI.Skin.AddSprites(SpriteAtlas)">
      <summary>
   Adds all named Sprites from the atlas
   </summary>
      <param name="atlas">Atlas.</param>
    </member>
    <member name="M:Nez.UI.Skin.Add``1(System.String,``0)">
      <summary>
   adds the typed resource to this skin
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="name">The name.</param>
      <param name="resource">The resource.</param>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.UI.Skin.Add(System.String,System.Object,Type)">
      <summary>
   adds the typed resource to this skin
   </summary>
      <param name="name">Name.</param>
      <param name="resource">Resource.</param>
      <param name="type">The type.</param>
    </member>
    <member name="M:Nez.UI.Skin.Remove``1(System.String)">
      <summary>
   removes the typed resource from this skin
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="name">Name.</param>
    </member>
    <member name="M:Nez.UI.Skin.Has``1(System.String)">
      <summary>
   checks to see if a typed resource exists with the given name
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="name">Name.</param>
      <returns>
        <c>true</c> if [has] [the specified name]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.UI.Skin.Get``1">
      <summary>
   First checks for a resource named "default". If it cant find default it will return either the first resource of type T
   or default(T) if none are found.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.UI.Skin.Get``1(System.String)">
      <summary>
   Returns a named resource of the specified type or default(T) if it couldnt be found
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="name">Name.</param>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.UI.Skin.GetColor(System.String)">
      <summary>
   Gets the color.
   </summary>
      <param name="name">The name.</param>
      <returns>Color.</returns>
    </member>
    <member name="M:Nez.UI.Skin.GetFont(System.String)">
      <summary>
   Gets the font.
   </summary>
      <param name="name">The name.</param>
      <returns>BitmapFont.</returns>
    </member>
    <member name="M:Nez.UI.Skin.GetSprite(System.String)">
      <summary>
   Gets the sprite.
   </summary>
      <param name="name">The name.</param>
      <returns>Sprite.</returns>
    </member>
    <member name="M:Nez.UI.Skin.GetNinePatchSprite(System.String)">
      <summary>
   Gets the nine patch sprite.
   </summary>
      <param name="name">The name.</param>
      <returns>NinePatchSprite.</returns>
    </member>
    <member name="M:Nez.UI.Skin.GetSpriteDrawable(System.String)">
      <summary>
   Returns a registered sprite drawable. If no sprite drawable is found but a Sprite exists with the name, a
   sprite drawable is created from the Sprite and stored in the skin
   </summary>
      <param name="name">Name.</param>
      <returns>The sprite drawable.</returns>
    </member>
    <member name="M:Nez.UI.Skin.GetDrawable(System.String)">
      <summary>
   Returns a registered drawable. If no drawable is found but a Sprite/NinePatchSprite exists with the name, then the
   appropriate drawable is created and stored in the skin. If name is a color a PrimitiveDrawable will be created and stored.
   </summary>
      <param name="name">Name.</param>
      <returns>The drawable.</returns>
    </member>
    <member name="M:Nez.UI.Skin.GetTiledDrawable(System.String)">
      <summary>
   Returns a registered tiled drawable. If no tiled drawable is found but a Sprite exists with the name, a tiled drawable is
   created from the Sprite and stored in the skin
   </summary>
      <param name="name">Name.</param>
      <returns>The tiled drawable.</returns>
    </member>
    <member name="M:Nez.UI.Skin.GetNinePatchDrawable(System.String)">
      <summary>
   Returns a registered ninepatch. If no ninepatch is found but a Sprite exists with the name, a ninepatch is created from the
   Sprite and stored in the skin.
   </summary>
      <param name="name">Name.</param>
      <returns>The nine patch.</returns>
    </member>
    <member name="M:Nez.UI.Skin.NewTintedDrawable(System.String,Color)">
      <summary>
   Returns a tinted copy of a drawable found in the skin via getDrawable. Note that the new drawable is NOT
   added to the skin! Tinting is only supported on SpriteDrawables and NinePatchDrawables.
   </summary>
      <param name="name">Name.</param>
      <param name="tint">Tint.</param>
      <returns>The tinted drawable.</returns>
      <exception cref="T:System.Exception">Unable to copy, unknown or unsupported drawable type: " + drawable</exception>
    </member>
    <member name="T:Nez.UI.Stage">
      <summary>
   Class Stage.
   </summary>
    </member>
    <member name="F:Nez.UI.Stage.Debug">
      <summary>
   The debug
   </summary>
    </member>
    <member name="F:Nez.UI.Stage.Entity">
      <summary>
   The entity
   </summary>
    </member>
    <member name="F:Nez.UI.Stage.IsFullScreen">
      <summary>
   if true, the rawMousePosition will be used else the scaledMousePosition will be used. If your UI is in screen space
   and non-scaled (using the Scene.IFinalRenderDelegate for example) then set this to true so input is not scaled.
   </summary>
    </member>
    <member name="F:Nez.UI.Stage.GamepadActionButton">
      <summary>
   the button on the gamepad that activates the focused control
   </summary>
    </member>
    <member name="F:Nez.UI.Stage.KeyboardEmulatesGamepad">
      <summary>
   if true (default) keyboard arrow keys and the keyboardActionKey will emulate a gamepad
   </summary>
    </member>
    <member name="F:Nez.UI.Stage.KeyboardActionKey">
      <summary>
   the key that activates the focused control
   </summary>
    </member>
    <member name="F:Nez.UI.Stage.Camera">
      <summary>
   The camera
   </summary>
    </member>
    <member name="M:Nez.UI.Stage.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.UI.Stage" /> class.
   </summary>
    </member>
    <member name="M:Nez.UI.Stage.AddElement``1(``0)">
      <summary>
   Adds an element to the root of the stage
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="element">The element.</param>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.UI.Stage.Render(Batcher,Camera)">
      <summary>
   Renders the specified batcher.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="camera">The camera.</param>
    </member>
    <member name="M:Nez.UI.Stage.GetMousePosition">
      <summary>
   gets the appropriate mouse position (scaled vs raw) based on if this isFullScreen and if we have an entity
   </summary>
      <returns>The mouse position.</returns>
    </member>
    <member name="M:Nez.UI.Stage.Update">
      <summary>
   Updates this instance.
   </summary>
    </member>
    <member name="M:Nez.UI.Stage.RemoveInputFocusListener(Element)">
      <summary>
   Removes the listener from being notified for all touchDragged and touchUp events for the specified pointer and button. Note
   the listener may never receive a touchUp event if this method is used.
   </summary>
      <param name="element">The element.</param>
    </member>
    <member name="M:Nez.UI.Stage.Dispose">
      <summary>
   this should be called when the Component is removed to ensure all objects are freed
   </summary>
    </member>
    <member name="M:Nez.UI.Stage.GetElements">
      <summary>
   Gets the elements.
   </summary>
      <returns>List&lt;Element&gt;.</returns>
    </member>
    <member name="M:Nez.UI.Stage.GetRoot">
      <summary>
   Returns the root group which holds all elements in the stageCoords
   </summary>
      <returns>The root.</returns>
    </member>
    <member name="M:Nez.UI.Stage.GetWidth">
      <summary>
   The Stages world width
   </summary>
      <returns>The width.</returns>
    </member>
    <member name="M:Nez.UI.Stage.GetHeight">
      <summary>
   The Stages world height
   </summary>
      <returns>The height.</returns>
    </member>
    <member name="M:Nez.UI.Stage.GetDebugAll">
      <summary>
   Gets the debug all.
   </summary>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.UI.Stage.SetDebugAll(System.Boolean)">
      <summary>
   If true, debug lines are shown for all elements
   </summary>
      <param name="debugAll">If set to <c>true</c> debug all.</param>
    </member>
    <member name="M:Nez.UI.Stage.SetDebugUnderMouse(System.Boolean)">
      <summary>
   If true, debug is enabled only for the element under the mouse. Can be combined with {@link #setDebugAll(bool)}
   </summary>
      <param name="debugUnderMouse">If set to <c>true</c> debug under mouse.</param>
    </member>
    <member name="M:Nez.UI.Stage.SetDebugParentUnderMouse(System.Boolean)">
      <summary>
   If true, debug is enabled only for the parent of the element under the mouse. Can be combined with {@link #setDebugAll(bool)}
   </summary>
      <param name="debugParentUnderMouse">If set to <c>true</c> debug parent under mouse.</param>
    </member>
    <member name="M:Nez.UI.Stage.SetDebugTableUnderMouse(Table.TableDebug)">
      <summary>
   If not {@link TableDebug#none}, debug is enabled only for the first ascendant of the element under the mouse that is a table. Can
   be combined with {@link #setDebugAll(bool)}
   </summary>
      <param name="debugTableUnderMouse">Debug table under mouse.</param>
    </member>
    <member name="M:Nez.UI.Stage.SetDebugTableUnderMouse(System.Boolean)">
      <summary>
   If true, debug is enabled only for the first ascendant of the element under the mouse that is a table. Can be combined with
   {@link #setDebugAll(bool)}
   </summary>
      <param name="debugTableUnderMouse">If set to <c>true</c> debug table under mouse.</param>
    </member>
    <member name="M:Nez.UI.Stage.UnfocusAll">
      <summary>
   Removes the touch, keyboard, and scroll focused elements
   </summary>
    </member>
    <member name="M:Nez.UI.Stage.SetKeyboardFocus(IKeyboardListener)">
      <summary>
   Sets the element that will receive key events
   </summary>
      <param name="element">element.</param>
    </member>
    <member name="M:Nez.UI.Stage.SetGamepadFocusElement(IGamepadFocusable)">
      <summary>
   sets the gamepad focus element and also turns on gamepad focus for this Stage. For gamepad focus to work you must set an initially
   focused element.
   </summary>
      <param name="focusable">Focusable.</param>
    </member>
    <member name="M:Nez.UI.Stage.GetKeyboardFocus">
      <summary>
   Gets the element that will receive key events.
   </summary>
      <returns>The keyboard focus.</returns>
    </member>
    <member name="M:Nez.UI.Stage.Hit(Vector2)">
      <summary>
   Hits the specified point.
   </summary>
      <param name="point">The point.</param>
      <returns>Element.</returns>
    </member>
    <member name="M:Nez.UI.Stage.ScreenToStageCoordinates(Vector2)">
      <summary>
   Transforms the screen coordinates to stage coordinates
   </summary>
      <param name="screenCoords">Screen coords.</param>
      <returns>The to stage coordinates.</returns>
    </member>
    <member name="M:Nez.UI.Stage.StageToScreenCoordinates(Vector2)">
      <summary>
   Transforms the stage coordinates to screen coordinates
   </summary>
      <param name="stageCoords">Stage coords.</param>
      <returns>The to screen coordinates.</returns>
    </member>
    <member name="M:Nez.UI.Stage.FindAllElementsOfType``1">
      <summary>
   finds all the Elements of type T in the Stage
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <returns>The all elements of type.</returns>
    </member>
    <member name="T:Nez.Analysis.Alignment">
      <summary>
   Alignment for layout.
   </summary>
    </member>
    <member name="T:Nez.Analysis.Layout">
      <summary>
   Layout class that supports title safe area.
   </summary>
      <remarks>You have to support various resolutions when you develop multi-platform
   games. Also, you have to support title safe area for Xbox 360 games.
   This structure places given rectangle with specified alignment and margin
   based on layout area (client area) with safe area.
   Margin is percentage of client area size.
   Example:
   Place( region, 0.1f, 0.2f, Aligment.TopLeft );
   Place region at 10% from left side of the client area,
   20% from top of the client area.
   Place( region, 0.3f, 0.4f, Aligment.BottomRight );
   Place region at 30% from right side of client,
   40% from the bottom of the client area.
   You can individually specify client area and safe area.
   So, it is useful when you have split screen game which layout happens based
   on client and it takes care of the safe at same time.</remarks>
    </member>
    <member name="F:Nez.Analysis.Alignment.None">
      <summary>
   The none
   </summary>
    </member>
    <member name="F:Nez.Analysis.Alignment.Left">
      <summary>
   The left
   </summary>
    </member>
    <member name="F:Nez.Analysis.Alignment.Right">
      <summary>
   The right
   </summary>
    </member>
    <member name="F:Nez.Analysis.Alignment.HorizontalCenter">
      <summary>
   The horizontal center
   </summary>
    </member>
    <member name="F:Nez.Analysis.Alignment.Top">
      <summary>
   The top
   </summary>
    </member>
    <member name="F:Nez.Analysis.Alignment.Bottom">
      <summary>
   The bottom
   </summary>
    </member>
    <member name="F:Nez.Analysis.Alignment.VerticalCenter">
      <summary>
   The vertical center
   </summary>
    </member>
    <member name="F:Nez.Analysis.Alignment.TopLeft">
      <summary>
   The top left
   </summary>
    </member>
    <member name="F:Nez.Analysis.Alignment.TopRight">
      <summary>
   The top right
   </summary>
    </member>
    <member name="F:Nez.Analysis.Alignment.TopCenter">
      <summary>
   The top center
   </summary>
    </member>
    <member name="F:Nez.Analysis.Alignment.BottomLeft">
      <summary>
   The bottom left
   </summary>
    </member>
    <member name="F:Nez.Analysis.Alignment.BottomRight">
      <summary>
   The bottom right
   </summary>
    </member>
    <member name="F:Nez.Analysis.Alignment.BottomCenter">
      <summary>
   The bottom center
   </summary>
    </member>
    <member name="F:Nez.Analysis.Alignment.CenterLeft">
      <summary>
   The center left
   </summary>
    </member>
    <member name="F:Nez.Analysis.Alignment.CenterRight">
      <summary>
   The center right
   </summary>
    </member>
    <member name="F:Nez.Analysis.Alignment.Center">
      <summary>
   The center
   </summary>
    </member>
    <member name="F:Nez.Analysis.Layout.ClientArea">
      <summary>
   Gets/Sets client area.
   </summary>
    </member>
    <member name="F:Nez.Analysis.Layout.SafeArea">
      <summary>
   Gets/Sets safe area.
   </summary>
    </member>
    <member name="M:Nez.Analysis.Layout.#ctor(Rectangle,Rectangle)">
      <summary>
   Construct layout object by specify both client area and safe area.
   </summary>
      <param name="clientArea">The client area.</param>
      <param name="safeArea">safe area</param>
    </member>
    <member name="M:Nez.Analysis.Layout.#ctor(Rectangle)">
      <summary>
   Construct layout object by specify client area.
   Safe area becomes same size as client area.
   </summary>
      <param name="clientArea">The client area.</param>
    </member>
    <member name="M:Nez.Analysis.Layout.#ctor(Viewport)">
      <summary>
   Construct layout object by specify viewport.
   Safe area becomes same as Viewpoert.TItleSafeArea.
   </summary>
      <param name="viewport">The viewport.</param>
    </member>
    <member name="M:Nez.Analysis.Layout.Place(Vector2,System.Single,System.Single,Alignment)">
      <summary>
   Layouting specified region
   </summary>
      <param name="size">The size.</param>
      <param name="horizontalMargin">The horizontal margin.</param>
      <param name="verticalMargine">The vertical margine.</param>
      <param name="alignment">The alignment.</param>
      <returns>Placed position</returns>
    </member>
    <member name="M:Nez.Analysis.Layout.Place(Rectangle,System.Single,System.Single,Alignment)">
      <summary>
   Layouting specified region
   </summary>
      <param name="region">placing rectangle</param>
      <param name="horizontalMargin">The horizontal margin.</param>
      <param name="verticalMargine">The vertical margine.</param>
      <param name="alignment">The alignment.</param>
      <returns>placed rectangle</returns>
    </member>
    <member name="T:Nez.Audio.AudioSource">
      <summary>
   plays a collection of SoundEffects randomly and optionally with random pitch
   </summary>
    </member>
    <member name="M:Nez.Audio.AudioSource.SetPitchRange(System.Single,System.Single)">
      <summary>
   if a pitch range is set every time play is called a random pitch will be used
   </summary>
      <param name="min">Minimum.</param>
      <param name="max">Max.</param>
      <returns>The pitch range.</returns>
    </member>
    <member name="M:Nez.Audio.AudioSource.SetPanRange(System.Single,System.Single)">
      <summary>
   if a pan range is set every time play is called a random pan will be used
   </summary>
      <param name="min">Minimum.</param>
      <param name="max">Max.</param>
      <returns>The pan range.</returns>
    </member>
    <member name="M:Nez.Audio.AudioSource.AddSoundEffect(SoundEffect)">
      <summary>
   adds a SoundEffect to the AudioSource
   </summary>
      <param name="effect">Effect.</param>
      <returns>The sound effect.</returns>
    </member>
    <member name="M:Nez.Audio.AudioSource.Play">
      <summary>
   Plays this instance.
   </summary>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Audio.AudioSource.Play(System.Single,System.Single,System.Single)">
      <summary>
   Plays the specified volume.
   </summary>
      <param name="volume">The volume.</param>
      <param name="pitch">The pitch.</param>
      <param name="pan">The pan.</param>
    </member>
    <member name="M:Nez.Audio.AudioSource.CreateInstance">
      <summary>
   Creates the instance.
   </summary>
      <returns>SoundEffectInstance.</returns>
    </member>
    <member name="T:System.Collections.Generic.Deque`1">
      <summary>
   sourced from: https://github.com/tejacques/Deque
   A generic Deque class. It can be thought of as a double-ended queue, hence Deque. This allows for
   an O(1) AddFront, AddBack, RemoveFront, RemoveBack. The Deque also has O(1) indexed lookup, as it is backed
   by a circular array.
   </summary>
      <typeparam name="T">The type of objects to store in the deque.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.#ctor">
      <summary>
   Creates a new instance of the Deque class with
   the default capacity.
   </summary>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.#ctor(System.Int32)">
      <summary>
   Creates a new instance of the Deque class with
   the specified capacity.
   </summary>
      <param name="capacity">The initial capacity of the Deque.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">capacity - capacity is less than 0.</exception>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.#ctor(IEnumerable{`0})">
      <summary>
   Create a new instance of the Deque class with the elements
   from the specified collection.
   </summary>
      <param name="collection">The co</param>
    </member>
    <member name="P:System.Collections.Generic.Deque`1.Capacity">
      <summary>
   Gets or sets the total number of elements
   the internal array can hold without resizing.
   </summary>
      <value>The capacity.</value>
      <exception cref="T:System.ArgumentOutOfRangeException">value - Capacity is less than 0.</exception>
      <exception cref="T:System.InvalidOperationException">Capacity cannot be set to a value less than Count</exception>
    </member>
    <member name="P:System.Collections.Generic.Deque`1.IsFull">
      <summary>
   Gets whether or not the Deque is filled to capacity.
   </summary>
      <value>
        <c>true</c> if this instance is full; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:System.Collections.Generic.Deque`1.IsEmpty">
      <summary>
   Gets whether or not the Deque is empty.
   </summary>
      <value>
        <c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.GetEnumerator">
      <summary>
   Returns an enumerator that iterates through the Deque.
   </summary>
      <returns>An iterator that can be used to iterate through the Deque.</returns>
    </member>
    <member name="P:System.Collections.Generic.Deque`1.Count">
      <summary>
   Gets the number of elements contained in the Deque.
   </summary>
      <value>The count.</value>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.Add(`0)">
      <summary>
   Adds an item to the Deque.
   </summary>
      <param name="item">The object to add to the Deque.</param>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.Clear">
      <summary>
   Removes all items from the Deque.
   </summary>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.Contains(`0)">
      <summary>
   Determines whether the Deque contains a specific value.
   </summary>
      <param name="item">The object to locate in the Deque.</param>
      <returns>true if item is found in the Deque; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.CopyTo(`0[],System.Int32)">
      <summary>
   Copies the elements of the Deque to a System.Array,
   starting at a particular System.Array index.
   </summary>
      <param name="array">The one-dimensional System.Array that is the destination of
   the elements copied from the Deque. The System.Array must
   have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">array - Array is null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">array is null.</exception>
      <exception cref="T:System.ArgumentException">arrayIndex is less than 0.</exception>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.Remove(`0)">
      <summary>
   Removes the first occurrence of a specific object from the Deque.
   </summary>
      <param name="item">The object to remove from the Deque.</param>
      <returns>true if item was successfully removed from the Deque;
   otherwise, false. This method also returns false if item
   is not found in the original</returns>
    </member>
    <member name="P:System.Collections.Generic.Deque`1.Item(System.Int32)">
      <summary>
   Gets or sets the element at the specified index.
   </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>The element at the specified index</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in this deque</exception>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.Insert(System.Int32,`0)">
      <summary>
   Inserts an item to the Deque at the specified index.
   </summary>
      <param name="index">The zero-based index at which item should be inserted.</param>
      <param name="item">The object to insert into the Deque.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the Deque.</exception>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.IndexOf(`0)">
      <summary>
   Determines the index of a specific item in the deque.
   </summary>
      <param name="item">The object to locate in the deque.</param>
      <returns>The index of the item if found in the deque; otherwise, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.RemoveAt(System.Int32)">
      <summary>
   Removes the item at the specified index.
   </summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the Deque.</exception>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.AddFront(`0)">
      <summary>
   Adds the provided item to the front of the Deque.
   </summary>
      <param name="item">The item to add.</param>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.AddBack(`0)">
      <summary>
   Adds the provided item to the back of the Deque.
   </summary>
      <param name="item">The item to add.</param>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.RemoveFront">
      <summary>
   Removes an item from the front of the Deque and returns it.
   </summary>
      <returns>The item at the front of the Deque.</returns>
      <exception cref="T:System.InvalidOperationException">The Deque is empty</exception>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.RemoveBack">
      <summary>
   Removes an item from the back of the Deque and returns it.
   </summary>
      <returns>The item in the back of the Deque.</returns>
      <exception cref="T:System.InvalidOperationException">The Deque is empty</exception>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.AddRange(IEnumerable{`0})">
      <summary>
   Adds a collection of items to the Deque.
   </summary>
      <param name="collection">The collection to add.</param>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.AddFrontRange(IEnumerable{`0})">
      <summary>
   Adds a collection of items to the front of the Deque.
   </summary>
      <param name="collection">The collection to add.</param>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.AddFrontRange(IEnumerable{`0},System.Int32,System.Int32)">
      <summary>
   Adds count items from a collection of items
   from a specified index to the Deque.
   </summary>
      <param name="collection">The collection to add.</param>
      <param name="fromIndex">The index in the collection to begin adding from.</param>
      <param name="count">The number of items in the collection to add.</param>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.AddBackRange(IEnumerable{`0})">
      <summary>
   Adds a collection of items to the back of the Deque.
   </summary>
      <param name="collection">The collection to add.</param>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.AddBackRange(IEnumerable{`0},System.Int32,System.Int32)">
      <summary>
   Adds count items from a collection of items
   from a specified index to the back of the Deque.
   </summary>
      <param name="collection">The collection to add.</param>
      <param name="fromIndex">The index in the collection to begin adding from.</param>
      <param name="count">The number of items in the collection to add.</param>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.InsertRange(System.Int32,IEnumerable{`0})">
      <summary>
   Inserts a collection of items into the Deque
   at the specified index.
   </summary>
      <param name="index">The index in the Deque to insert the collection.</param>
      <param name="collection">The collection to add.</param>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.InsertRange(System.Int32,IEnumerable{`0},System.Int32,System.Int32)">
      <summary>
   Inserts count items from a collection of items from a specified
   index into the Deque at the specified index.
   </summary>
      <param name="index">The index in the Deque to insert the collection.</param>
      <param name="collection">The collection to add.</param>
      <param name="fromIndex">The index in the collection to begin adding from.</param>
      <param name="count">The number of items in the colleciton to add.</param>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.RemoveRange(System.Int32,System.Int32)">
      <summary>
   Removes a range of elements from the view.
   </summary>
      <param name="index">The index into the view at which the range begins.</param>
      <param name="count">The number of elements in the range. This must be greater
   than 0 and less than or equal to <see cref="P:System.Collections.Generic.Deque`1.Count" />.</param>
      <exception cref="T:System.InvalidOperationException">The Deque is empty</exception>
      <exception cref="T:System.IndexOutOfRangeException">The supplied index is greater than the Count</exception>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.Get(System.Int32)">
      <summary>
   Gets the value at the specified index of the Deque
   </summary>
      <param name="index">The index of the Deque.</param>
      <returns>T.</returns>
    </member>
    <member name="M:System.Collections.Generic.Deque`1.Set(System.Int32,`0)">
      <summary>
   Sets the value at the specified index of the
   Deque to the given item.
   </summary>
      <param name="index">The index of the deque to set the item.</param>
      <param name="item">The item to set at the specified index.</param>
    </member>
    <member name="T:Nez.FastList`1">
      <summary>
   very basic wrapper around an array that auto-expands it when it reaches capacity. Note that when iterating it should be done
   like this accessing the buffer directly but using the FastList.length field:
   for( var i = 0; i &lt;= list.length; i++ )
   var item = list.buffer[i];
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="F:Nez.FastList`1.Buffer">
      <summary>
   direct access to the backing buffer. Do not use buffer.Length! Use FastList.length
   </summary>
    </member>
    <member name="F:Nez.FastList`1.Length">
      <summary>
   direct access to the length of the filled items in the buffer. Do not change.
   </summary>
    </member>
    <member name="M:Nez.FastList`1.#ctor(System.Int32)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.FastList`1" /> class.
   </summary>
      <param name="size">The size.</param>
    </member>
    <member name="M:Nez.FastList`1.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.FastList`1" /> class.
   </summary>
    </member>
    <member name="P:Nez.FastList`1.Item(System.Int32)">
      <summary>
   provided for ease of access though it is recommended to just access the buffer directly.
   </summary>
      <param name="index">Index.</param>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.FastList`1.Clear">
      <summary>
   clears the list and nulls out all items in the buffer
   </summary>
    </member>
    <member name="M:Nez.FastList`1.Reset">
      <summary>
   works just like clear except it does not null our all the items in the buffer. Useful when dealing with structs.
   </summary>
    </member>
    <member name="M:Nez.FastList`1.Add(`0)">
      <summary>
   adds the item to the list
   </summary>
      <param name="item">The item.</param>
    </member>
    <member name="M:Nez.FastList`1.Remove(`0)">
      <summary>
   removes the item from the list
   </summary>
      <param name="item">Item.</param>
    </member>
    <member name="M:Nez.FastList`1.RemoveAt(System.Int32)">
      <summary>
   removes the item at the given index from the list
   </summary>
      <param name="index">The index.</param>
    </member>
    <member name="M:Nez.FastList`1.RemoveAtWithSwap(System.Int32)">
      <summary>
   removes the item at the given index from the list but does NOT maintain list order
   </summary>
      <param name="index">Index.</param>
    </member>
    <member name="M:Nez.FastList`1.Contains(`0)">
      <summary>
   checks to see if item is in the FastList
   </summary>
      <param name="item">Item.</param>
      <returns>
        <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.FastList`1.EnsureCapacity(System.Int32)">
      <summary>
   if the buffer is at its max more space will be allocated to fit additionalItemCount
   </summary>
      <param name="additionalItemCount">The additional item count.</param>
    </member>
    <member name="M:Nez.FastList`1.AddRange(IEnumerable{`0})">
      <summary>
   adds all items from array
   </summary>
      <param name="array">Array.</param>
    </member>
    <member name="M:Nez.FastList`1.Sort">
      <summary>
   sorts all items in the buffer up to length
   </summary>
    </member>
    <member name="M:Nez.FastList`1.Sort(IComparer)">
      <summary>
   sorts all items in the buffer up to length
   </summary>
      <param name="comparer">The comparer.</param>
    </member>
    <member name="M:Nez.FastList`1.Sort(IComparer{`0})">
      <summary>
   sorts all items in the buffer up to length
   </summary>
      <param name="comparer">The comparer.</param>
    </member>
    <member name="T:System.Collections.Generic.IPriorityQueue`1">
      <summary>
   The IPriorityQueue interface.  This is mainly here for purists, and in case I decide to add more implementations later.
   For speed purposes, it is actually recommended that you *don't* access the priority queue through this interface, since the JIT can
   (theoretically?) optimize method calls from concrete-types slightly better.
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Collections.Generic.IPriorityQueue`1.Enqueue(`0,System.Int32)">
      <summary>
   Enqueue a node to the priority queue.  Lower values are placed in front. Ties are broken by first-in-first-out.
   See implementation for how duplicates are handled.
   </summary>
      <param name="node">The node.</param>
      <param name="priority">The priority.</param>
    </member>
    <member name="M:System.Collections.Generic.IPriorityQueue`1.Dequeue">
      <summary>
   Removes the head of the queue (node with minimum priority; ties are broken by order of insertion), and returns it.
   </summary>
      <returns>T.</returns>
    </member>
    <member name="M:System.Collections.Generic.IPriorityQueue`1.Clear">
      <summary>
   Removes every node from the queue.
   </summary>
    </member>
    <member name="M:System.Collections.Generic.IPriorityQueue`1.Contains(`0)">
      <summary>
   Returns whether the given node is in the queue.
   </summary>
      <param name="node">The node.</param>
      <returns>
        <c>true</c> if [contains] [the specified node]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:System.Collections.Generic.IPriorityQueue`1.Remove(`0)">
      <summary>
   Removes a node from the queue.  The node does not need to be the head of the queue.
   </summary>
      <param name="node">The node.</param>
    </member>
    <member name="M:System.Collections.Generic.IPriorityQueue`1.UpdatePriority(`0,System.Int32)">
      <summary>
   Call this method to change the priority of a node.
   </summary>
      <param name="node">The node.</param>
      <param name="priority">The priority.</param>
    </member>
    <member name="P:System.Collections.Generic.IPriorityQueue`1.First">
      <summary>
   Returns the head of the queue, without removing it (use Dequeue() for that).
   </summary>
      <value>The first.</value>
    </member>
    <member name="P:System.Collections.Generic.IPriorityQueue`1.Count">
      <summary>
   Returns the number of nodes in the queue.
   </summary>
      <value>The count.</value>
    </member>
    <member name="T:Nez.ListPool`1">
      <summary>
   simple static class that can be used to pool Lists
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.ListPool`1.WarmCache(System.Int32)">
      <summary>
   warms up the cache filling it with a max of cacheCount objects
   </summary>
      <param name="cacheCount">new cache count</param>
    </member>
    <member name="M:Nez.ListPool`1.TrimCache(System.Int32)">
      <summary>
   trims the cache down to cacheCount items
   </summary>
      <param name="cacheCount">Cache count.</param>
    </member>
    <member name="M:Nez.ListPool`1.ClearCache">
      <summary>
   clears out the cache
   </summary>
    </member>
    <member name="M:Nez.ListPool`1.Obtain">
      <summary>
   pops an item off the stack if available creating a new item as necessary
   </summary>
      <returns>List&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.ListPool`1.Free(List{`0})">
      <summary>
   pushes an item back on the stack
   </summary>
      <param name="obj">Object.</param>
    </member>
    <member name="T:Nez.Pair`1">
      <summary>
   simple DTO for managing a pair of objects
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="F:Nez.Pair`1.First">
      <summary>
   The first
   </summary>
    </member>
    <member name="F:Nez.Pair`1.Second">
      <summary>
   The second
   </summary>
    </member>
    <member name="M:Nez.Pair`1.#ctor(`0,`0)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Pair`1" /> struct.
   </summary>
      <param name="first">The first.</param>
      <param name="second">The second.</param>
    </member>
    <member name="M:Nez.Pair`1.Clear">
      <summary>
   Clears this instance.
   </summary>
    </member>
    <member name="M:Nez.Pair`1.Equals(Pair{`0})">
      <summary>
   Indicates whether the current object is equal to another object of the same type.
   </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Nez.Pair`1.GetHashCode">
      <summary>
   Returns a hash code for this instance.
   </summary>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="T:Nez.Pool`1">
      <summary>
   simple static class that can be used to pool any object
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:Nez.IPoolable">
      <summary>
   Objects implementing this interface will have {@link #reset()} called when passed to {@link #push(Object)}
   </summary>
    </member>
    <member name="M:Nez.Pool`1.WarmCache(System.Int32)">
      <summary>
   warms up the cache filling it with a max of cacheCount objects
   </summary>
      <param name="cacheCount">new cache count</param>
    </member>
    <member name="M:Nez.Pool`1.TrimCache(System.Int32)">
      <summary>
   trims the cache down to cacheCount items
   </summary>
      <param name="cacheCount">Cache count.</param>
    </member>
    <member name="M:Nez.Pool`1.ClearCache">
      <summary>
   clears out the cache
   </summary>
    </member>
    <member name="M:Nez.Pool`1.Obtain">
      <summary>
   pops an item off the stack if available creating a new item as necessary
   </summary>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.Pool`1.Free(`0)">
      <summary>
   pushes an item back on the stack
   </summary>
      <param name="obj">Object.</param>
    </member>
    <member name="M:Nez.IPoolable.Reset">
      <summary>
   Resets the object for reuse. Object references should be nulled and fields may be set to default values
   </summary>
    </member>
    <member name="T:System.Collections.Generic.PriorityQueue`1">
      <summary>
   An implementation of a min-Priority Queue using a heap.  Has O(1) .Contains()!
   See https://github.com/BlueRaja/High-Speed-Priority-Queue-for-C-Sharp/wiki/Getting-Started for more information
   </summary>
      <typeparam name="T">The values in the queue.  Must extend the FastPriorityQueueNode class</typeparam>
    </member>
    <member name="M:System.Collections.Generic.PriorityQueue`1.#ctor(System.Int32)">
      <summary>
   Instantiate a new Priority Queue
   </summary>
      <param name="maxNodes">The max nodes ever allowed to be enqueued (going over this will cause undefined behavior)</param>
    </member>
    <member name="P:System.Collections.Generic.PriorityQueue`1.Count">
      <summary>
   Returns the number of nodes in the queue.
   O(1)
   </summary>
      <value>The count.</value>
    </member>
    <member name="P:System.Collections.Generic.PriorityQueue`1.MaxSize">
      <summary>
   Returns the maximum number of items that can be enqueued at once in this queue.  Once you hit this number (ie. once Count == MaxSize),
   attempting to enqueue another item will cause undefined behavior.  O(1)
   </summary>
      <value>The maximum size.</value>
    </member>
    <member name="M:System.Collections.Generic.PriorityQueue`1.Clear">
      <summary>
   Removes every node from the queue.
   O(n) (So, don't do this often!)
   </summary>
    </member>
    <member name="M:System.Collections.Generic.PriorityQueue`1.Contains(`0)">
      <summary>
   Returns (in O(1)!) whether the given node is in the queue.  O(1)
   </summary>
      <param name="node">The node.</param>
      <returns>
        <c>true</c> if [contains] [the specified node]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:System.Collections.Generic.PriorityQueue`1.Enqueue(`0,System.Int32)">
      <summary>
   Enqueue a node to the priority queue.  Lower values are placed in front. Ties are broken by first-in-first-out.
   If the queue is full, the result is undefined.
   If the node is already enqueued, the result is undefined.
   O(log n)
   </summary>
      <param name="node">The node.</param>
      <param name="priority">The priority.</param>
    </member>
    <member name="M:System.Collections.Generic.PriorityQueue`1.Dequeue">
      <summary>
   Removes the head of the queue (node with minimum priority; ties are broken by order of insertion), and returns it.
   If queue is empty, result is undefined
   O(log n)
   </summary>
      <returns>T.</returns>
    </member>
    <member name="M:System.Collections.Generic.PriorityQueue`1.Resize(System.Int32)">
      <summary>
   Resize the queue so it can accept more nodes.  All currently enqueued nodes are remain.
   Attempting to decrease the queue size to a size too small to hold the existing nodes results in undefined behavior
   O(n)
   </summary>
      <param name="maxNodes">The maximum nodes.</param>
    </member>
    <member name="P:System.Collections.Generic.PriorityQueue`1.First">
      <summary>
   Returns the head of the queue, without removing it (use Dequeue() for that).
   If the queue is empty, behavior is undefined.
   O(1)
   </summary>
      <value>The first.</value>
    </member>
    <member name="M:System.Collections.Generic.PriorityQueue`1.UpdatePriority(`0,System.Int32)">
      <summary>
   This method must be called on a node every time its priority changes while it is in the queue.
   <b>Forgetting to call this method will result in a corrupted queue!</b>
   Calling this method on a node not in the queue results in undefined behavior
   O(log n)
   </summary>
      <param name="node">The node.</param>
      <param name="priority">The priority.</param>
    </member>
    <member name="M:System.Collections.Generic.PriorityQueue`1.Remove(`0)">
      <summary>
   Removes a node from the queue.  The node does not need to be the head of the queue.
   If the node is not in the queue, the result is undefined.  If unsure, check Contains() first
   O(log n)
   </summary>
      <param name="node">The node.</param>
    </member>
    <member name="M:System.Collections.Generic.PriorityQueue`1.GetEnumerator">
      <summary>
   Returns an enumerator that iterates through the collection.
   </summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.PriorityQueue`1.IsValidQueue">
      <summary>
        <b>Should not be called in production code.</b>
   Checks to make sure the queue is still in a valid state.  Used for testing/debugging the queue.
   </summary>
      <returns>
        <c>true</c> if [is valid queue]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:System.Collections.Generic.PriorityQueueNode">
      <summary>
   Class PriorityQueueNode.
   </summary>
    </member>
    <member name="P:System.Collections.Generic.PriorityQueueNode.Priority">
      <summary>
   The Priority to insert this node at.  Must be set BEFORE adding a node to the queue
   </summary>
      <value>The priority.</value>
    </member>
    <member name="P:System.Collections.Generic.PriorityQueueNode.InsertionIndex">
      <summary>
        <b>Used by the priority queue - do not edit this value.</b>
   Represents the order the node was inserted in
   </summary>
      <value>The index of the insertion.</value>
    </member>
    <member name="P:System.Collections.Generic.PriorityQueueNode.QueueIndex">
      <summary>
        <b>Used by the priority queue - do not edit this value.</b>
   Represents the current position in the queue
   </summary>
      <value>The index of the queue.</value>
    </member>
    <member name="T:System.Collections.Generic.SimplePriorityQueue`1">
      <summary>
   Class SimplePriorityQueue. This class cannot be inherited.
   Implements the <see cref="T:System.Collections.Generic.IPriorityQueue`1" /></summary>
      <typeparam name="T">
      </typeparam>
      <seealso cref="T:System.Collections.Generic.IPriorityQueue`1" />
    </member>
    <member name="M:System.Collections.Generic.SimplePriorityQueue`1.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:System.Collections.Generic.SimplePriorityQueue`1" /> class.
   </summary>
    </member>
    <member name="P:System.Collections.Generic.SimplePriorityQueue`1.Count">
      <summary>
   Returns the number of nodes in the queue.
   O(1)
   </summary>
      <value>The count.</value>
    </member>
    <member name="P:System.Collections.Generic.SimplePriorityQueue`1.First">
      <summary>
   Returns the head of the queue, without removing it (use Dequeue() for that).
   Throws an exception when the queue is empty.
   O(1)
   </summary>
      <value>The first.</value>
      <exception cref="T:System.InvalidOperationException">Cannot call .First on an empty queue</exception>
    </member>
    <member name="M:System.Collections.Generic.SimplePriorityQueue`1.Clear">
      <summary>
   Removes every node from the queue.
   O(n)
   </summary>
    </member>
    <member name="M:System.Collections.Generic.SimplePriorityQueue`1.Contains(`0)">
      <summary>
   Returns whether the given item is in the queue.
   O(n)
   </summary>
      <param name="item">The item.</param>
      <returns>
        <c>true</c> if [contains] [the specified node]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:System.Collections.Generic.SimplePriorityQueue`1.Dequeue">
      <summary>
   Removes the head of the queue (node with minimum priority; ties are broken by order of insertion), and returns it.
   If queue is empty, throws an exception
   O(log n)
   </summary>
      <returns>T.</returns>
      <exception cref="T:System.InvalidOperationException">Cannot call Dequeue() on an empty queue</exception>
    </member>
    <member name="M:System.Collections.Generic.SimplePriorityQueue`1.Enqueue(`0,System.Int32)">
      <summary>
   Enqueue a node to the priority queue.  Lower values are placed in front. Ties are broken by first-in-first-out.
   This queue automatically resizes itself, so there's no concern of the queue becoming 'full'.
   Duplicates are allowed.
   O(log n)
   </summary>
      <param name="item">The item.</param>
      <param name="priority">The priority.</param>
    </member>
    <member name="M:System.Collections.Generic.SimplePriorityQueue`1.Remove(`0)">
      <summary>
   Removes an item from the queue.  The item does not need to be the head of the queue.
   If the item is not in the queue, an exception is thrown.  If unsure, check Contains() first.
   If multiple copies of the item are enqueued, only the first one is removed.
   O(n)
   </summary>
      <param name="item">The item.</param>
      <exception cref="T:System.InvalidOperationException">Cannot call Remove() on a node which is not enqueued: " + item</exception>
    </member>
    <member name="M:System.Collections.Generic.SimplePriorityQueue`1.UpdatePriority(`0,System.Int32)">
      <summary>
   Call this method to change the priority of an item.
   Calling this method on a item not in the queue will throw an exception.
   If the item is enqueued multiple times, only the first one will be updated.
   (If your requirements are complex enough that you need to enqueue the same item multiple times <i>and</i> be able
   to update all of them, please wrap your items in a wrapper class so they can be distinguished).
   O(n)
   </summary>
      <param name="item">The item.</param>
      <param name="priority">The priority.</param>
      <exception cref="T:System.InvalidOperationException">Cannot call UpdatePriority() on a node which is not enqueued: " + item</exception>
    </member>
    <member name="M:System.Collections.Generic.SimplePriorityQueue`1.GetEnumerator">
      <summary>
   Returns an enumerator that iterates through the collection.
   </summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.SimplePriorityQueue`1.IsValidQueue">
      <summary>
   Determines whether [is valid queue].
   </summary>
      <returns>
        <c>true</c> if [is valid queue]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:Nez.ICoroutine">
      <summary>
   interface returned by startCoroutine which provides the ability to stop the coroutine mid-flight
   </summary>
    </member>
    <member name="T:Nez.Coroutine">
      <summary>
   Class Coroutine.
   </summary>
    </member>
    <member name="M:Nez.ICoroutine.Stop">
      <summary>
   stops the Coroutine
   </summary>
    </member>
    <member name="M:Nez.ICoroutine.SetUseUnscaledDeltaTime(System.Boolean)">
      <summary>
   sets whether the Coroutine should use deltaTime or unscaledDeltaTime for timing
   </summary>
      <param name="useUnscaledDeltaTime">If set to <c>true</c> use unscaled delta time.</param>
      <returns>The use unscaled delta time.</returns>
    </member>
    <member name="M:Nez.Coroutine.WaitForSeconds(System.Single)">
      <summary>
   causes a Coroutine to pause for the specified duration. Yield on Coroutine.waitForSeconds in a coroutine to use.
   </summary>
      <param name="seconds">Seconds.</param>
      <returns>The for seconds.</returns>
    </member>
    <member name="T:Nez.Systems.CoroutineManager">
      <summary>
   basic CoroutineManager. Coroutines can do the following:
   - yield return null (tick again the next frame)
   - yield return Coroutine.waitForSeconds( 3 ) (tick again after a 3 second delay)
   - yield return Coroutine.waitForSeconds( 5.5f ) (tick again after a 5.5 second delay)
   - yield return startCoroutine( another() ) (wait for the other coroutine before getting ticked again)
   </summary>
    </member>
    <member name="M:Nez.Systems.CoroutineManager.ClearAllCoroutines">
      <summary>
   Immediately stops and clears all coroutines. Do not to call this from inside one of the manager's coroutines.
   </summary>
    </member>
    <member name="M:Nez.Systems.CoroutineManager.StartCoroutine(IEnumerator)">
      <summary>
   adds the IEnumerator to the CoroutineManager. Coroutines get ticked before Update is called each frame.
   </summary>
      <param name="enumerator">Enumerator.</param>
      <returns>The coroutine.</returns>
    </member>
    <member name="M:Nez.Systems.CoroutineManager.Update">
      <summary>
   called each frame before Scene.update
   </summary>
    </member>
    <member name="T:Nez.ArrayExt">
      <summary>
   Class ArrayExt.
   </summary>
    </member>
    <member name="M:Nez.ArrayExt.Contains``1(``0[],``0)">
      <summary>
   checks to see if value exists in source
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="source">Source.</param>
      <param name="value">Value.</param>
      <returns>
        <c>true</c> if [contains] [the specified value]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:Nez.ColorExt">
      <summary>
   Class ColorExt.
   </summary>
    </member>
    <member name="M:Nez.ColorExt.HexToByte(System.Char)">
      <summary>
   Hexadecimals to byte.
   </summary>
      <param name="c">The c.</param>
      <returns>System.Byte.</returns>
    </member>
    <member name="M:Nez.ColorExt.Invert(Color)">
      <summary>
   Inverts the specified color.
   </summary>
      <param name="color">The color.</param>
      <returns>Color.</returns>
    </member>
    <member name="M:Nez.ColorExt.HexToColor(System.String)">
      <summary>
   Hexadecimals to color.
   </summary>
      <param name="hex">The hexadecimal.</param>
      <returns>Color.</returns>
    </member>
    <member name="M:Nez.ColorExt.HexToColor(System.Int32)">
      <summary>
   Hexadecimals to color.
   </summary>
      <param name="hex">The hexadecimal.</param>
      <returns>Color.</returns>
    </member>
    <member name="M:Nez.ColorExt.Create(Color,System.Int32)">
      <summary>
   Creates the specified color.
   </summary>
      <param name="color">The color.</param>
      <param name="alpha">The alpha.</param>
      <returns>Color.</returns>
    </member>
    <member name="M:Nez.ColorExt.Create(Color,System.Single)">
      <summary>
   Creates the specified color.
   </summary>
      <param name="color">The color.</param>
      <param name="alpha">The alpha.</param>
      <returns>Color.</returns>
    </member>
    <member name="M:Nez.ColorExt.Grayscale(Color)">
      <summary>
   Grayscales the specified color.
   </summary>
      <param name="color">The color.</param>
      <returns>Color.</returns>
    </member>
    <member name="M:Nez.ColorExt.Add(Color,Color)">
      <summary>
   Adds the specified second.
   </summary>
      <param name="color">The color.</param>
      <param name="second">The second.</param>
      <returns>Color.</returns>
    </member>
    <member name="M:Nez.ColorExt.Subtract(Color,Color)">
      <summary>
   first - second
   </summary>
      <param name="color">The color.</param>
      <param name="second">The second.</param>
      <returns>Color.</returns>
    </member>
    <member name="M:Nez.ColorExt.Multiply(Color,Color)">
      <summary>
   Multiplies the specified second.
   </summary>
      <param name="self">The self.</param>
      <param name="second">The second.</param>
      <returns>Color.</returns>
    </member>
    <member name="M:Nez.ColorExt.Lerp(Color,Color,System.Single)">
      <summary>
   linearly interpolates Color from - to
   </summary>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="t">T.</param>
      <returns>Color.</returns>
    </member>
    <member name="M:Nez.ColorExt.Lerp(Color@,Color@,Color@,System.Single)">
      <summary>
   linearly interpolates Color from - to
   </summary>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="result">The result.</param>
      <param name="t">T.</param>
    </member>
    <member name="M:Nez.ColorExt.RgbToHsl(Color)">
      <summary>
   RGBs to HSL.
   </summary>
      <param name="color">The color.</param>
      <returns>System.ValueTuple&lt;System.Single, System.Single, System.Single&gt;.</returns>
    </member>
    <member name="M:Nez.ColorExt.HslToRgb(System.Single,System.Single,System.Single)">
      <summary>
   HSLs to RGB.
   </summary>
      <param name="h">The h.</param>
      <param name="s">The s.</param>
      <param name="l">The l.</param>
      <returns>Color.</returns>
    </member>
    <member name="T:Nez.ComponentExt">
      <summary>
   Class ComponentExt.
   </summary>
    </member>
    <member name="M:Nez.ComponentExt.AddComponent``1(Component,``0)">
      <summary>
   Adds the component.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="self">The self.</param>
      <param name="component">The component.</param>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.ComponentExt.AddComponent``1(Component)">
      <summary>
   Adds the component.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="self">The self.</param>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.ComponentExt.GetComponent``1(Component)">
      <summary>
   Gets the component.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="self">The self.</param>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.ComponentExt.HasComponent``1(Component)">
      <summary>
   Determines whether the specified self has component.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="self">The self.</param>
      <returns>
        <c>true</c> if the specified self has component; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.ComponentExt.GetComponents``1(Component,List{``0})">
      <summary>
   Gets the components.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="self">The self.</param>
      <param name="componentList">The component list.</param>
    </member>
    <member name="M:Nez.ComponentExt.GetComponents``1(Component)">
      <summary>
   Gets the components.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="self">The self.</param>
      <returns>List&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.ComponentExt.RemoveComponent``1(Component)">
      <summary>
   Removes the component.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="self">The self.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.ComponentExt.RemoveComponent(Component,Component)">
      <summary>
   Removes the component.
   </summary>
      <param name="self">The self.</param>
      <param name="component">The component.</param>
    </member>
    <member name="M:Nez.ComponentExt.RemoveComponent(Component)">
      <summary>
   Removes the component.
   </summary>
      <param name="self">The self.</param>
    </member>
    <member name="T:Nez.EdgeExt">
      <summary>
   Class EdgeExt.
   </summary>
    </member>
    <member name="M:Nez.EdgeExt.OppositeEdge(Edge)">
      <summary>
   Opposites the edge.
   </summary>
      <param name="self">The self.</param>
      <returns>Edge.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:Nez.EdgeExt.IsMax(Edge)">
      <summary>
   returns true if the Edge is Right or Bottom
   </summary>
      <param name="self">Self.</param>
      <returns>The max.</returns>
    </member>
    <member name="M:Nez.EdgeExt.IsMin(Edge)">
      <summary>
   returns true if the Edge is Left or Top
   </summary>
      <param name="self">Self.</param>
      <returns>The minimum.</returns>
    </member>
    <member name="M:Nez.EdgeExt.IsHorizontal(Edge)">
      <summary>
   returns true if the Edge is Right or Left
   </summary>
      <param name="self">Self.</param>
      <returns>The horizontal.</returns>
    </member>
    <member name="M:Nez.EdgeExt.IsVertical(Edge)">
      <summary>
   returns true if the Edge is Top or Bottom
   </summary>
      <param name="self">Self.</param>
      <returns>The vertical.</returns>
    </member>
    <member name="T:Nez.EntityExt">
      <summary>
   Class EntityExt.
   </summary>
    </member>
    <member name="M:Nez.EntityExt.SetParent(Entity,Transform)">
      <summary>
   Sets the parent.
   </summary>
      <param name="self">The self.</param>
      <param name="parent">The parent.</param>
      <returns>Entity.</returns>
    </member>
    <member name="M:Nez.EntityExt.SetParent(Entity,Entity)">
      <summary>
   Sets the parent.
   </summary>
      <param name="self">The self.</param>
      <param name="entity">The entity.</param>
      <returns>Entity.</returns>
    </member>
    <member name="M:Nez.EntityExt.SetPosition(Entity,Vector2)">
      <summary>
   Sets the position.
   </summary>
      <param name="self">The self.</param>
      <param name="position">The position.</param>
      <returns>Entity.</returns>
    </member>
    <member name="M:Nez.EntityExt.SetPosition(Entity,System.Single,System.Single)">
      <summary>
   Sets the position.
   </summary>
      <param name="self">The self.</param>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <returns>Entity.</returns>
    </member>
    <member name="M:Nez.EntityExt.SetLocalPosition(Entity,Vector2)">
      <summary>
   Sets the local position.
   </summary>
      <param name="self">The self.</param>
      <param name="localPosition">The local position.</param>
      <returns>Entity.</returns>
    </member>
    <member name="M:Nez.EntityExt.SetRotation(Entity,System.Single)">
      <summary>
   Sets the rotation.
   </summary>
      <param name="self">The self.</param>
      <param name="radians">The radians.</param>
      <returns>Entity.</returns>
    </member>
    <member name="M:Nez.EntityExt.SetRotationDegrees(Entity,System.Single)">
      <summary>
   Sets the rotation degrees.
   </summary>
      <param name="self">The self.</param>
      <param name="degrees">The degrees.</param>
      <returns>Entity.</returns>
    </member>
    <member name="M:Nez.EntityExt.SetLocalRotation(Entity,System.Single)">
      <summary>
   Sets the local rotation.
   </summary>
      <param name="self">The self.</param>
      <param name="radians">The radians.</param>
      <returns>Entity.</returns>
    </member>
    <member name="M:Nez.EntityExt.SetLocalRotationDegrees(Entity,System.Single)">
      <summary>
   Sets the local rotation degrees.
   </summary>
      <param name="self">The self.</param>
      <param name="degrees">The degrees.</param>
      <returns>Entity.</returns>
    </member>
    <member name="M:Nez.EntityExt.SetScale(Entity,Vector2)">
      <summary>
   Sets the scale.
   </summary>
      <param name="self">The self.</param>
      <param name="scale">The scale.</param>
      <returns>Entity.</returns>
    </member>
    <member name="M:Nez.EntityExt.SetScale(Entity,System.Single)">
      <summary>
   Sets the scale.
   </summary>
      <param name="self">The self.</param>
      <param name="scale">The scale.</param>
      <returns>Entity.</returns>
    </member>
    <member name="M:Nez.EntityExt.SetLocalScale(Entity,Vector2)">
      <summary>
   Sets the local scale.
   </summary>
      <param name="self">The self.</param>
      <param name="scale">The scale.</param>
      <returns>Entity.</returns>
    </member>
    <member name="M:Nez.EntityExt.SetLocalScale(Entity,System.Single)">
      <summary>
   Sets the local scale.
   </summary>
      <param name="self">The self.</param>
      <param name="scale">The scale.</param>
      <returns>Entity.</returns>
    </member>
    <member name="T:Nez.FloatExt">
      <summary>
   Class FloatExt.
   </summary>
    </member>
    <member name="M:Nez.FloatExt.Approximately(System.Single,System.Single)">
      <summary>
   Approximatelies the specified other.
   </summary>
      <param name="self">The self.</param>
      <param name="other">The other.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="T:Nez.GameServiceContainerExt">
      <summary>
   Class GameServiceContainerExt.
   </summary>
    </member>
    <member name="M:Nez.GameServiceContainerExt.AddService``1(GameServiceContainer,``0)">
      <summary>
   Adds the service and returns the added service for method chaining
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="self">Self.</param>
      <param name="provider">Provider.</param>
      <returns>The service.</returns>
    </member>
    <member name="M:Nez.GameServiceContainerExt.GetService``1(GameServiceContainer)">
      <summary>
   Gets the service
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="self">Self.</param>
      <returns>The service.</returns>
    </member>
    <member name="M:Nez.GameServiceContainerExt.GetOrAddService``1(GameServiceContainer)">
      <summary>
   attempts to get the service and if it does not exist it will be created. Requires a parameterless
   constructor.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="self">Self.</param>
      <returns>The or add service.</returns>
    </member>
    <member name="T:Nez.GestureSampleExt">
      <summary>
   Class GestureSampleExt.
   </summary>
    </member>
    <member name="M:Nez.GestureSampleExt.ScaledPosition(GestureSample)">
      <summary>
   Scaleds the position.
   </summary>
      <param name="gestureSample">The gesture sample.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.GestureSampleExt.ScaledPosition2(GestureSample)">
      <summary>
   Scaleds the position2.
   </summary>
      <param name="gestureSample">The gesture sample.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="T:Nez.IEnumerableExtensions.IEnumerableExt">
      <summary>
   Class IEnumerableExt.
   </summary>
    </member>
    <member name="M:Nez.IEnumerableExtensions.IEnumerableExt.Count``1(IEnumerable{``0})">
      <summary>
   Jon Skeet's excellent reimplementation of LINQ Count.
   </summary>
      <typeparam name="TSource">The source type.</typeparam>
      <param name="source">The source IEnumerable.</param>
      <returns>The number of items in the source.</returns>
    </member>
    <member name="T:Nez.KeysExt">
      <summary>
   Class KeysExt.
   </summary>
    </member>
    <member name="M:Nez.KeysExt.GetChar(Keys)">
      <summary>
   Gets the character.
   </summary>
      <param name="key">The key.</param>
      <returns>System.Nullable&lt;System.Char&gt;.</returns>
    </member>
    <member name="T:Nez.ListExt">
      <summary>
   Class ListExt.
   </summary>
    </member>
    <member name="M:Nez.ListExt.Shuffle``1(IList{``0})">
      <summary>
   shuffles the list in place
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="list">List.</param>
    </member>
    <member name="M:Nez.ListExt.AddIfNotPresent``1(IList{``0},``0)">
      <summary>
   returns false if the item is already in the List and true if it was successfully added.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="list">List.</param>
      <param name="item">Item.</param>
      <returns>The if not present.</returns>
    </member>
    <member name="M:Nez.ListExt.LastItem``1(IList{``0})">
      <summary>
   returns the last item in the list. List should have at least one item.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="list">List.</param>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.ListExt.RandomItem``1(IList{``0})">
      <summary>
   gets a random item from the list. Does not empty check the list!
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="list">List.</param>
      <returns>The item.</returns>
    </member>
    <member name="M:Nez.ListExt.RandomItems``1(IList{``0},System.Int32)">
      <summary>
   gets random items from the list. Does not empty check the list or verify that list count is greater than item count! The returned List can be put back in the pool via ListPool.free.
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="list">List.</param>
      <param name="itemCount">The number of random items to return from the list.</param>
      <returns>The item.</returns>
    </member>
    <member name="T:Nez.MemberInfoExt">
      <summary>
   Class MemberInfoExt.
   </summary>
    </member>
    <member name="M:Nez.MemberInfoExt.GetAttribute``1(MemberInfo)">
      <summary>
   for some reason, GetCustomAttributes doesnt actually filter properly and throws a "Multiple custom attributes
   of the same type found" Exception if there are multiple (but differnt) attriburtes. This method fixes that issue.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="self">The self.</param>
      <returns>T.</returns>
    </member>
    <member name="T:Nez.ObjectExt">
      <summary>
   Class ObjectExt.
   </summary>
    </member>
    <member name="M:Nez.ObjectExt.Tween(System.Object,System.String,System.Int32,System.Single)">
      <summary>
   tweens an int field or property
   </summary>
      <param name="self">The self.</param>
      <param name="memberName">Name of the member.</param>
      <param name="to">To.</param>
      <param name="duration">The duration.</param>
      <returns>ITween&lt;System.Int32&gt;.</returns>
    </member>
    <member name="M:Nez.ObjectExt.Tween(System.Object,System.String,System.Single,System.Single)">
      <summary>
   tweens a float field or property
   </summary>
      <param name="self">The self.</param>
      <param name="memberName">Name of the member.</param>
      <param name="to">To.</param>
      <param name="duration">The duration.</param>
      <returns>ITween&lt;System.Single&gt;.</returns>
    </member>
    <member name="M:Nez.ObjectExt.Tween(System.Object,System.String,Color,System.Single)">
      <summary>
   tweens a Color field or property
   </summary>
      <param name="self">The self.</param>
      <param name="memberName">Name of the member.</param>
      <param name="to">To.</param>
      <param name="duration">The duration.</param>
      <returns>ITween&lt;Color&gt;.</returns>
    </member>
    <member name="M:Nez.ObjectExt.Tween(System.Object,System.String,Vector2,System.Single)">
      <summary>
   tweens a Vector2 field or property
   </summary>
      <param name="self">The self.</param>
      <param name="memberName">Name of the member.</param>
      <param name="to">To.</param>
      <param name="duration">The duration.</param>
      <returns>ITween&lt;Vector2&gt;.</returns>
    </member>
    <member name="M:Nez.ObjectExt.Tween(System.Object,System.String,Vector3,System.Single)">
      <summary>
   tweens a Vector3 field or property
   </summary>
      <param name="self">The self.</param>
      <param name="memberName">Name of the member.</param>
      <param name="to">To.</param>
      <param name="duration">The duration.</param>
      <returns>ITween&lt;Vector3&gt;.</returns>
    </member>
    <member name="T:Nez.RectangleExt">
      <summary>
   Class RectangleExt.
   </summary>
    </member>
    <member name="M:Nez.RectangleExt.GetSide(Rectangle,Edge)">
      <summary>
   gets the position of the specified side
   </summary>
      <param name="rect">The rect.</param>
      <param name="edge">Side.</param>
      <returns>The side.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:Nez.RectangleExt.GetHalfRect(Rectangle,Edge)">
      <summary>
   Gets the half rect.
   </summary>
      <param name="rect">The rect.</param>
      <param name="edge">The edge.</param>
      <returns>Rectangle.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:Nez.RectangleExt.GetRectEdgePortion(Rectangle,Edge,System.Int32)">
      <summary>
   gets a portion of the Rectangle with a width/height of size that is on the Edge of the Rectangle but still contained within it.
   </summary>
      <param name="rect">Rect.</param>
      <param name="edge">Edge.</param>
      <param name="size">Size.</param>
      <returns>The rect edge portion.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:Nez.RectangleExt.ExpandSide(Rectangle@,Edge,System.Int32)">
      <summary>
   Expands the side.
   </summary>
      <param name="rect">The rect.</param>
      <param name="edge">The edge.</param>
      <param name="amount">The amount.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:Nez.RectangleExt.Contract(Rectangle@,System.Int32,System.Int32)">
      <summary>
   Contracts the specified rect.
   </summary>
      <param name="rect">The rect.</param>
      <param name="horizontalAmount">The horizontal amount.</param>
      <param name="verticalAmount">The vertical amount.</param>
    </member>
    <member name="M:Nez.RectangleExt.FromFloats(System.Single,System.Single,System.Single,System.Single)">
      <summary>
   returns a rectangle from the passed in floats
   </summary>
      <param name="x">The x coordinate.</param>
      <param name="y">The y coordinate.</param>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
      <returns>The floats.</returns>
    </member>
    <member name="M:Nez.RectangleExt.FromMinMaxPoints(Point,Point)">
      <summary>
   creates a Rectangle given min/max points (top-left, bottom-right points)
   </summary>
      <param name="min">Minimum.</param>
      <param name="max">Max.</param>
      <returns>The minimum max points.</returns>
    </member>
    <member name="M:Nez.RectangleExt.Union(Rectangle@,Rectangle@,Rectangle@)">
      <summary>
   calculates the union of the two Rectangles. The result will be a rectangle that encompasses the other two.
   </summary>
      <param name="value1">The value1.</param>
      <param name="value2">The value2.</param>
      <param name="result">The result.</param>
    </member>
    <member name="M:Nez.RectangleExt.Union(Rectangle@,Point@,Rectangle@)">
      <summary>
   Update first to be the union of first and point
   </summary>
      <param name="first">First.</param>
      <param name="point">Point.</param>
      <param name="result">Result.</param>
    </member>
    <member name="M:Nez.RectangleExt.BoundsFromPolygonPoints(Vector2[])">
      <summary>
   given the points of a polygon calculates the bounds
   </summary>
      <param name="points">Points.</param>
      <returns>The from polygon points.</returns>
    </member>
    <member name="M:Nez.RectangleExt.CalculateBounds(Rectangle@,Vector2,Vector2,Vector2,Vector2,System.Single,System.Single,System.Single)">
      <summary>
   Calculates the bounds.
   </summary>
      <param name="rect">The rect.</param>
      <param name="parentPosition">The parent position.</param>
      <param name="position">The position.</param>
      <param name="origin">The origin.</param>
      <param name="scale">The scale.</param>
      <param name="rotation">The rotation.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
    </member>
    <member name="M:Nez.RectangleExt.Clone(Rectangle)">
      <summary>
   clones and returns a new Rectangle with the same data as the current rectangle
   </summary>
      <param name="rect">Rect.</param>
      <returns>Rectangle.</returns>
    </member>
    <member name="M:Nez.RectangleExt.Scale(Rectangle@,Vector2)">
      <summary>
   scales the rect
   </summary>
      <param name="rect">Rect.</param>
      <param name="scale">Scale.</param>
    </member>
    <member name="M:Nez.RectangleExt.Translate(Rectangle@,Vector2)">
      <summary>
   Translates the specified rect.
   </summary>
      <param name="rect">The rect.</param>
      <param name="vec">The vec.</param>
    </member>
    <member name="M:Nez.RectangleExt.RayIntersects(Rectangle@,Ray2D@,System.Single@)">
      <summary>
   Rays the intersects.
   </summary>
      <param name="rect">The rect.</param>
      <param name="ray">The ray.</param>
      <param name="distance">The distance.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.RectangleExt.RayIntersects(Rectangle,Ray)">
      <summary>
   Rays the intersects.
   </summary>
      <param name="rectangle">The rectangle.</param>
      <param name="ray">The ray.</param>
      <returns>System.Nullable&lt;System.Single&gt;.</returns>
    </member>
    <member name="M:Nez.RectangleExt.GetSweptBroadphaseBounds(Rectangle@,System.Single,System.Single)">
      <summary>
   returns a Bounds the spans the current bounds and the provided delta positions
   </summary>
      <param name="rect">The rect.</param>
      <param name="deltaX">The delta x.</param>
      <param name="deltaY">The delta y.</param>
      <returns>The swept broadphase box.</returns>
    </member>
    <member name="M:Nez.RectangleExt.GetSweptBroadphaseBounds(Rectangle@,System.Int32,System.Int32)">
      <summary>
   returns a Bounds the spans the current bounds and the provided delta positions
   </summary>
      <param name="rect">The rect.</param>
      <param name="deltaX">The delta x.</param>
      <param name="deltaY">The delta y.</param>
      <returns>The swept broadphase box.</returns>
    </member>
    <member name="M:Nez.RectangleExt.Intersect(Rectangle@,Rectangle@)">
      <summary>
   returns true if rect1 intersects rect2
   </summary>
      <param name="rect1">The rect1.</param>
      <param name="rect2">The rect2.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.RectangleExt.CollisionCheck(Rectangle@,Rectangle@,System.Single@,System.Single@)">
      <summary>
   returns true if the boxes are colliding
   moveX and moveY will return the movement that b1 must move to avoid the collision
   </summary>
      <param name="rect">The rect.</param>
      <param name="other">Other.</param>
      <param name="moveX">Move x.</param>
      <param name="moveY">Move y.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.RectangleExt.GetIntersectionDepth(Rectangle@,Rectangle@)">
      <summary>
   Calculates the signed depth of intersection between two rectangles.
   </summary>
      <param name="rectA">The rect a.</param>
      <param name="rectB">The rect b.</param>
      <returns>The amount of overlap between two intersecting rectangles. These depth values can be negative depending on which sides the rectangles
   intersect. This allows callers to determine the correct direction to push objects in order to resolve collisions.
   If the rectangles are not intersecting, Vector2.Zero is returned.</returns>
    </member>
    <member name="M:Nez.RectangleExt.GetClosestPointOnBoundsToOrigin(Rectangle@)">
      <summary>
   Gets the closest point on bounds to origin.
   </summary>
      <param name="rect">The rect.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.RectangleExt.GetClosestPointOnRectangleToPoint(Rectangle@,Vector2)">
      <summary>
   returns the closest point that is in or on the Rectangle to the given point
   </summary>
      <param name="rect">Rect.</param>
      <param name="point">Point.</param>
      <returns>The closest point on rectangle to point.</returns>
    </member>
    <member name="M:Nez.RectangleExt.GetClosestPointOnRectangleBorderToPoint(Rectangle@,Vector2)">
      <summary>
   gets the closest point that is on the rectangle border to the given point
   </summary>
      <param name="rect">Rect.</param>
      <param name="point">Point.</param>
      <returns>The closest point on rectangle border to point.</returns>
    </member>
    <member name="M:Nez.RectangleExt.GetCenter(Rectangle@)">
      <summary>
   gets the center point of the rectangle as a Vector2
   </summary>
      <param name="rect">Rect.</param>
      <returns>The center.</returns>
    </member>
    <member name="M:Nez.RectangleExt.GetCenter(Rectangle)">
      <summary>
   gets the center point of the rectangle as a Vector2
   </summary>
      <param name="rect">Rect.</param>
      <returns>The center.</returns>
    </member>
    <member name="M:Nez.RectangleExt.GetHalfSize(Rectangle)">
      <summary>
   gets the half size of the rect
   </summary>
      <param name="rect">Rect.</param>
      <returns>The half size.</returns>
    </member>
    <member name="M:Nez.RectangleExt.GetMax(Rectangle@)">
      <summary>
   gets the max point of the rectangle, the bottom-right corner
   </summary>
      <param name="rect">Rect.</param>
      <returns>The max.</returns>
    </member>
    <member name="M:Nez.RectangleExt.GetSize(Rectangle)">
      <summary>
   Gets the size of the Rectangle
   </summary>
      <param name="rect">The rect.</param>
      <returns>Point.</returns>
    </member>
    <member name="M:Nez.RectangleExt.GetPosition(Rectangle@)">
      <summary>
   gets the position of the rectangle as a Vector2
   </summary>
      <param name="rect">Rect.</param>
      <returns>The position.</returns>
    </member>
    <member name="T:Nez.SpriteBatchExt">
      <summary>
   Class SpriteBatchExt.
   </summary>
    </member>
    <member name="M:Nez.SpriteBatchExt.DrawLine(SpriteBatch,Vector2,Vector2,Color)">
      <summary>
   Draws the line.
   </summary>
      <param name="spriteBatch">The sprite batch.</param>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.SpriteBatchExt.DrawLine(SpriteBatch,Vector2,Vector2,Color,System.Single)">
      <summary>
   Draws the line.
   </summary>
      <param name="spriteBatch">The sprite batch.</param>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <param name="color">The color.</param>
      <param name="thickness">The thickness.</param>
    </member>
    <member name="M:Nez.SpriteBatchExt.DrawLine(SpriteBatch,System.Single,System.Single,System.Single,System.Single,Color)">
      <summary>
   Draws the line.
   </summary>
      <param name="spriteBatch">The sprite batch.</param>
      <param name="x1">The x1.</param>
      <param name="y1">The y1.</param>
      <param name="x2">The x2.</param>
      <param name="y2">The y2.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.SpriteBatchExt.DrawPoints(SpriteBatch,List{Vector2},Color,System.Single)">
      <summary>
   Draws a list of connected points
   </summary>
      <param name="spriteBatch">The sprite batch.</param>
      <param name="points">The points to connect with lines</param>
      <param name="color">The color to use</param>
      <param name="thickness">The thickness of the lines</param>
    </member>
    <member name="M:Nez.SpriteBatchExt.DrawPoints(SpriteBatch,Vector2[],Color,System.Single)">
      <summary>
   Draws a list of connected points
   </summary>
      <param name="spriteBatch">The sprite batch.</param>
      <param name="points">The points to connect with lines</param>
      <param name="color">The color to use</param>
      <param name="thickness">The thickness of the lines</param>
    </member>
    <member name="M:Nez.SpriteBatchExt.DrawPoints(SpriteBatch,Vector2,Vector2[],Color,System.Boolean,System.Single)">
      <summary>
   Draws a list of connected points
   </summary>
      <param name="spriteBatch">The sprite batch.</param>
      <param name="position">The position.</param>
      <param name="points">The points to connect with lines</param>
      <param name="color">The color to use</param>
      <param name="closePoly">If set to <c>true</c> the first and last points will be connected.</param>
      <param name="thickness">The thickness of the lines</param>
    </member>
    <member name="M:Nez.SpriteBatchExt.DrawPolygon(SpriteBatch,Vector2,Vector2[],Color,System.Boolean,System.Single)">
      <summary>
   Draws the polygon.
   </summary>
      <param name="spriteBatch">The sprite batch.</param>
      <param name="position">The position.</param>
      <param name="points">The points.</param>
      <param name="color">The color.</param>
      <param name="closePoly">if set to <c>true</c> [close poly].</param>
      <param name="thickness">The thickness.</param>
    </member>
    <member name="M:Nez.SpriteBatchExt.DrawLineAngle(SpriteBatch,Vector2,System.Single,System.Single,Color)">
      <summary>
   Draws the line angle.
   </summary>
      <param name="spriteBatch">The sprite batch.</param>
      <param name="start">The start.</param>
      <param name="angle">The angle.</param>
      <param name="length">The length.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.SpriteBatchExt.DrawLineAngle(SpriteBatch,Vector2,System.Single,System.Single,Color,System.Single)">
      <summary>
   Draws the line angle.
   </summary>
      <param name="spriteBatch">The sprite batch.</param>
      <param name="start">The start.</param>
      <param name="angle">The angle.</param>
      <param name="length">The length.</param>
      <param name="color">The color.</param>
      <param name="thickness">The thickness.</param>
    </member>
    <member name="M:Nez.SpriteBatchExt.DrawLineAngle(SpriteBatch,System.Single,System.Single,System.Single,System.Single,Color)">
      <summary>
   Draws the line angle.
   </summary>
      <param name="spriteBatch">The sprite batch.</param>
      <param name="startX">The start x.</param>
      <param name="startY">The start y.</param>
      <param name="angle">The angle.</param>
      <param name="length">The length.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.SpriteBatchExt.DrawCircle(SpriteBatch,Vector2,System.Single,Color,System.Single,System.Int32)">
      <summary>
   Draws the circle.
   </summary>
      <param name="spriteBatch">The sprite batch.</param>
      <param name="position">The position.</param>
      <param name="radius">The radius.</param>
      <param name="color">The color.</param>
      <param name="thickness">The thickness.</param>
      <param name="resolution">The resolution.</param>
    </member>
    <member name="M:Nez.SpriteBatchExt.DrawCircle(SpriteBatch,System.Single,System.Single,System.Single,Color,System.Int32)">
      <summary>
   Draws the circle.
   </summary>
      <param name="spriteBatch">The sprite batch.</param>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <param name="radius">The radius.</param>
      <param name="color">The color.</param>
      <param name="resolution">The resolution.</param>
    </member>
    <member name="M:Nez.SpriteBatchExt.DrawRect(SpriteBatch,System.Single,System.Single,System.Single,System.Single,Color)">
      <summary>
   Draws the rect.
   </summary>
      <param name="spriteBatch">The sprite batch.</param>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.SpriteBatchExt.DrawRect(SpriteBatch,Vector2,System.Single,System.Single,Color)">
      <summary>
   Draws the rect.
   </summary>
      <param name="spriteBatch">The sprite batch.</param>
      <param name="position">The position.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.SpriteBatchExt.DrawRect(SpriteBatch,Rectangle,Color)">
      <summary>
   Draws the rect.
   </summary>
      <param name="spriteBatch">The sprite batch.</param>
      <param name="rect">The rect.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.SpriteBatchExt.DrawHollowRect(SpriteBatch,System.Single,System.Single,System.Single,System.Single,Color)">
      <summary>
   Draws the hollow rect.
   </summary>
      <param name="spriteBatch">The sprite batch.</param>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.SpriteBatchExt.DrawHollowRect(SpriteBatch,Vector2,System.Single,System.Single,Color)">
      <summary>
   Draws the hollow rect.
   </summary>
      <param name="spriteBatch">The sprite batch.</param>
      <param name="position">The position.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.SpriteBatchExt.DrawHollowRect(SpriteBatch,Rectangle,Color)">
      <summary>
   Draws the hollow rect.
   </summary>
      <param name="spriteBatch">The sprite batch.</param>
      <param name="rect">The rect.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.SpriteBatchExt.DrawHollowRect(SpriteBatch,RectangleF,Color)">
      <summary>
   Draws the hollow rect.
   </summary>
      <param name="spriteBatch">The sprite batch.</param>
      <param name="rect">The rect.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.SpriteBatchExt.DrawPixel(SpriteBatch,System.Single,System.Single,Color)">
      <summary>
   Draws the pixel.
   </summary>
      <param name="spriteBatch">The sprite batch.</param>
      <param name="x">The x.</param>
      <param name="y">The y.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.SpriteBatchExt.DrawPixel(SpriteBatch,Vector2,Color,System.Int32)">
      <summary>
   Draws the pixel.
   </summary>
      <param name="spriteBatch">The sprite batch.</param>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
      <param name="size">The size.</param>
    </member>
    <member name="T:Nez.TouchLocationExt">
      <summary>
   Class TouchLocationExt.
   </summary>
    </member>
    <member name="M:Nez.TouchLocationExt.ScaledPosition(TouchLocation)">
      <summary>
   Scaleds the position.
   </summary>
      <param name="touchLocation">The touch location.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="T:Nez.Vector2Ext">
      <summary>
   Class Vector2Ext.
   </summary>
    </member>
    <member name="M:Nez.Vector2Ext.Normalize(Vector2@)">
      <summary>
   temporary workaround to Vector2.Normalize screwing up the 0,0 vector
   </summary>
      <param name="vec">Vec.</param>
    </member>
    <member name="M:Nez.Vector2Ext.Normalize(Vector2)">
      <summary>
   temporary workaround to Vector2.Normalize screwing up the 0,0 vector
   </summary>
      <param name="vec">Vec.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.Vector2Ext.Round(Vector2)">
      <summary>
   rounds the x and y values
   </summary>
      <param name="vec">Vec.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.Vector2Ext.Round(Vector2@)">
      <summary>
   rounds the x and y values in place
   </summary>
      <param name="vec">Vec.</param>
    </member>
    <member name="M:Nez.Vector2Ext.Floor(Vector2@)">
      <summary>
   Floors the specified value.
   </summary>
      <param name="val">The value.</param>
    </member>
    <member name="M:Nez.Vector2Ext.Floor(Vector2)">
      <summary>
   Floors the specified value.
   </summary>
      <param name="val">The value.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.Vector2Ext.HalfVector">
      <summary>
   returns a 0.5, 0.5 vector
   </summary>
      <returns>The vector.</returns>
    </member>
    <member name="M:Nez.Vector2Ext.Cross(Vector2,Vector2)">
      <summary>
   compute the 2d pseudo cross product Dot( Perp( u ), v )
   </summary>
      <param name="u">U.</param>
      <param name="v">V.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Vector2Ext.Perpendicular(Vector2@,Vector2@)">
      <summary>
   returns the vector perpendicular to the passed in vectors
   </summary>
      <param name="first">First.</param>
      <param name="second">Second.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.Vector2Ext.Perpendicular(Vector2,Vector2)">
      <summary>
   returns the vector perpendicular to the passed in vectors
   </summary>
      <param name="first">First.</param>
      <param name="second">Second.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.Vector2Ext.Perpendicular(Vector2)">
      <summary>
   flips the x/y values and inverts the y to get the perpendicular
   </summary>
      <param name="original">Original.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.Vector2Ext.Angle(Vector2,Vector2)">
      <summary>
   returns the angle between the two vectors in degrees
   </summary>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Vector2Ext.AngleBetween(Vector2,Vector2,Vector2)">
      <summary>
   returns the angle between left and right with self being the center point in degrees
   </summary>
      <param name="self">Self.</param>
      <param name="left">V left.</param>
      <param name="right">V right.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Vector2Ext.GetRayIntersection(Vector2,Vector2,Vector2,Vector2,Vector2@)">
      <summary>
   given two lines (ab and cd) finds the intersection point
   </summary>
      <param name="a">The alpha component.</param>
      <param name="b">The blue component.</param>
      <param name="c">C.</param>
      <param name="d">D.</param>
      <param name="intersection">The intersection.</param>
      <returns>The ray intersection.</returns>
    </member>
    <member name="M:Nez.Vector2Ext.RoundToPoint(Vector2)">
      <summary>
   rounds and converts a Vector2 to a Point
   </summary>
      <param name="vec">Vec.</param>
      <returns>The point.</returns>
    </member>
    <member name="M:Nez.Vector2Ext.ToVector3(Vector2)">
      <summary>
   converts a Vector2 to a Vector3 with a 0 z-position
   </summary>
      <param name="vec">Vec.</param>
      <returns>The vector3.</returns>
    </member>
    <member name="M:Nez.Vector2Ext.IsTriangleCCW(Vector2,Vector2,Vector2)">
      <summary>
   checks if a triangle is CCW or CW
   </summary>
      <param name="a">The alpha component.</param>
      <param name="center">Center.</param>
      <param name="c">C.</param>
      <returns>
        <c>true</c>, if triangle ccw was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Vector2Ext.Transform(Vector2,Matrix2D)">
      <summary>
   Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains a transformation of 2d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.
   </summary>
      <param name="position">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
      <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
      <returns>Transformed <see cref="T:Microsoft.Xna.Framework.Vector2" />.</returns>
    </member>
    <member name="M:Nez.Vector2Ext.Transform(Vector2@,Matrix2D@,Vector2@)">
      <summary>
   Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> that contains a transformation of 2d-vector by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.
   </summary>
      <param name="position">Source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
      <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
      <param name="result">Transformed <see cref="T:Microsoft.Xna.Framework.Vector2" /> as an output parameter.</param>
    </member>
    <member name="M:Nez.Vector2Ext.Transform(Vector2[],System.Int32,Matrix2D@,Vector2[],System.Int32,System.Int32)">
      <summary>
   Apply transformation on vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector2" /> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" /> and places the results in an another array.
   </summary>
      <param name="sourceArray">Source array.</param>
      <param name="sourceIndex">The starting index of transformation in the source array.</param>
      <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
      <param name="destinationArray">Destination array.</param>
      <param name="destinationIndex">The starting index in the destination array, where the first <see cref="T:Microsoft.Xna.Framework.Vector2" /> should be written.</param>
      <param name="length">The number of vectors to be transformed.</param>
    </member>
    <member name="M:Nez.Vector2Ext.Transform(Vector2[],Matrix2D@,Vector2[])">
      <summary>
   Apply transformation on all vectors within array of <see cref="T:Microsoft.Xna.Framework.Vector2" /> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" /> and places the results in an another array.
   </summary>
      <param name="sourceArray">Source array.</param>
      <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
      <param name="destinationArray">Destination array.</param>
    </member>
    <member name="T:Nez.Vector3Ext">
      <summary>
   Class Vector3Ext.
   </summary>
    </member>
    <member name="M:Nez.Vector3Ext.ToVector2(Vector3)">
      <summary>
   returns a Vector2 ignoring the z component
   </summary>
      <param name="vec">Vec.</param>
      <returns>The vector2.</returns>
    </member>
    <member name="T:Nez.BatcherIFontExt">
      <summary>
   provides the full SpriteFont assortment of drawString methods
   </summary>
    </member>
    <member name="M:Nez.BatcherIFontExt.DrawString(Batcher,IFont,StringBuilder,Vector2,Color)">
      <summary>
   Submit a text string of sprites for drawing in the current batch.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="font">Font.</param>
      <param name="text">Text.</param>
      <param name="position">Position.</param>
      <param name="color">Color.</param>
    </member>
    <member name="M:Nez.BatcherIFontExt.DrawString(Batcher,IFont,StringBuilder,Vector2,Color,System.Single,Vector2,System.Single,SpriteEffects,System.Single)">
      <summary>
   Submit a text string of sprites for drawing in the current batch.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="font">Font.</param>
      <param name="text">Text.</param>
      <param name="position">Position.</param>
      <param name="color">Color.</param>
      <param name="rotation">Rotation.</param>
      <param name="origin">Origin.</param>
      <param name="scale">Scale.</param>
      <param name="effects">Effects.</param>
      <param name="layerDepth">Layer depth.</param>
    </member>
    <member name="M:Nez.BatcherIFontExt.DrawString(Batcher,IFont,System.String,Vector2,Color)">
      <summary>
   Submit a text string of sprites for drawing in the current batch.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="font">Font.</param>
      <param name="text">Text.</param>
      <param name="position">Position.</param>
      <param name="color">Color.</param>
    </member>
    <member name="M:Nez.BatcherIFontExt.DrawString(Batcher,IFont,System.String,Vector2,Color,System.Single,Vector2,System.Single,SpriteEffects,System.Single)">
      <summary>
   Submit a text string of sprites for drawing in the current batch.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="font">Font.</param>
      <param name="text">Text.</param>
      <param name="position">Position.</param>
      <param name="color">Color.</param>
      <param name="rotation">Rotation.</param>
      <param name="origin">Origin.</param>
      <param name="scale">Scale.</param>
      <param name="effects">Effects.</param>
      <param name="layerDepth">Layer depth.</param>
    </member>
    <member name="M:Nez.BatcherIFontExt.DrawString(Batcher,IFont,StringBuilder,Vector2,Color,System.Single,Vector2,Vector2,SpriteEffects,System.Single)">
      <summary>
   Submit a text string of sprites for drawing in the current batch.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="font">Font.</param>
      <param name="text">Text.</param>
      <param name="position">Position.</param>
      <param name="color">Color.</param>
      <param name="rotation">Rotation.</param>
      <param name="origin">Origin.</param>
      <param name="scale">Scale.</param>
      <param name="effects">Effects.</param>
      <param name="layerDepth">Layer depth.</param>
    </member>
    <member name="M:Nez.BatcherIFontExt.DrawString(Batcher,IFont,System.String,Vector2,Color,System.Single,Vector2,Vector2,SpriteEffects,System.Single)">
      <summary>
   Submit a text string of sprites for drawing in the current batch.
   </summary>
      <param name="batcher">Batcher.</param>
      <param name="font">Font.</param>
      <param name="text">Text.</param>
      <param name="position">Position.</param>
      <param name="color">Color.</param>
      <param name="rotation">Rotation.</param>
      <param name="origin">Origin.</param>
      <param name="scale">Scale.</param>
      <param name="effects">Effects.</param>
      <param name="layerDepth">Layer depth.</param>
    </member>
    <member name="T:Nez.BatcherSpriteFontExt">
      <summary>
   helper methods for drawing text with NezSpriteFonts
   </summary>
    </member>
    <member name="M:Nez.BatcherSpriteFontExt.DrawString(Batcher,NezSpriteFont,StringBuilder,Vector2,Color)">
      <summary>
   Draws the string.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="spriteFont">The sprite font.</param>
      <param name="text">The text.</param>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.BatcherSpriteFontExt.DrawString(Batcher,NezSpriteFont,StringBuilder,Vector2,Color,System.Single,Vector2,System.Single,SpriteEffects,System.Single)">
      <summary>
   Draws the string.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="spriteFont">The sprite font.</param>
      <param name="text">The text.</param>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
      <param name="rotation">The rotation.</param>
      <param name="origin">The origin.</param>
      <param name="scale">The scale.</param>
      <param name="effects">The effects.</param>
      <param name="layerDepth">The layer depth.</param>
    </member>
    <member name="M:Nez.BatcherSpriteFontExt.DrawString(Batcher,NezSpriteFont,System.String,Vector2,Color)">
      <summary>
   Draws the string.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="spriteFont">The sprite font.</param>
      <param name="text">The text.</param>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
    </member>
    <member name="M:Nez.BatcherSpriteFontExt.DrawString(Batcher,NezSpriteFont,System.String,Vector2,Color,System.Single,Vector2,System.Single,SpriteEffects,System.Single)">
      <summary>
   Draws the string.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="spriteFont">The sprite font.</param>
      <param name="text">The text.</param>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
      <param name="rotation">The rotation.</param>
      <param name="origin">The origin.</param>
      <param name="scale">The scale.</param>
      <param name="effects">The effects.</param>
      <param name="layerDepth">The layer depth.</param>
    </member>
    <member name="M:Nez.BatcherSpriteFontExt.DrawString(Batcher,NezSpriteFont,StringBuilder,Vector2,Color,System.Single,Vector2,Vector2,SpriteEffects,System.Single)">
      <summary>
   Draws the string.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="spriteFont">The sprite font.</param>
      <param name="text">The text.</param>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
      <param name="rotation">The rotation.</param>
      <param name="origin">The origin.</param>
      <param name="scale">The scale.</param>
      <param name="effects">The effects.</param>
      <param name="layerDepth">The layer depth.</param>
    </member>
    <member name="M:Nez.BatcherSpriteFontExt.DrawString(Batcher,NezSpriteFont,System.String,Vector2,Color,System.Single,Vector2,Vector2,SpriteEffects,System.Single)">
      <summary>
   Draws the string.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="spriteFont">The sprite font.</param>
      <param name="text">The text.</param>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
      <param name="rotation">The rotation.</param>
      <param name="origin">The origin.</param>
      <param name="scale">The scale.</param>
      <param name="effects">The effects.</param>
      <param name="layerDepth">The layer depth.</param>
    </member>
    <member name="T:Nez.FontCharacterSource">
      <summary>
   helper that wraps either a string or StringBuilder and provides a common API to read them for measuring/drawing
   </summary>
    </member>
    <member name="F:Nez.FontCharacterSource.Length">
      <summary>
   The length
   </summary>
    </member>
    <member name="M:Nez.FontCharacterSource.#ctor(System.String)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.FontCharacterSource" /> struct.
   </summary>
      <param name="s">The s.</param>
    </member>
    <member name="M:Nez.FontCharacterSource.#ctor(StringBuilder)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.FontCharacterSource" /> struct.
   </summary>
      <param name="builder">The builder.</param>
    </member>
    <member name="P:Nez.FontCharacterSource.Item(System.Int32)">
      <summary>
   Gets the <see cref="T:System.Char" /> at the specified index.
   </summary>
      <param name="index">The index.</param>
      <returns>System.Char.</returns>
    </member>
    <member name="T:Nez.IFont">
      <summary>
   Interface IFont
   </summary>
    </member>
    <member name="P:Nez.IFont.LineSpacing">
      <summary>
   line height of the font
   </summary>
      <value>The height of the line.</value>
    </member>
    <member name="M:Nez.IFont.MeasureString(System.String)">
      <summary>
   returns the size in pixels of text when rendered in this font
   </summary>
      <param name="text">Text.</param>
      <returns>The string.</returns>
    </member>
    <member name="M:Nez.IFont.MeasureString(StringBuilder)">
      <summary>
   returns the size in pixels of text when rendered in this font
   </summary>
      <param name="text">Text.</param>
      <returns>The string.</returns>
    </member>
    <member name="M:Nez.IFont.HasCharacter(System.Char)">
      <summary>
   returns true if the character exists in the font or false if it does not
   </summary>
      <param name="c">C.</param>
      <returns>
        <c>true</c>, if character was hased, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.IFont.DrawInto(Batcher,System.String,Vector2,Color,System.Single,Vector2,Vector2,SpriteEffects,System.Single)">
      <summary>
   Draws the into.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="text">The text.</param>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
      <param name="rotation">The rotation.</param>
      <param name="origin">The origin.</param>
      <param name="scale">The scale.</param>
      <param name="effect">The effect.</param>
      <param name="depth">The depth.</param>
    </member>
    <member name="M:Nez.IFont.DrawInto(Batcher,StringBuilder,Vector2,Color,System.Single,Vector2,Vector2,SpriteEffects,System.Single)">
      <summary>
   Draws the into.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="text">The text.</param>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
      <param name="rotation">The rotation.</param>
      <param name="origin">The origin.</param>
      <param name="scale">The scale.</param>
      <param name="effect">The effect.</param>
      <param name="depth">The depth.</param>
    </member>
    <member name="T:Nez.NezSpriteFont">
      <summary>
   Class NezSpriteFont.
   Implements the <see cref="T:Nez.IFont" /></summary>
      <seealso cref="T:Nez.IFont" />
    </member>
    <member name="P:Nez.NezSpriteFont.LineSpacing">
      <summary>
   line height of the font
   </summary>
      <value>The height of the line.</value>
    </member>
    <member name="M:Nez.NezSpriteFont.#ctor(SpriteFont)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.NezSpriteFont" /> class.
   </summary>
      <param name="font">The font.</param>
    </member>
    <member name="M:Nez.NezSpriteFont.MeasureString(System.String)">
      <summary>
   Returns the size of a string when rendered in this font.
   </summary>
      <param name="text">The text to measure.</param>
      <returns>The size, in pixels, of 'text' when rendered in
   this font.</returns>
    </member>
    <member name="M:Nez.NezSpriteFont.MeasureString(StringBuilder)">
      <summary>
   Returns the size of the contents of a StringBuilder when
   rendered in this font.
   </summary>
      <param name="text">The text to measure.</param>
      <returns>The size, in pixels, of 'text' when rendered in
   this font.</returns>
    </member>
    <member name="M:Nez.NezSpriteFont.TryGetFontRegionForChar(System.Char,SpriteFont.Glyph@,System.Boolean)">
      <summary>
   gets the BitmapFontRegion for the given char optionally substituting the default region if it isnt present.
   </summary>
      <param name="c">C.</param>
      <param name="fontGlyph">The font glyph.</param>
      <param name="useDefaultRegionIfNotPresent">If set to <c>true</c> use default region if not present.</param>
      <returns>
        <c>true</c>, if get font region for char was tryed, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.NezSpriteFont.HasCharacter(System.Char)">
      <summary>
   checks to see if a BitmapFontRegion exists for the char
   </summary>
      <param name="c">C.</param>
      <returns>
        <c>true</c>, if region exists for char was fonted, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.NezSpriteFont.DrawInto(Batcher,FontCharacterSource@,Vector2,Color,System.Single,Vector2,Vector2,SpriteEffects,System.Single)">
      <summary>
   Draws the into.
   </summary>
      <param name="batcher">The batcher.</param>
      <param name="text">The text.</param>
      <param name="position">The position.</param>
      <param name="color">The color.</param>
      <param name="rotation">The rotation.</param>
      <param name="origin">The origin.</param>
      <param name="scale">The scale.</param>
      <param name="effect">The effect.</param>
      <param name="depth">The depth.</param>
      <exception cref="T:System.ArgumentException">Errors.TextContainsUnresolvableCharacters - text</exception>
    </member>
    <member name="T:Nez.ITimer">
      <summary>
   Interface ITimer
   </summary>
    </member>
    <member name="P:Nez.ITimer.Context">
      <summary>
   Gets the context.
   </summary>
      <value>The context.</value>
    </member>
    <member name="M:Nez.ITimer.Stop">
      <summary>
   call stop to stop this timer from being run again. This has no effect on a non-repeating timer.
   </summary>
    </member>
    <member name="M:Nez.ITimer.Reset">
      <summary>
   resets the elapsed time of the timer to 0
   </summary>
    </member>
    <member name="M:Nez.ITimer.GetContext``1">
      <summary>
   returns the context casted to T as a convenience
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <returns>The context.</returns>
    </member>
    <member name="T:Nez.Timers.TimerManager">
      <summary>
   allows delayed and repeated execution of an Action
   </summary>
    </member>
    <member name="M:Nez.Timers.TimerManager.Update">
      <summary>
   called each frame before Scene.update
   </summary>
    </member>
    <member name="T:Nez.Tweens.EaseType">
      <summary>
   Enum EaseType
   </summary>
    </member>
    <member name="T:Nez.Tweens.EaseHelper">
      <summary>
   helper with a single method that takes in an EaseType and applies that ease equation with the given
   duration and time parameters. We do this to avoid passing around Funcs which create bogs of trash for
   the garbage collector (function pointers please!)
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.Linear">
      <summary>
   The linear
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.SineIn">
      <summary>
   The sine in
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.SineOut">
      <summary>
   The sine out
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.SineInOut">
      <summary>
   The sine in out
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.QuadIn">
      <summary>
   The quad in
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.QuadOut">
      <summary>
   The quad out
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.QuadInOut">
      <summary>
   The quad in out
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.CubicIn">
      <summary>
   The cubic in
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.CubicOut">
      <summary>
   The cubic out
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.CubicInOut">
      <summary>
   The cubic in out
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.QuartIn">
      <summary>
   The quart in
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.QuartOut">
      <summary>
   The quart out
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.QuartInOut">
      <summary>
   The quart in out
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.QuintIn">
      <summary>
   The quint in
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.QuintOut">
      <summary>
   The quint out
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.QuintInOut">
      <summary>
   The quint in out
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.ExpoIn">
      <summary>
   The expo in
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.ExpoOut">
      <summary>
   The expo out
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.ExpoInOut">
      <summary>
   The expo in out
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.CircIn">
      <summary>
   The circ in
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.CircOut">
      <summary>
   The circ out
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.CircInOut">
      <summary>
   The circ in out
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.ElasticIn">
      <summary>
   The elastic in
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.ElasticOut">
      <summary>
   The elastic out
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.ElasticInOut">
      <summary>
   The elastic in out
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.Punch">
      <summary>
   The punch
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.BackIn">
      <summary>
   The back in
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.BackOut">
      <summary>
   The back out
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.BackInOut">
      <summary>
   The back in out
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.BounceIn">
      <summary>
   The bounce in
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.BounceOut">
      <summary>
   The bounce out
   </summary>
    </member>
    <member name="F:Nez.Tweens.EaseType.BounceInOut">
      <summary>
   The bounce in out
   </summary>
    </member>
    <member name="M:Nez.Tweens.EaseHelper.OppositeEaseType(EaseType)">
      <summary>
   returns the opposite EaseType of easeType
   </summary>
      <param name="easeType">Ease type.</param>
      <returns>The ease type.</returns>
    </member>
    <member name="M:Nez.Tweens.EaseHelper.Ease(EaseType,System.Single,System.Single)">
      <summary>
   Eases the specified ease type.
   </summary>
      <param name="easeType">Type of the ease.</param>
      <param name="t">The t.</param>
      <param name="duration">The duration.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="T:Nez.Tweens.Easing">
      <summary>
   standard easing equations simplified by replacing the b and c params (begin and change values) with 0 and
   1 then reducing. This is done so that we can get back a raw value between 0 - 1 (except elastic/bounce which
   purposely go over the bounds) and then use that value to lerp anything.
   </summary>
    </member>
    <member name="T:Nez.Tweens.Easing.Linear">
      <summary>
   Class Linear.
   </summary>
    </member>
    <member name="T:Nez.Tweens.Easing.Quadratic">
      <summary>
   Class Quadratic.
   </summary>
    </member>
    <member name="T:Nez.Tweens.Easing.Back">
      <summary>
   Class Back.
   </summary>
    </member>
    <member name="T:Nez.Tweens.Easing.Bounce">
      <summary>
   Class Bounce.
   </summary>
    </member>
    <member name="T:Nez.Tweens.Easing.Circular">
      <summary>
   Class Circular.
   </summary>
    </member>
    <member name="T:Nez.Tweens.Easing.Cubic">
      <summary>
   Class Cubic.
   </summary>
    </member>
    <member name="T:Nez.Tweens.Easing.Elastic">
      <summary>
   Class Elastic.
   </summary>
    </member>
    <member name="T:Nez.Tweens.Easing.Exponential">
      <summary>
   Class Exponential.
   </summary>
    </member>
    <member name="T:Nez.Tweens.Easing.Quartic">
      <summary>
   Class Quartic.
   </summary>
    </member>
    <member name="T:Nez.Tweens.Easing.Quintic">
      <summary>
   Class Quintic.
   </summary>
    </member>
    <member name="T:Nez.Tweens.Easing.Sinusoidal">
      <summary>
   Class Sinusoidal.
   </summary>
    </member>
    <member name="M:Nez.Tweens.Easing.Linear.EaseNone(System.Single,System.Single)">
      <summary>
   Eases the none.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Quadratic.EaseIn(System.Single,System.Single)">
      <summary>
   Eases the in.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Quadratic.EaseOut(System.Single,System.Single)">
      <summary>
   Eases the out.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Quadratic.EaseInOut(System.Single,System.Single)">
      <summary>
   Eases the in out.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Back.EaseIn(System.Single,System.Single)">
      <summary>
   Eases the in.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Back.EaseOut(System.Single,System.Single)">
      <summary>
   Eases the out.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Back.EaseInOut(System.Single,System.Single)">
      <summary>
   Eases the in out.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Bounce.EaseOut(System.Single,System.Single)">
      <summary>
   Eases the out.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Bounce.EaseIn(System.Single,System.Single)">
      <summary>
   Eases the in.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Bounce.EaseInOut(System.Single,System.Single)">
      <summary>
   Eases the in out.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Circular.EaseIn(System.Single,System.Single)">
      <summary>
   Eases the in.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Circular.EaseOut(System.Single,System.Single)">
      <summary>
   Eases the out.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Circular.EaseInOut(System.Single,System.Single)">
      <summary>
   Eases the in out.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Cubic.EaseIn(System.Single,System.Single)">
      <summary>
   Eases the in.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Cubic.EaseOut(System.Single,System.Single)">
      <summary>
   Eases the out.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Cubic.EaseInOut(System.Single,System.Single)">
      <summary>
   Eases the in out.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Elastic.EaseIn(System.Single,System.Single)">
      <summary>
   Eases the in.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Elastic.EaseOut(System.Single,System.Single)">
      <summary>
   Eases the out.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Elastic.EaseInOut(System.Single,System.Single)">
      <summary>
   Eases the in out.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Elastic.Punch(System.Single,System.Single)">
      <summary>
   Punches the specified t.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Exponential.EaseIn(System.Single,System.Single)">
      <summary>
   Eases the in.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Exponential.EaseOut(System.Single,System.Single)">
      <summary>
   Eases the out.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Exponential.EaseInOut(System.Single,System.Single)">
      <summary>
   Eases the in out.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Quartic.EaseIn(System.Single,System.Single)">
      <summary>
   Eases the in.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Quartic.EaseOut(System.Single,System.Single)">
      <summary>
   Eases the out.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Quartic.EaseInOut(System.Single,System.Single)">
      <summary>
   Eases the in out.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Quintic.EaseIn(System.Single,System.Single)">
      <summary>
   Eases the in.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Quintic.EaseOut(System.Single,System.Single)">
      <summary>
   Eases the out.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Quintic.EaseInOut(System.Single,System.Single)">
      <summary>
   Eases the in out.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Sinusoidal.EaseIn(System.Single,System.Single)">
      <summary>
   Eases the in.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Sinusoidal.EaseOut(System.Single,System.Single)">
      <summary>
   Eases the out.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Easing.Sinusoidal.EaseInOut(System.Single,System.Single)">
      <summary>
   Eases the in out.
   </summary>
      <param name="t">The t.</param>
      <param name="d">The d.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="T:Nez.Tweens.Lerps">
      <summary>
   series of static methods to handle all common tween type structs along with unclamped lerps for them.
   unclamped lerps are required for bounce, elastic or other tweens that exceed the 0 - 1 range.
   </summary>
    </member>
    <member name="M:Nez.Tweens.Lerps.Lerp(System.Single,System.Single,System.Single)">
      <summary>
   Lerps the specified from.
   </summary>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="t">The t.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.LerpTowards(System.Single,System.Single,System.Single,System.Single)">
      <summary>
   remainingFactorPerSecond is the percentage of the distance it covers every second. should be between 0 and 1.
   if it's 0.25 it means it covers 75% of the remaining distance every second independent of the framerate
   </summary>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="remainingFactorPerSecond">Remaining factor per second.</param>
      <param name="deltaTime">Delta time.</param>
      <returns>The towards.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.LerpDamp(System.Single,System.Single,System.Single)">
      <summary>
   A smoothing rate of zero will give you back the target value (i.e. no smoothing), and a rate of 1 is technically not allowed,
   but will just give you back the source value (i.e. infinite smoothing). Note that this is the opposite of the way a lerp
   parameter works, but if you so desire, you can just use additive inverse of the smoothing parameter inside the Pow.
   Smoothing rate dictates the proportion of source remaining after one second
   </summary>
      <param name="source">Source.</param>
      <param name="target">Target.</param>
      <param name="smoothing">Smoothing.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.Lerp(Vector2,Vector2,System.Single)">
      <summary>
   Lerps the specified from.
   </summary>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="t">The t.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.LerpTowards(Vector2,Vector2,System.Single,System.Single)">
      <summary>
   Lerps the towards.
   </summary>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="remainingFactorPerSecond">The remaining factor per second.</param>
      <param name="deltaTime">The delta time.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.Lerp(Vector3,Vector3,System.Single)">
      <summary>
   Lerps the specified from.
   </summary>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="t">The t.</param>
      <returns>Vector3.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.LerpTowards(Vector3,Vector3,System.Single,System.Single)">
      <summary>
   Lerps the towards.
   </summary>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="remainingFactorPerSecond">The remaining factor per second.</param>
      <param name="deltaTime">The delta time.</param>
      <returns>Vector3.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.LerpTowards(Vector3,Vector3,Vector3,System.Single,System.Single)">
      <summary>
   Lerps the towards.
   </summary>
      <param name="followerCurrentPosition">The follower current position.</param>
      <param name="targetPreviousPosition">The target previous position.</param>
      <param name="targetCurrentPosition">The target current position.</param>
      <param name="smoothFactor">The smooth factor.</param>
      <param name="deltaTime">The delta time.</param>
      <returns>Vector3.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.AngleLerp(Vector2,Vector2,System.Single)">
      <summary>
   Angles the lerp.
   </summary>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="t">The t.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.Lerp(Vector4,Vector4,System.Single)">
      <summary>
   Lerps the specified from.
   </summary>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="t">The t.</param>
      <returns>Vector4.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.Lerp(Color,Color,System.Single)">
      <summary>
   Lerps the specified from.
   </summary>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="t">The t.</param>
      <returns>Color.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.Lerp(Color@,Color@,System.Single)">
      <summary>
   Lerps the specified from.
   </summary>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="t">The t.</param>
      <returns>Color.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.Lerp(Rectangle,Rectangle,System.Single)">
      <summary>
   Lerps the specified from.
   </summary>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="t">The t.</param>
      <returns>Rectangle.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.Lerp(Rectangle@,Rectangle@,System.Single)">
      <summary>
   Lerps the specified from.
   </summary>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="t">The t.</param>
      <returns>Rectangle.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.Ease(EaseType,System.Single,System.Single,System.Single,System.Single)">
      <summary>
   Eases the specified ease type.
   </summary>
      <param name="easeType">Type of the ease.</param>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="t">The t.</param>
      <param name="duration">The duration.</param>
      <returns>System.Single.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.Ease(EaseType,Vector2,Vector2,System.Single,System.Single)">
      <summary>
   Eases the specified ease type.
   </summary>
      <param name="easeType">Type of the ease.</param>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="t">The t.</param>
      <param name="duration">The duration.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.Ease(EaseType,Vector3,Vector3,System.Single,System.Single)">
      <summary>
   Eases the specified ease type.
   </summary>
      <param name="easeType">Type of the ease.</param>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="t">The t.</param>
      <param name="duration">The duration.</param>
      <returns>Vector3.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.EaseAngle(EaseType,Vector2,Vector2,System.Single,System.Single)">
      <summary>
   Eases the angle.
   </summary>
      <param name="easeType">Type of the ease.</param>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="t">The t.</param>
      <param name="duration">The duration.</param>
      <returns>Vector2.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.Ease(EaseType,Vector4,Vector4,System.Single,System.Single)">
      <summary>
   Eases the specified ease type.
   </summary>
      <param name="easeType">Type of the ease.</param>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="t">The t.</param>
      <param name="duration">The duration.</param>
      <returns>Vector4.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.Ease(EaseType,Quaternion,Quaternion,System.Single,System.Single)">
      <summary>
   Eases the specified ease type.
   </summary>
      <param name="easeType">Type of the ease.</param>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="t">The t.</param>
      <param name="duration">The duration.</param>
      <returns>Quaternion.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.Ease(EaseType,Color,Color,System.Single,System.Single)">
      <summary>
   Eases the specified ease type.
   </summary>
      <param name="easeType">Type of the ease.</param>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="t">The t.</param>
      <param name="duration">The duration.</param>
      <returns>Color.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.Ease(EaseType,Color@,Color@,System.Single,System.Single)">
      <summary>
   Eases the specified ease type.
   </summary>
      <param name="easeType">Type of the ease.</param>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="t">The t.</param>
      <param name="duration">The duration.</param>
      <returns>Color.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.Ease(EaseType,Rectangle,Rectangle,System.Single,System.Single)">
      <summary>
   Eases the specified ease type.
   </summary>
      <param name="easeType">Type of the ease.</param>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="t">The t.</param>
      <param name="duration">The duration.</param>
      <returns>Rectangle.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.Ease(EaseType,Rectangle@,Rectangle@,System.Single,System.Single)">
      <summary>
   Eases the specified ease type.
   </summary>
      <param name="easeType">Type of the ease.</param>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="t">The t.</param>
      <param name="duration">The duration.</param>
      <returns>Rectangle.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.FastSpring(System.Single,System.Single,System.Single@,System.Single,System.Single)">
      <summary>
   uses the semi-implicit euler method. faster, but not always stable.
   see http://allenchou.net/2015/04/game-math-more-on-numeric-springing/
   </summary>
      <param name="currentValue">Current value.</param>
      <param name="targetValue">Target value.</param>
      <param name="velocity">Velocity by reference. Be sure to reset it to 0 if changing the targetValue between calls</param>
      <param name="dampingRatio">lower values are less damped and higher values are more damped resulting in less springiness.
   should be between 0.01f, 1f to avoid unstable systems.</param>
      <param name="angularFrequency">An angular frequency of 2pi (radians per second) means the oscillation completes one
   full period over one second, i.e. 1Hz. should be less than 35 or so to remain stable</param>
      <returns>The spring.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.StableSpring(System.Single,System.Single,System.Single@,System.Single,System.Single)">
      <summary>
   uses the implicit euler method. slower, but always stable.
   see http://allenchou.net/2015/04/game-math-more-on-numeric-springing/
   </summary>
      <param name="currentValue">Current value.</param>
      <param name="targetValue">Target value.</param>
      <param name="velocity">Velocity by reference. Be sure to reset it to 0 if changing the targetValue between calls</param>
      <param name="dampingRatio">lower values are less damped and higher values are more damped resulting in less springiness.
   should be between 0.01f, 1f to avoid unstable systems.</param>
      <param name="angularFrequency">An angular frequency of 2pi (radians per second) means the oscillation completes one
   full period over one second, i.e. 1Hz. should be less than 35 or so to remain stable</param>
      <returns>The spring.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.FastSpring(Vector2,Vector2,Vector2@,System.Single,System.Single)">
      <summary>
   uses the semi-implicit euler method. slower, but always stable.
   see http://allenchou.net/2015/04/game-math-more-on-numeric-springing/
   </summary>
      <param name="currentValue">Current value.</param>
      <param name="targetValue">Target value.</param>
      <param name="velocity">Velocity by reference. Be sure to reset it to 0 if changing the targetValue between calls</param>
      <param name="dampingRatio">lower values are less damped and higher values are more damped resulting in less springiness.
   should be between 0.01f, 1f to avoid unstable systems.</param>
      <param name="angularFrequency">An angular frequency of 2pi (radians per second) means the oscillation completes one
   full period over one second, i.e. 1Hz. should be less than 35 or so to remain stable</param>
      <returns>The spring.</returns>
    </member>
    <member name="M:Nez.Tweens.Lerps.StableSpring(Vector2,Vector2,Vector2@,System.Single,System.Single)">
      <summary>
   uses the implicit euler method. faster, but not always stable.
   see http://allenchou.net/2015/04/game-math-more-on-numeric-springing/
   </summary>
      <param name="currentValue">Current value.</param>
      <param name="targetValue">Target value.</param>
      <param name="velocity">Velocity by reference. Be sure to reset it to 0 if changing the targetValue between calls</param>
      <param name="dampingRatio">lower values are less damped and higher values are more damped resulting in less springiness.
   should be between 0.01f, 1f to avoid unstable systems.</param>
      <param name="angularFrequency">An angular frequency of 2pi (radians per second) means the oscillation completes one
   full period over one second, i.e. 1Hz. should be less than 35 or so to remain stable</param>
      <returns>The spring.</returns>
    </member>
    <member name="T:Nez.Tweens.ITween`1">
      <summary>
   a series of strongly typed, chainable methods to setup various tween properties
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.Tweens.ITween`1.SetEaseType(EaseType)">
      <summary>
   sets the ease type used for this tween
   </summary>
      <param name="easeType">Ease type.</param>
      <returns>The ease type.</returns>
    </member>
    <member name="M:Nez.Tweens.ITween`1.SetDelay(System.Single)">
      <summary>
   sets the delay before starting the tween
   </summary>
      <param name="delay">Delay.</param>
      <returns>The delay.</returns>
    </member>
    <member name="M:Nez.Tweens.ITween`1.SetDuration(System.Single)">
      <summary>
   sets the tween duration
   </summary>
      <param name="duration">Duration.</param>
      <returns>The duration.</returns>
    </member>
    <member name="M:Nez.Tweens.ITween`1.SetTimeScale(System.Single)">
      <summary>
   sets the timeScale used for this tween. The timeScale will be multiplied with Time.deltaTime/Time.unscaledDeltaTime
   to get the actual delta time used for the tween.
   </summary>
      <param name="timeScale">Time scale.</param>
      <returns>The time scale.</returns>
    </member>
    <member name="M:Nez.Tweens.ITween`1.SetIsTimeScaleIndependent">
      <summary>
   sets the tween to use Time.unscaledDeltaTime instead of Time.deltaTime
   </summary>
      <returns>The is time scale independant.</returns>
    </member>
    <member name="M:Nez.Tweens.ITween`1.SetCompletionHandler(Action{ITween{`0}})">
      <summary>
   chainable. sets the action that should be called when the tween is complete.
   </summary>
      <param name="completionHandler">The completion handler.</param>
      <returns>ITween&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.Tweens.ITween`1.SetLoops(LoopType,System.Int32,System.Single)">
      <summary>
   chainable. set the loop type for the tween. a single pingpong loop means going from start-finish-start.
   </summary>
      <param name="loopType">Type of the loop.</param>
      <param name="loops">The loops.</param>
      <param name="delayBetweenLoops">The delay between loops.</param>
      <returns>ITween&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.Tweens.ITween`1.SetLoopCompletionHandler(Action{ITween{`0}})">
      <summary>
   chainable. sets the action that should be called when a loop is complete. A loop is either when the first part of
   a ping-pong animation completes or when starting over when using a restart-from-beginning loop type. Note that ping-pong
   loops (which are really two part tweens) will not fire the loop completion handler on the last iteration. The normal
   tween completion handler will fire though
   </summary>
      <param name="loopCompleteHandler">The loop complete handler.</param>
      <returns>ITween&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.Tweens.ITween`1.SetFrom(`0)">
      <summary>
   sets the start position for the tween
   </summary>
      <param name="from">From.</param>
      <returns>The from.</returns>
    </member>
    <member name="M:Nez.Tweens.ITween`1.PrepareForReuse(`0,`0,System.Single)">
      <summary>
   prepares a tween for reuse by resetting its from/to values and duration
   </summary>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="duration">Duration.</param>
      <returns>The for reuse.</returns>
    </member>
    <member name="M:Nez.Tweens.ITween`1.SetRecycleTween(System.Boolean)">
      <summary>
   Sets the recycle tween.
   </summary>
      <param name="shouldRecycleTween">if set to <c>true</c> [should recycle tween].</param>
      <returns>ITween&lt;T&gt;.</returns>
      <font color="red">Badly formed XML comment.</font>
    </member>
    <member name="M:Nez.Tweens.ITween`1.SetIsRelative">
      <summary>
   helper that just sets the to value of the tween to be to + from making the tween relative
   to its current value.
   </summary>
      <returns>The is relative tween.</returns>
    </member>
    <member name="M:Nez.Tweens.ITween`1.SetContext(System.Object)">
      <summary>
   allows you to set any object reference retrievable via tween.context. This is handy for avoiding
   closure allocations for completion handler Actions. You can also search TweenManager for all tweens with a specific
   context.
   </summary>
      <param name="context">Context.</param>
      <returns>The context.</returns>
    </member>
    <member name="M:Nez.Tweens.ITween`1.SetNextTween(ITweenable)">
      <summary>
   allows you to add a tween that will get run after this tween completes. Note that nextTween must be an ITweenable!
   Also note that all ITweenTs are ITweenable.
   </summary>
      <param name="nextTween">Next tween.</param>
      <returns>The next tween.</returns>
    </member>
    <member name="T:Nez.Tweens.ITweenable">
      <summary>
   Interface ITweenable
   </summary>
    </member>
    <member name="M:Nez.Tweens.ITweenable.Tick">
      <summary>
   called by TweenManager each frame like an internal Update
   </summary>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Tweens.ITweenable.RecycleSelf">
      <summary>
   called by TweenManager when a tween is removed. Subclasses can optionally recycle themself. Subclasses
   should first check the _shouldRecycleTween bool in their implementation!
   </summary>
    </member>
    <member name="M:Nez.Tweens.ITweenable.IsRunning">
      <summary>
   checks to see if a tween is running
   </summary>
      <returns>
        <c>true</c>, if running was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Tweens.ITweenable.Start">
      <summary>
   starts the tween
   </summary>
    </member>
    <member name="M:Nez.Tweens.ITweenable.Pause">
      <summary>
   pauses the tween
   </summary>
    </member>
    <member name="M:Nez.Tweens.ITweenable.Resume">
      <summary>
   resumes the tween after a pause
   </summary>
    </member>
    <member name="M:Nez.Tweens.ITweenable.Stop(System.Boolean)">
      <summary>
   stops the tween optionally bringing it to completion
   </summary>
      <param name="bringToCompletion">If set to <c>true</c> bring to completion.</param>
    </member>
    <member name="T:Nez.Tweens.ITweenControl">
      <summary>
   more specific tween playback controls here.
   </summary>
    </member>
    <member name="P:Nez.Tweens.ITweenControl.Context">
      <summary>
   handy property that you can use in any callbacks (such as a completion handler) to avoid allocations when using
   anonymous Actions
   </summary>
      <value>The context.</value>
    </member>
    <member name="M:Nez.Tweens.ITweenControl.JumpToElapsedTime(System.Single)">
      <summary>
   warps the tween to elapsedTime clamping it between 0 and duration. this will immediately update the tweened
   object whether it is paused, completed or running.
   </summary>
      <param name="elapsedTime">Elapsed time.</param>
    </member>
    <member name="M:Nez.Tweens.ITweenControl.WaitForCompletion">
      <summary>
   when called from StartCoroutine it will yield until the tween is complete
   </summary>
      <returns>The for completion.</returns>
    </member>
    <member name="M:Nez.Tweens.ITweenControl.GetTargetObject">
      <summary>
   gets the target of the tween or null for TweenTargets that arent necessarily all about a single object.
   its only real use is for TweenManager to find a list of tweens by target.
   </summary>
      <returns>The target object.</returns>
    </member>
    <member name="T:Nez.Tweens.ITweenTarget`1">
      <summary>
   any object that wants to be tweened needs to implement this. TweenManager internally likes to make a simple object
   that implements this interface and stores a reference to the object being tweened. That makes for tiny, simple,
   lightweight implementations that can be handed off to any TweenT
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Nez.Tweens.ITweenTarget`1.SetTweenedValue(`0)">
      <summary>
   sets the final, tweened value on the object of your choosing.
   </summary>
      <param name="value">Value.</param>
    </member>
    <member name="M:Nez.Tweens.ITweenTarget`1.GetTweenedValue">
      <summary>
   Gets the tweened value.
   </summary>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.Tweens.ITweenTarget`1.GetTargetObject">
      <summary>
   gets the target of the tween or null for TweenTargets that arent necessarily all about a single object.
   its only real use is for TweenManager to find a list of tweens by target.
   </summary>
      <returns>The target object.</returns>
    </member>
    <member name="T:Nez.Tweens.AbstractTweenable">
      <summary>
   AbstractTweenable serves as a base for any custom classes you might want to make that can be ticked. These differ from
   ITweens in that they dont implement the ITweenT interface. What does that mean? It just says that an AbstractTweenable
   is not just moving a value from start to finish. It can do anything at all that requires a tick each frame.
   The TweenChain is one example of AbstractTweenable for reference.
   </summary>
    </member>
    <member name="M:Nez.Tweens.AbstractTweenable.Tick">
      <summary>
   called by TweenManager each frame like an internal Update
   </summary>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Tweens.AbstractTweenable.RecycleSelf">
      <summary>
   called by TweenManager when a tween is removed. Subclasses can optionally recycle themself. Subclasses
   should first check the _shouldRecycleTween bool in their implementation!
   </summary>
    </member>
    <member name="M:Nez.Tweens.AbstractTweenable.IsRunning">
      <summary>
   checks to see if a tween is running
   </summary>
      <returns>
        <c>true</c>, if running was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Tweens.AbstractTweenable.Start">
      <summary>
   starts the tween
   </summary>
    </member>
    <member name="M:Nez.Tweens.AbstractTweenable.Pause">
      <summary>
   pauses the tween
   </summary>
    </member>
    <member name="M:Nez.Tweens.AbstractTweenable.Resume">
      <summary>
   resumes the tween after a pause
   </summary>
    </member>
    <member name="M:Nez.Tweens.AbstractTweenable.Stop(System.Boolean)">
      <summary>
   stops the tween optionally bringing it to completion
   </summary>
      <param name="bringToCompletion">If set to <c>true</c> bring to completion.</param>
    </member>
    <member name="T:Nez.Tweens.PropertyTweens">
      <summary>
   Class PropertyTweens.
   </summary>
    </member>
    <member name="M:Nez.Tweens.PropertyTweens.IntPropertyTo(System.Object,System.String,System.Int32,System.Single)">
      <summary>
   Ints the property to.
   </summary>
      <param name="self">The self.</param>
      <param name="memberName">Name of the member.</param>
      <param name="to">To.</param>
      <param name="duration">The duration.</param>
      <returns>ITween&lt;System.Int32&gt;.</returns>
    </member>
    <member name="M:Nez.Tweens.PropertyTweens.FloatPropertyTo(System.Object,System.String,System.Single,System.Single)">
      <summary>
   Floats the property to.
   </summary>
      <param name="self">The self.</param>
      <param name="memberName">Name of the member.</param>
      <param name="to">To.</param>
      <param name="duration">The duration.</param>
      <returns>ITween&lt;System.Single&gt;.</returns>
    </member>
    <member name="M:Nez.Tweens.PropertyTweens.Vector2PropertyTo(System.Object,System.String,Vector2,System.Single)">
      <summary>
   Vector2s the property to.
   </summary>
      <param name="self">The self.</param>
      <param name="memberName">Name of the member.</param>
      <param name="to">To.</param>
      <param name="duration">The duration.</param>
      <returns>ITween&lt;Vector2&gt;.</returns>
    </member>
    <member name="M:Nez.Tweens.PropertyTweens.Vector3PropertyTo(System.Object,System.String,Vector3,System.Single)">
      <summary>
   Vector3s the property to.
   </summary>
      <param name="self">The self.</param>
      <param name="memberName">Name of the member.</param>
      <param name="to">To.</param>
      <param name="duration">The duration.</param>
      <returns>ITween&lt;Vector3&gt;.</returns>
    </member>
    <member name="M:Nez.Tweens.PropertyTweens.Vector4PropertyTo(System.Object,System.String,Vector4,System.Single)">
      <summary>
   Vector4s the property to.
   </summary>
      <param name="self">The self.</param>
      <param name="memberName">Name of the member.</param>
      <param name="to">To.</param>
      <param name="duration">The duration.</param>
      <returns>ITween&lt;Vector4&gt;.</returns>
    </member>
    <member name="M:Nez.Tweens.PropertyTweens.QuaternionPropertyTo(System.Object,System.String,Quaternion,System.Single)">
      <summary>
   Quaternions the property to.
   </summary>
      <param name="self">The self.</param>
      <param name="memberName">Name of the member.</param>
      <param name="to">To.</param>
      <param name="duration">The duration.</param>
      <returns>ITween&lt;Quaternion&gt;.</returns>
    </member>
    <member name="M:Nez.Tweens.PropertyTweens.ColorPropertyTo(System.Object,System.String,Color,System.Single)">
      <summary>
   Colors the property to.
   </summary>
      <param name="self">The self.</param>
      <param name="memberName">Name of the member.</param>
      <param name="to">To.</param>
      <param name="duration">The duration.</param>
      <returns>ITween&lt;Color&gt;.</returns>
    </member>
    <member name="T:Nez.Tweens.RenderableColorTween">
      <summary>
   Class RenderableColorTween.
   Implements the <see cref="T:Nez.Tweens.ColorTween" />
   Implements the <see cref="T:Nez.Tweens.ITweenTarget`1" /></summary>
      <seealso cref="T:Nez.Tweens.ColorTween" />
      <seealso cref="T:Nez.Tweens.ITweenTarget`1" />
    </member>
    <member name="M:Nez.Tweens.RenderableColorTween.SetTweenedValue(Color)">
      <summary>
   sets the final, tweened value on the object of your choosing.
   </summary>
      <param name="value">Value.</param>
    </member>
    <member name="M:Nez.Tweens.RenderableColorTween.GetTweenedValue">
      <summary>
   Gets the tweened value.
   </summary>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.Tweens.RenderableColorTween.GetTargetObject">
      <summary>
   Gets the target object.
   </summary>
      <returns>System.Object.</returns>
    </member>
    <member name="M:Nez.Tweens.RenderableColorTween.SetTarget(RenderableComponent)">
      <summary>
   Sets the target.
   </summary>
      <param name="renderable">The renderable.</param>
    </member>
    <member name="M:Nez.Tweens.RenderableColorTween.RecycleSelf">
      <summary>
   Recycles the self.
   </summary>
    </member>
    <member name="T:Nez.Tweens.TransformSpringTween">
      <summary>
   Class TransformSpringTween.
   Implements the <see cref="T:Nez.Tweens.AbstractTweenable" /></summary>
      <seealso cref="T:Nez.Tweens.AbstractTweenable" />
    </member>
    <member name="P:Nez.Tweens.TransformSpringTween.TargetType">
      <summary>
   Gets the type of the target.
   </summary>
      <value>The type of the target.</value>
    </member>
    <member name="F:Nez.Tweens.TransformSpringTween.DampingRatio">
      <summary>
   lower values are less damped and higher values are more damped resulting in less springiness.
   should be between 0.01f, 1f to avoid unstable systems.
   </summary>
    </member>
    <member name="F:Nez.Tweens.TransformSpringTween.AngularFrequency">
      <summary>
   An angular frequency of 2pi (radians per second) means the oscillation completes one
   full period over one second, i.e. 1Hz. should be less than 35 or so to remain stableThe angular frequency.
   </summary>
    </member>
    <member name="M:Nez.Tweens.TransformSpringTween.#ctor(Transform,TransformTargetType,Vector2)">
      <summary>
   Initializes a new instance of the TransformSpringTween class.
   </summary>
      <param name="transform">The transform.</param>
      <param name="targetType">Type of the target.</param>
      <param name="targetValue">The target value.</param>
    </member>
    <member name="M:Nez.Tweens.TransformSpringTween.SetTargetValue(Vector2)">
      <summary>
   you can call setTargetValue at any time to reset the target value to a new Vector2. If you have not called start to add the
   spring tween it will be called for you.
   </summary>
      <param name="targetValue">Target value.</param>
    </member>
    <member name="M:Nez.Tweens.TransformSpringTween.UpdateDampingRatioWithHalfLife(System.Single)">
      <summary>
   lambda should be the desired duration when the oscillation magnitude is reduced by 50%
   </summary>
      <param name="lambda">Lambda.</param>
    </member>
    <member name="M:Nez.Tweens.TransformSpringTween.Tick">
      <summary>
   called by TweenManager each frame like an internal Update
   </summary>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="T:Nez.Tweens.TransformTargetType">
      <summary>
   useful enum for any Transform related property tweens
   </summary>
    </member>
    <member name="T:Nez.Tweens.TransformVector2Tween">
      <summary>
   this is a special case since Transforms are by far the most tweened object. we encapsulate the Tween and the ITweenTarget
   in a single, cacheable class
   </summary>
    </member>
    <member name="F:Nez.Tweens.TransformTargetType.Position">
      <summary>
   The position
   </summary>
    </member>
    <member name="F:Nez.Tweens.TransformTargetType.LocalPosition">
      <summary>
   The local position
   </summary>
    </member>
    <member name="F:Nez.Tweens.TransformTargetType.Scale">
      <summary>
   The scale
   </summary>
    </member>
    <member name="F:Nez.Tweens.TransformTargetType.LocalScale">
      <summary>
   The local scale
   </summary>
    </member>
    <member name="F:Nez.Tweens.TransformTargetType.RotationDegrees">
      <summary>
   The rotation degrees
   </summary>
    </member>
    <member name="F:Nez.Tweens.TransformTargetType.LocalRotationDegrees">
      <summary>
   The local rotation degrees
   </summary>
    </member>
    <member name="M:Nez.Tweens.TransformVector2Tween.SetTweenedValue(Vector2)">
      <summary>
   sets the final, tweened value on the object of your choosing.
   </summary>
      <param name="value">Value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:Nez.Tweens.TransformVector2Tween.GetTweenedValue">
      <summary>
   Gets the tweened value.
   </summary>
      <returns>T.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:Nez.Tweens.TransformVector2Tween.GetTargetObject">
      <summary>
   Gets the target object.
   </summary>
      <returns>System.Object.</returns>
    </member>
    <member name="M:Nez.Tweens.TransformVector2Tween.SetTargetAndType(Transform,TransformTargetType)">
      <summary>
   Sets the type of the target and.
   </summary>
      <param name="transform">The transform.</param>
      <param name="targetType">Type of the target.</param>
    </member>
    <member name="M:Nez.Tweens.TransformVector2Tween.RecycleSelf">
      <summary>
   Recycles the self.
   </summary>
    </member>
    <member name="T:Nez.Tweens.LoopType">
      <summary>
   Enum LoopType
   </summary>
    </member>
    <member name="T:Nez.Tweens.Tween`1">
      <summary>
   Class Tween.
   Implements the <see cref="T:Nez.Tweens.ITweenable" />
   Implements the <see cref="T:Nez.Tweens.ITween`1" /></summary>
      <typeparam name="T">
      </typeparam>
      <seealso cref="T:Nez.Tweens.ITweenable" />
      <seealso cref="T:Nez.Tweens.ITween`1" />
    </member>
    <member name="F:Nez.Tweens.LoopType.None">
      <summary>
   The none
   </summary>
    </member>
    <member name="F:Nez.Tweens.LoopType.RestartFromBeginning">
      <summary>
   The restart from beginning
   </summary>
    </member>
    <member name="F:Nez.Tweens.LoopType.PingPong">
      <summary>
   The ping pong
   </summary>
    </member>
    <member name="P:Nez.Tweens.Tween`1.Context">
      <summary>
   handy property that you can use in any callbacks (such as a completion handler) to avoid allocations when using
   anonymous Actions
   </summary>
      <value>The context.</value>
    </member>
    <member name="M:Nez.Tweens.Tween`1.SetEaseType(EaseType)">
      <summary>
   sets the ease type used for this tween
   </summary>
      <param name="easeType">Ease type.</param>
      <returns>The ease type.</returns>
    </member>
    <member name="M:Nez.Tweens.Tween`1.SetDelay(System.Single)">
      <summary>
   sets the delay before starting the tween
   </summary>
      <param name="delay">Delay.</param>
      <returns>The delay.</returns>
    </member>
    <member name="M:Nez.Tweens.Tween`1.SetDuration(System.Single)">
      <summary>
   sets the tween duration
   </summary>
      <param name="duration">Duration.</param>
      <returns>The duration.</returns>
    </member>
    <member name="M:Nez.Tweens.Tween`1.SetTimeScale(System.Single)">
      <summary>
   sets the timeScale used for this tween. The timeScale will be multiplied with Time.deltaTime/Time.unscaledDeltaTime
   to get the actual delta time used for the tween.
   </summary>
      <param name="timeScale">Time scale.</param>
      <returns>The time scale.</returns>
    </member>
    <member name="M:Nez.Tweens.Tween`1.SetIsTimeScaleIndependent">
      <summary>
   sets the tween to use Time.unscaledDeltaTime instead of Time.deltaTime
   </summary>
      <returns>The is time scale independant.</returns>
    </member>
    <member name="M:Nez.Tweens.Tween`1.SetCompletionHandler(Action{ITween{`0}})">
      <summary>
   chainable. sets the action that should be called when the tween is complete.
   </summary>
      <param name="completionHandler">The completion handler.</param>
      <returns>ITween&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.Tweens.Tween`1.SetLoops(LoopType,System.Int32,System.Single)">
      <summary>
   chainable. set the loop type for the tween. a single pingpong loop means going from start-finish-start.
   </summary>
      <param name="loopType">Type of the loop.</param>
      <param name="loops">The loops.</param>
      <param name="delayBetweenLoops">The delay between loops.</param>
      <returns>ITween&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.Tweens.Tween`1.SetLoopCompletionHandler(Action{ITween{`0}})">
      <summary>
   chainable. sets the action that should be called when a loop is complete. A loop is either when the first part of
   a ping-pong animation completes or when starting over when using a restart-from-beginning loop type. Note that ping-pong
   loops (which are really two part tweens) will not fire the loop completion handler on the last iteration. The normal
   tween completion handler will fire though
   </summary>
      <param name="loopCompleteHandler">The loop complete handler.</param>
      <returns>ITween&lt;T&gt;.</returns>
    </member>
    <member name="M:Nez.Tweens.Tween`1.SetFrom(`0)">
      <summary>
   sets the start position for the tween
   </summary>
      <param name="from">From.</param>
      <returns>The from.</returns>
    </member>
    <member name="M:Nez.Tweens.Tween`1.PrepareForReuse(`0,`0,System.Single)">
      <summary>
   prepares a tween for reuse by resetting its from/to values and duration
   </summary>
      <param name="from">From.</param>
      <param name="to">To.</param>
      <param name="duration">Duration.</param>
      <returns>The for reuse.</returns>
    </member>
    <member name="M:Nez.Tweens.Tween`1.SetRecycleTween(System.Boolean)">
      <summary>
   Sets the recycle tween.
   </summary>
      <param name="shouldRecycleTween">if set to <c>true</c> [should recycle tween].</param>
      <returns>ITween&lt;T&gt;.</returns>
      <font color="red">Badly formed XML comment.</font>
    </member>
    <member name="M:Nez.Tweens.Tween`1.SetIsRelative">
      <summary>
   helper that just sets the to value of the tween to be to + from making the tween relative
   to its current value.
   </summary>
      <returns>The is relative tween.</returns>
    </member>
    <member name="M:Nez.Tweens.Tween`1.SetContext(System.Object)">
      <summary>
   allows you to set any object reference retrievable via tween.context. This is handy for avoiding
   closure allocations for completion handler Actions. You can also search TweenManager for all tweens with a specific
   context.
   </summary>
      <param name="context">Context.</param>
      <returns>The context.</returns>
    </member>
    <member name="M:Nez.Tweens.Tween`1.SetNextTween(ITweenable)">
      <summary>
   allows you to add a tween that will get run after this tween completes. Note that nextTween must be an ITweenable!
   Also note that all ITweenTs are ITweenable.
   </summary>
      <param name="nextTween">Next tween.</param>
      <returns>The next tween.</returns>
    </member>
    <member name="M:Nez.Tweens.Tween`1.Tick">
      <summary>
   called by TweenManager each frame like an internal Update
   </summary>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Tweens.Tween`1.RecycleSelf">
      <summary>
   called by TweenManager when a tween is removed. Subclasses can optionally recycle themself. Subclasses
   should first check the _shouldRecycleTween bool in their implementation!
   </summary>
    </member>
    <member name="M:Nez.Tweens.Tween`1.IsRunning">
      <summary>
   checks to see if a tween is running
   </summary>
      <returns>
        <c>true</c>, if running was ised, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Nez.Tweens.Tween`1.Start">
      <summary>
   starts the tween
   </summary>
    </member>
    <member name="M:Nez.Tweens.Tween`1.Pause">
      <summary>
   pauses the tween
   </summary>
    </member>
    <member name="M:Nez.Tweens.Tween`1.Resume">
      <summary>
   resumes the tween after a pause
   </summary>
    </member>
    <member name="M:Nez.Tweens.Tween`1.Stop(System.Boolean)">
      <summary>
   stops the tween optionally bringing it to completion
   </summary>
      <param name="bringToCompletion">If set to <c>true</c> bring to completion.</param>
    </member>
    <member name="M:Nez.Tweens.Tween`1.JumpToElapsedTime(System.Single)">
      <summary>
   warps the tween to elapsedTime clamping it between 0 and duration. this will immediately update the tweened
   object whether it is paused, completed or running.
   </summary>
      <param name="elapsedTime">Elapsed time.</param>
    </member>
    <member name="M:Nez.Tweens.Tween`1.ReverseTween">
      <summary>
   reverses the current tween. if it was going forward it will be going backwards and vice versa.
   </summary>
    </member>
    <member name="M:Nez.Tweens.Tween`1.WaitForCompletion">
      <summary>
   when called via StartCoroutine this will continue until the tween completes
   </summary>
      <returns>The for completion.</returns>
    </member>
    <member name="M:Nez.Tweens.Tween`1.GetTargetObject">
      <summary>
   gets the target of the tween or null for TweenTargets that arent necessarily all about a single object.
   its only real use is for TweenManager to find a list of tweens by target.
   </summary>
      <returns>The target object.</returns>
    </member>
    <member name="M:Nez.Tweens.Tween`1.Initialize(ITweenTarget{`0},`0,System.Single)">
      <summary>
   resets all state to defaults and sets the initial state based on the paramaters passed in. This method serves
   as an entry point so that Tween subclasses can call it and so that tweens can be recycled. When recycled,
   the constructor will not be called again so this method encapsulates what the constructor would be doing.
   </summary>
      <param name="target">Target.</param>
      <param name="to">To.</param>
      <param name="duration">Duration.</param>
    </member>
    <member name="T:Nez.TweenExt">
      <summary>
   Class TweenExt.
   </summary>
    </member>
    <member name="M:Nez.TweenExt.TweenPositionTo(Transform,Vector2,System.Single)">
      <summary>
   transform.position tween
   </summary>
      <param name="self">Self.</param>
      <param name="to">To.</param>
      <param name="duration">Duration.</param>
      <returns>The kposition to.</returns>
    </member>
    <member name="M:Nez.TweenExt.TweenLocalPositionTo(Transform,Vector2,System.Single)">
      <summary>
   transform.localPosition tween
   </summary>
      <param name="self">Self.</param>
      <param name="to">To.</param>
      <param name="duration">Duration.</param>
      <returns>The klocal position to.</returns>
    </member>
    <member name="M:Nez.TweenExt.TweenScaleTo(Transform,System.Single,System.Single)">
      <summary>
   transform.scale tween
   </summary>
      <param name="self">Self.</param>
      <param name="to">To.</param>
      <param name="duration">Duration.</param>
      <returns>The scale to.</returns>
    </member>
    <member name="M:Nez.TweenExt.TweenScaleTo(Transform,Vector2,System.Single)">
      <summary>
   transform.scale tween
   </summary>
      <param name="self">Self.</param>
      <param name="to">To.</param>
      <param name="duration">Duration.</param>
      <returns>The scale to.</returns>
    </member>
    <member name="M:Nez.TweenExt.TweenLocalScaleTo(Transform,System.Single,System.Single)">
      <summary>
   transform.localScale tween
   </summary>
      <param name="self">Self.</param>
      <param name="to">To.</param>
      <param name="duration">Duration.</param>
      <returns>The klocal scale to.</returns>
    </member>
    <member name="M:Nez.TweenExt.TweenLocalScaleTo(Transform,Vector2,System.Single)">
      <summary>
   transform.localScale tween
   </summary>
      <param name="self">Self.</param>
      <param name="to">To.</param>
      <param name="duration">Duration.</param>
      <returns>The klocal scale to.</returns>
    </member>
    <member name="M:Nez.TweenExt.TweenRotationDegreesTo(Transform,System.Single,System.Single)">
      <summary>
   transform.rotation tween
   </summary>
      <param name="self">Self.</param>
      <param name="to">To.</param>
      <param name="duration">Duration.</param>
      <returns>The rotation to.</returns>
    </member>
    <member name="M:Nez.TweenExt.TweenLocalRotationDegreesTo(Transform,System.Single,System.Single)">
      <summary>
   transform.localEulers tween
   </summary>
      <param name="self">Self.</param>
      <param name="to">To.</param>
      <param name="duration">Duration.</param>
      <returns>The klocal eulers to.</returns>
    </member>
    <member name="M:Nez.TweenExt.TweenPositionTo(Entity,Vector2,System.Single)">
      <summary>
   transform.position tween
   </summary>
      <param name="self">Self.</param>
      <param name="to">To.</param>
      <param name="duration">Duration.</param>
      <returns>The kposition to.</returns>
    </member>
    <member name="M:Nez.TweenExt.TweenLocalPositionTo(Entity,Vector2,System.Single)">
      <summary>
   transform.localPosition tween
   </summary>
      <param name="self">Self.</param>
      <param name="to">To.</param>
      <param name="duration">Duration.</param>
      <returns>The klocal position to.</returns>
    </member>
    <member name="M:Nez.TweenExt.TweenScaleTo(Entity,System.Single,System.Single)">
      <summary>
   transform.scale tween
   </summary>
      <param name="self">Self.</param>
      <param name="to">To.</param>
      <param name="duration">Duration.</param>
      <returns>The scale to.</returns>
    </member>
    <member name="M:Nez.TweenExt.TweenScaleTo(Entity,Vector2,System.Single)">
      <summary>
   transform.scale tween
   </summary>
      <param name="self">Self.</param>
      <param name="to">To.</param>
      <param name="duration">Duration.</param>
      <returns>The scale to.</returns>
    </member>
    <member name="M:Nez.TweenExt.TweenLocalScaleTo(Entity,System.Single,System.Single)">
      <summary>
   transform.localScale tween
   </summary>
      <param name="self">Self.</param>
      <param name="to">To.</param>
      <param name="duration">Duration.</param>
      <returns>The klocal scale to.</returns>
    </member>
    <member name="M:Nez.TweenExt.TweenLocalScaleTo(Entity,Vector2,System.Single)">
      <summary>
   transform.localScale tween
   </summary>
      <param name="self">Self.</param>
      <param name="to">To.</param>
      <param name="duration">Duration.</param>
      <returns>The klocal scale to.</returns>
    </member>
    <member name="M:Nez.TweenExt.TweenRotationDegreesTo(Entity,System.Single,System.Single)">
      <summary>
   transform.rotation tween
   </summary>
      <param name="self">Self.</param>
      <param name="to">To.</param>
      <param name="duration">Duration.</param>
      <returns>The rotation to.</returns>
    </member>
    <member name="M:Nez.TweenExt.TweenLocalRotationDegreesTo(Entity,System.Single,System.Single)">
      <summary>
   transform.localEulers tween
   </summary>
      <param name="self">Self.</param>
      <param name="to">To.</param>
      <param name="duration">Duration.</param>
      <returns>The klocal eulers to.</returns>
    </member>
    <member name="M:Nez.TweenExt.TweenColorTo(RenderableComponent,Color,System.Single)">
      <summary>
   RenderableComponent.color tween
   </summary>
      <param name="self">Self.</param>
      <param name="to">To.</param>
      <param name="duration">Duration.</param>
      <returns>The color to.</returns>
    </member>
    <member name="T:Nez.Tweens.TweenManager">
      <summary>
   Class TweenManager.
   Implements the <see cref="T:Nez.GlobalManager" /></summary>
      <seealso cref="T:Nez.GlobalManager" />
    </member>
    <member name="F:Nez.Tweens.TweenManager.DefaultEaseType">
      <summary>
   The default ease type
   </summary>
    </member>
    <member name="F:Nez.Tweens.TweenManager.RemoveAllTweensOnLevelLoad">
      <summary>
   if true, the active tween list will be cleared when a new level loads
   </summary>
    </member>
    <member name="F:Nez.Tweens.TweenManager.CacheIntTweens">
      <summary>
   automatic caching of various types is supported here. Note that caching will only work when using extension methods to start
   the tweens or if you fetch a tween from the cache when doing custom tweens. See the extension method implementations for
   how to fetch a cached tween.
   </summary>
    </member>
    <member name="F:Nez.Tweens.TweenManager.CacheFloatTweens">
      <summary>
   The cache float tweens
   </summary>
    </member>
    <member name="F:Nez.Tweens.TweenManager.CacheVector2Tweens">
      <summary>
   The cache vector2 tweens
   </summary>
    </member>
    <member name="F:Nez.Tweens.TweenManager.CacheVector3Tweens">
      <summary>
   The cache vector3 tweens
   </summary>
    </member>
    <member name="F:Nez.Tweens.TweenManager.CacheVector4Tweens">
      <summary>
   The cache vector4 tweens
   </summary>
    </member>
    <member name="F:Nez.Tweens.TweenManager.CacheQuaternionTweens">
      <summary>
   The cache quaternion tweens
   </summary>
    </member>
    <member name="F:Nez.Tweens.TweenManager.CacheColorTweens">
      <summary>
   The cache color tweens
   </summary>
    </member>
    <member name="F:Nez.Tweens.TweenManager.CacheRectTweens">
      <summary>
   The cache rect tweens
   </summary>
    </member>
    <member name="P:Nez.Tweens.TweenManager.ActiveTweens">
      <summary>
   Gets the active tweens.
   </summary>
      <value>The active tweens.</value>
    </member>
    <member name="M:Nez.Tweens.TweenManager.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Tweens.TweenManager" /> class.
   </summary>
    </member>
    <member name="M:Nez.Tweens.TweenManager.Update">
      <summary>
   called each frame before Scene.update
   </summary>
    </member>
    <member name="M:Nez.Tweens.TweenManager.AddTween(ITweenable)">
      <summary>
   adds a tween to the active tweens list
   </summary>
      <param name="tween">Tween.</param>
    </member>
    <member name="M:Nez.Tweens.TweenManager.RemoveTween(ITweenable)">
      <summary>
   removes a tween from the active tweens list
   </summary>
      <param name="tween">Tween.</param>
    </member>
    <member name="M:Nez.Tweens.TweenManager.StopAllTweens(System.Boolean)">
      <summary>
   stops all tweens optionlly bringing them all to completion
   </summary>
      <param name="bringToCompletion">If set to <c>true</c> bring to completion.</param>
    </member>
    <member name="M:Nez.Tweens.TweenManager.AllTweensWithContext(System.Object)">
      <summary>
   returns all the tweens that have a specific context. Tweens are returned as ITweenable since that is all
   that TweenManager knows about.
   </summary>
      <param name="context">Context.</param>
      <returns>The tweens with context.</returns>
    </member>
    <member name="M:Nez.Tweens.TweenManager.StopAllTweensWithContext(System.Object,System.Boolean)">
      <summary>
   stops all the tweens with a given context
   </summary>
      <param name="context">Context.</param>
      <param name="bringToCompletion">if set to <c>true</c> [bring to completion].</param>
      <returns>The tweens with context.</returns>
    </member>
    <member name="M:Nez.Tweens.TweenManager.AllTweensWithTarget(System.Object)">
      <summary>
   returns all the tweens that have a specific target. Tweens are returned as ITweenControl since that is all
   that TweenManager knows about.
   </summary>
      <param name="target">target.</param>
      <returns>The tweens with target.</returns>
    </member>
    <member name="M:Nez.Tweens.TweenManager.AllTweensWithTargetEntity(Entity)">
      <summary>
   returns all the tweens that target a specific entity. Tweens are returned as ITweenControl since that is all
   that TweenManager knows about.
   </summary>
      <param name="target">target.</param>
      <returns>The tweens that target entity.</returns>
    </member>
    <member name="M:Nez.Tweens.TweenManager.StopAllTweensWithTarget(System.Object,System.Boolean)">
      <summary>
   stops all the tweens that have a specific target
   that TweenManager knows about.
   </summary>
      <param name="target">target.</param>
      <param name="bringToCompletion">if set to <c>true</c> [bring to completion].</param>
    </member>
    <member name="T:Nez.Tweens.IntTween">
      <summary>
   Class IntTween.
   Implements the <see cref="T:Nez.Tweens.Tween`1" /></summary>
      <seealso cref="T:Nez.Tweens.Tween`1" />
    </member>
    <member name="T:Nez.Tweens.FloatTween">
      <summary>
   Class FloatTween.
   Implements the <see cref="T:Nez.Tweens.Tween`1" /></summary>
      <seealso cref="T:Nez.Tweens.Tween`1" />
    </member>
    <member name="T:Nez.Tweens.Vector2Tween">
      <summary>
   Class Vector2Tween.
   Implements the <see cref="T:Nez.Tweens.Tween`1" /></summary>
      <seealso cref="T:Nez.Tweens.Tween`1" />
    </member>
    <member name="T:Nez.Tweens.Vector3Tween">
      <summary>
   Class Vector3Tween.
   Implements the <see cref="T:Nez.Tweens.Tween`1" /></summary>
      <seealso cref="T:Nez.Tweens.Tween`1" />
    </member>
    <member name="T:Nez.Tweens.Vector4Tween">
      <summary>
   Class Vector4Tween.
   Implements the <see cref="T:Nez.Tweens.Tween`1" /></summary>
      <seealso cref="T:Nez.Tweens.Tween`1" />
    </member>
    <member name="T:Nez.Tweens.QuaternionTween">
      <summary>
   Class QuaternionTween.
   Implements the <see cref="T:Nez.Tweens.Tween`1" /></summary>
      <seealso cref="T:Nez.Tweens.Tween`1" />
    </member>
    <member name="T:Nez.Tweens.ColorTween">
      <summary>
   Class ColorTween.
   Implements the <see cref="T:Nez.Tweens.Tween`1" /></summary>
      <seealso cref="T:Nez.Tweens.Tween`1" />
    </member>
    <member name="T:Nez.Tweens.RectangleTween">
      <summary>
   Class RectangleTween.
   Implements the <see cref="T:Nez.Tweens.Tween`1" /></summary>
      <seealso cref="T:Nez.Tweens.Tween`1" />
    </member>
    <member name="M:Nez.Tweens.IntTween.Create">
      <summary>
   Creates this instance.
   </summary>
      <returns>IntTween.</returns>
    </member>
    <member name="M:Nez.Tweens.IntTween.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Tweens.IntTween" /> class.
   </summary>
    </member>
    <member name="M:Nez.Tweens.IntTween.#ctor(ITweenTarget{System.Int32},System.Int32,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Tweens.IntTween" /> class.
   </summary>
      <param name="target">The target.</param>
      <param name="to">To.</param>
      <param name="duration">The duration.</param>
    </member>
    <member name="M:Nez.Tweens.IntTween.SetIsRelative">
      <summary>
   helper that just sets the to value of the tween to be to + from making the tween relative
   to its current value.
   </summary>
      <returns>The is relative tween.</returns>
    </member>
    <member name="M:Nez.Tweens.IntTween.RecycleSelf">
      <summary>
   called by TweenManager when a tween is removed. Subclasses can optionally recycle themself. Subclasses
   should first check the _shouldRecycleTween bool in their implementation!
   </summary>
    </member>
    <member name="M:Nez.Tweens.FloatTween.Create">
      <summary>
   Creates this instance.
   </summary>
      <returns>FloatTween.</returns>
    </member>
    <member name="M:Nez.Tweens.FloatTween.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Tweens.FloatTween" /> class.
   </summary>
    </member>
    <member name="M:Nez.Tweens.FloatTween.#ctor(ITweenTarget{System.Single},System.Single,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Tweens.FloatTween" /> class.
   </summary>
      <param name="target">The target.</param>
      <param name="to">To.</param>
      <param name="duration">The duration.</param>
    </member>
    <member name="M:Nez.Tweens.FloatTween.SetIsRelative">
      <summary>
   helper that just sets the to value of the tween to be to + from making the tween relative
   to its current value.
   </summary>
      <returns>The is relative tween.</returns>
    </member>
    <member name="M:Nez.Tweens.FloatTween.RecycleSelf">
      <summary>
   called by TweenManager when a tween is removed. Subclasses can optionally recycle themself. Subclasses
   should first check the _shouldRecycleTween bool in their implementation!
   </summary>
    </member>
    <member name="M:Nez.Tweens.Vector2Tween.Create">
      <summary>
   Creates this instance.
   </summary>
      <returns>Vector2Tween.</returns>
    </member>
    <member name="M:Nez.Tweens.Vector2Tween.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Tweens.Vector2Tween" /> class.
   </summary>
    </member>
    <member name="M:Nez.Tweens.Vector2Tween.#ctor(ITweenTarget{Vector2},Vector2,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Tweens.Vector2Tween" /> class.
   </summary>
      <param name="target">The target.</param>
      <param name="to">To.</param>
      <param name="duration">The duration.</param>
    </member>
    <member name="M:Nez.Tweens.Vector2Tween.SetIsRelative">
      <summary>
   helper that just sets the to value of the tween to be to + from making the tween relative
   to its current value.
   </summary>
      <returns>The is relative tween.</returns>
    </member>
    <member name="M:Nez.Tweens.Vector2Tween.RecycleSelf">
      <summary>
   called by TweenManager when a tween is removed. Subclasses can optionally recycle themself. Subclasses
   should first check the _shouldRecycleTween bool in their implementation!
   </summary>
    </member>
    <member name="M:Nez.Tweens.Vector3Tween.Create">
      <summary>
   Creates this instance.
   </summary>
      <returns>Vector3Tween.</returns>
    </member>
    <member name="M:Nez.Tweens.Vector3Tween.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Tweens.Vector3Tween" /> class.
   </summary>
    </member>
    <member name="M:Nez.Tweens.Vector3Tween.#ctor(ITweenTarget{Vector3},Vector3,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Tweens.Vector3Tween" /> class.
   </summary>
      <param name="target">The target.</param>
      <param name="to">To.</param>
      <param name="duration">The duration.</param>
    </member>
    <member name="M:Nez.Tweens.Vector3Tween.SetIsRelative">
      <summary>
   helper that just sets the to value of the tween to be to + from making the tween relative
   to its current value.
   </summary>
      <returns>The is relative tween.</returns>
    </member>
    <member name="M:Nez.Tweens.Vector3Tween.RecycleSelf">
      <summary>
   called by TweenManager when a tween is removed. Subclasses can optionally recycle themself. Subclasses
   should first check the _shouldRecycleTween bool in their implementation!
   </summary>
    </member>
    <member name="M:Nez.Tweens.Vector4Tween.Create">
      <summary>
   Creates this instance.
   </summary>
      <returns>Vector4Tween.</returns>
    </member>
    <member name="M:Nez.Tweens.Vector4Tween.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Tweens.Vector4Tween" /> class.
   </summary>
    </member>
    <member name="M:Nez.Tweens.Vector4Tween.#ctor(ITweenTarget{Vector4},Vector4,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Tweens.Vector4Tween" /> class.
   </summary>
      <param name="target">The target.</param>
      <param name="to">To.</param>
      <param name="duration">The duration.</param>
    </member>
    <member name="M:Nez.Tweens.Vector4Tween.SetIsRelative">
      <summary>
   helper that just sets the to value of the tween to be to + from making the tween relative
   to its current value.
   </summary>
      <returns>The is relative tween.</returns>
    </member>
    <member name="M:Nez.Tweens.Vector4Tween.RecycleSelf">
      <summary>
   called by TweenManager when a tween is removed. Subclasses can optionally recycle themself. Subclasses
   should first check the _shouldRecycleTween bool in their implementation!
   </summary>
    </member>
    <member name="M:Nez.Tweens.QuaternionTween.Create">
      <summary>
   Creates this instance.
   </summary>
      <returns>QuaternionTween.</returns>
    </member>
    <member name="M:Nez.Tweens.QuaternionTween.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Tweens.QuaternionTween" /> class.
   </summary>
    </member>
    <member name="M:Nez.Tweens.QuaternionTween.#ctor(ITweenTarget{Quaternion},Quaternion,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Tweens.QuaternionTween" /> class.
   </summary>
      <param name="target">The target.</param>
      <param name="to">To.</param>
      <param name="duration">The duration.</param>
    </member>
    <member name="M:Nez.Tweens.QuaternionTween.SetIsRelative">
      <summary>
   helper that just sets the to value of the tween to be to + from making the tween relative
   to its current value.
   </summary>
      <returns>The is relative tween.</returns>
    </member>
    <member name="M:Nez.Tweens.QuaternionTween.RecycleSelf">
      <summary>
   called by TweenManager when a tween is removed. Subclasses can optionally recycle themself. Subclasses
   should first check the _shouldRecycleTween bool in their implementation!
   </summary>
    </member>
    <member name="M:Nez.Tweens.ColorTween.Create">
      <summary>
   Creates this instance.
   </summary>
      <returns>ColorTween.</returns>
    </member>
    <member name="M:Nez.Tweens.ColorTween.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Tweens.ColorTween" /> class.
   </summary>
    </member>
    <member name="M:Nez.Tweens.ColorTween.#ctor(ITweenTarget{Color},Color,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Tweens.ColorTween" /> class.
   </summary>
      <param name="target">The target.</param>
      <param name="to">To.</param>
      <param name="duration">The duration.</param>
    </member>
    <member name="M:Nez.Tweens.ColorTween.SetIsRelative">
      <summary>
   helper that just sets the to value of the tween to be to + from making the tween relative
   to its current value.
   </summary>
      <returns>The is relative tween.</returns>
    </member>
    <member name="M:Nez.Tweens.ColorTween.RecycleSelf">
      <summary>
   called by TweenManager when a tween is removed. Subclasses can optionally recycle themself. Subclasses
   should first check the _shouldRecycleTween bool in their implementation!
   </summary>
    </member>
    <member name="M:Nez.Tweens.RectangleTween.Create">
      <summary>
   Creates this instance.
   </summary>
      <returns>RectangleTween.</returns>
    </member>
    <member name="M:Nez.Tweens.RectangleTween.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Tweens.RectangleTween" /> class.
   </summary>
    </member>
    <member name="M:Nez.Tweens.RectangleTween.#ctor(ITweenTarget{Rectangle},Rectangle,System.Single)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Tweens.RectangleTween" /> class.
   </summary>
      <param name="target">The target.</param>
      <param name="to">To.</param>
      <param name="duration">The duration.</param>
    </member>
    <member name="M:Nez.Tweens.RectangleTween.SetIsRelative">
      <summary>
   helper that just sets the to value of the tween to be to + from making the tween relative
   to its current value.
   </summary>
      <returns>The is relative tween.</returns>
    </member>
    <member name="M:Nez.Tweens.RectangleTween.RecycleSelf">
      <summary>
   called by TweenManager when a tween is removed. Subclasses can optionally recycle themself. Subclasses
   should first check the _shouldRecycleTween bool in their implementation!
   </summary>
    </member>
    <member name="T:Nez.Systems.Emitter`1">
      <summary>
   simple event emitter that is designed to have its generic contraint be either an int or an enum
   </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:Nez.Systems.Emitter`2">
      <summary>
   simple event emitter that is designed to have its generic contraint be either an int or an enum. this variant lets you pass around
   data with each event. See InputEvent for an example.
   </summary>
      <typeparam name="T">
      </typeparam>
      <typeparam name="U">
      </typeparam>
    </member>
    <member name="M:Nez.Systems.Emitter`1.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Systems.Emitter`1" /> class.
   </summary>
    </member>
    <member name="M:Nez.Systems.Emitter`1.#ctor(IEqualityComparer{`0})">
      <summary>
   if using an enum as the generic constraint you may want to pass in a custom comparer to avoid boxing/unboxing. See the CoreEventsComparer
   for an example implementation.
   </summary>
      <param name="customComparer">Custom comparer.</param>
    </member>
    <member name="M:Nez.Systems.Emitter`1.AddObserver(`0,Action)">
      <summary>
   Adds the observer.
   </summary>
      <param name="eventType">Type of the event.</param>
      <param name="handler">The handler.</param>
    </member>
    <member name="M:Nez.Systems.Emitter`1.RemoveObserver(`0,Action)">
      <summary>
   Removes the observer.
   </summary>
      <param name="eventType">Type of the event.</param>
      <param name="handler">The handler.</param>
    </member>
    <member name="M:Nez.Systems.Emitter`1.Emit(`0)">
      <summary>
   Emits the specified event type.
   </summary>
      <param name="eventType">Type of the event.</param>
    </member>
    <member name="M:Nez.Systems.Emitter`2.#ctor">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Systems.Emitter`2" /> class.
   </summary>
    </member>
    <member name="M:Nez.Systems.Emitter`2.#ctor(IEqualityComparer{`0})">
      <summary>
   if using an enum as the generic constraint you may want to pass in a custom comparer to avoid boxing/unboxing. See the CoreEventsComparer
   for an example implementation.
   </summary>
      <param name="customComparer">Custom comparer.</param>
    </member>
    <member name="M:Nez.Systems.Emitter`2.AddObserver(`0,Action{`1})">
      <summary>
   Adds the observer.
   </summary>
      <param name="eventType">Type of the event.</param>
      <param name="handler">The handler.</param>
    </member>
    <member name="M:Nez.Systems.Emitter`2.RemoveObserver(`0,Action{`1})">
      <summary>
   Removes the observer.
   </summary>
      <param name="eventType">Type of the event.</param>
      <param name="handler">The handler.</param>
    </member>
    <member name="M:Nez.Systems.Emitter`2.Emit(`0,`1)">
      <summary>
   Emits the specified event type.
   </summary>
      <param name="eventType">Type of the event.</param>
      <param name="data">The data.</param>
    </member>
    <member name="T:Nez.HorizontalAlign">
      <summary>
   Enum HorizontalAlign
   </summary>
    </member>
    <member name="T:Nez.VerticalAlign">
      <summary>
   Enum VerticalAlign
   </summary>
    </member>
    <member name="T:Nez.Edge">
      <summary>
   Enum Edge
   </summary>
    </member>
    <member name="T:Nez.Direction">
      <summary>
   Enum Direction
   </summary>
    </member>
    <member name="F:Nez.HorizontalAlign.Left">
      <summary>
   The left
   </summary>
    </member>
    <member name="F:Nez.HorizontalAlign.Center">
      <summary>
   The center
   </summary>
    </member>
    <member name="F:Nez.HorizontalAlign.Right">
      <summary>
   The right
   </summary>
    </member>
    <member name="F:Nez.VerticalAlign.Top">
      <summary>
   The top
   </summary>
    </member>
    <member name="F:Nez.VerticalAlign.Center">
      <summary>
   The center
   </summary>
    </member>
    <member name="F:Nez.VerticalAlign.Bottom">
      <summary>
   The bottom
   </summary>
    </member>
    <member name="F:Nez.Edge.Top">
      <summary>
   The top
   </summary>
    </member>
    <member name="F:Nez.Edge.Bottom">
      <summary>
   The bottom
   </summary>
    </member>
    <member name="F:Nez.Edge.Left">
      <summary>
   The left
   </summary>
    </member>
    <member name="F:Nez.Edge.Right">
      <summary>
   The right
   </summary>
    </member>
    <member name="F:Nez.Direction.Up">
      <summary>
   Up
   </summary>
    </member>
    <member name="F:Nez.Direction.Down">
      <summary>
   Down
   </summary>
    </member>
    <member name="F:Nez.Direction.Left">
      <summary>
   The left
   </summary>
    </member>
    <member name="F:Nez.Direction.Right">
      <summary>
   The right
   </summary>
    </member>
    <member name="T:Nez.GlobalManager">
      <summary>
   Class GlobalManager.
   </summary>
    </member>
    <member name="P:Nez.GlobalManager.Enabled">
      <summary>
   true if the GlobalManager is enabled. Changes in state result in OnEnabled/OnDisable being called.
   </summary>
      <value>
        <c>true</c> if enabled; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:Nez.GlobalManager.SetEnabled(System.Boolean)">
      <summary>
   enables/disables this GlobalManager
   </summary>
      <param name="isEnabled">If set to <c>true</c> is enabled.</param>
      <returns>The enabled.</returns>
    </member>
    <member name="M:Nez.GlobalManager.OnEnabled">
      <summary>
   called when this GlobalManager is enabled
   </summary>
    </member>
    <member name="M:Nez.GlobalManager.OnDisabled">
      <summary>
   called when the this GlobalManager is disabled
   </summary>
    </member>
    <member name="M:Nez.GlobalManager.Update">
      <summary>
   called each frame before Scene.update
   </summary>
    </member>
    <member name="T:Nez.ReflectionUtils">
      <summary>
   helper class to fetch property delegates
   </summary>
    </member>
    <member name="M:Nez.ReflectionUtils.GetFieldInfo(System.Object,System.String)">
      <summary>
   Gets the field information.
   </summary>
      <param name="targetObject">The target object.</param>
      <param name="fieldName">Name of the field.</param>
      <returns>FieldInfo.</returns>
    </member>
    <member name="M:Nez.ReflectionUtils.GetFieldInfo(Type,System.String)">
      <summary>
   Gets the field information.
   </summary>
      <param name="type">The type.</param>
      <param name="fieldName">Name of the field.</param>
      <returns>FieldInfo.</returns>
    </member>
    <member name="M:Nez.ReflectionUtils.GetFields(Type)">
      <summary>
   Gets the fields.
   </summary>
      <param name="type">The type.</param>
      <returns>IEnumerable&lt;FieldInfo&gt;.</returns>
    </member>
    <member name="M:Nez.ReflectionUtils.GetFieldValue(System.Object,System.String)">
      <summary>
   Gets the field value.
   </summary>
      <param name="targetObject">The target object.</param>
      <param name="fieldName">Name of the field.</param>
      <returns>System.Object.</returns>
    </member>
    <member name="M:Nez.ReflectionUtils.GetPropertyInfo(System.Object,System.String)">
      <summary>
   Gets the property information.
   </summary>
      <param name="targetObject">The target object.</param>
      <param name="propertyName">Name of the property.</param>
      <returns>PropertyInfo.</returns>
    </member>
    <member name="M:Nez.ReflectionUtils.GetPropertyInfo(Type,System.String)">
      <summary>
   Gets the property information.
   </summary>
      <param name="type">The type.</param>
      <param name="propertyName">Name of the property.</param>
      <returns>PropertyInfo.</returns>
    </member>
    <member name="M:Nez.ReflectionUtils.GetProperties(Type)">
      <summary>
   Gets the properties.
   </summary>
      <param name="type">The type.</param>
      <returns>IEnumerable&lt;PropertyInfo&gt;.</returns>
    </member>
    <member name="M:Nez.ReflectionUtils.GetPropertyGetter(PropertyInfo)">
      <summary>
   Gets the property getter.
   </summary>
      <param name="prop">The property.</param>
      <returns>MethodInfo.</returns>
    </member>
    <member name="M:Nez.ReflectionUtils.GetPropertySetter(PropertyInfo)">
      <summary>
   Gets the property setter.
   </summary>
      <param name="prop">The property.</param>
      <returns>MethodInfo.</returns>
    </member>
    <member name="M:Nez.ReflectionUtils.GetPropertyValue(System.Object,System.String)">
      <summary>
   Gets the property value.
   </summary>
      <param name="targetObject">The target object.</param>
      <param name="propertyName">Name of the property.</param>
      <returns>System.Object.</returns>
    </member>
    <member name="M:Nez.ReflectionUtils.SetterForProperty``1(System.Object,System.String)">
      <summary>
   either returns a super fast Delegate to set the given property or null if it couldn't be found
   via reflection
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="targetObject">The target object.</param>
      <param name="propertyName">Name of the property.</param>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.ReflectionUtils.GetterForProperty``1(System.Object,System.String)">
      <summary>
   either returns a super fast Delegate to get the given property or null if it couldn't be found
   via reflection
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="targetObject">The target object.</param>
      <param name="propertyName">Name of the property.</param>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.ReflectionUtils.GetMethods(Type)">
      <summary>
   Gets the methods.
   </summary>
      <param name="type">The type.</param>
      <returns>IEnumerable&lt;MethodInfo&gt;.</returns>
    </member>
    <member name="M:Nez.ReflectionUtils.GetMethodInfo(System.Object,System.String)">
      <summary>
   Gets the method information.
   </summary>
      <param name="targetObject">The target object.</param>
      <param name="methodName">Name of the method.</param>
      <returns>MethodInfo.</returns>
    </member>
    <member name="M:Nez.ReflectionUtils.GetMethodInfo(System.Object,System.String,Type[])">
      <summary>
   Gets the method information.
   </summary>
      <param name="targetObject">The target object.</param>
      <param name="methodName">Name of the method.</param>
      <param name="parameters">The parameters.</param>
      <returns>MethodInfo.</returns>
    </member>
    <member name="M:Nez.ReflectionUtils.GetMethodInfo(Type,System.String,Type[])">
      <summary>
   Gets the method information.
   </summary>
      <param name="type">The type.</param>
      <param name="methodName">Name of the method.</param>
      <param name="parameters">The parameters.</param>
      <returns>MethodInfo.</returns>
    </member>
    <member name="M:Nez.ReflectionUtils.CreateDelegate``1(System.Object,MethodInfo)">
      <summary>
   Creates the delegate.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="targetObject">The target object.</param>
      <param name="methodInfo">The method information.</param>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.ReflectionUtils.GetAllSubclasses(Type,System.Boolean)">
      <summary>
   Gets all subclasses.
   </summary>
      <param name="baseClassType">Type of the base class.</param>
      <param name="onlyIncludeParameterlessConstructors">if set to <c>true</c> [only include parameterless constructors].</param>
      <returns>List&lt;Type&gt;.</returns>
      <font color="red">Badly formed XML comment.</font>
    </member>
    <member name="M:Nez.ReflectionUtils.GetAllTypesAssignableFrom(Type,System.Boolean)">
      <summary>
   Gets all types assignable from.
   </summary>
      <param name="baseClassType">Type of the base class.</param>
      <param name="onlyIncludeParameterlessConstructors">if set to <c>true</c> [only include parameterless constructors].</param>
      <returns>List&lt;Type&gt;.</returns>
      <font color="red">Badly formed XML comment.</font>
    </member>
    <member name="M:Nez.ReflectionUtils.IsGenericTypeOrSubclassOfGenericType(Type)">
      <summary>
   checks <paramref name="type" /> to see if it or any base class in the chain IsGenericType
   </summary>
      <param name="type">The type.</param>
      <returns>
        <c>true</c> if [is generic type or subclass of generic type] [the specified type]; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nez.ReflectionUtils.GetAllTypesWithAttribute``1">
      <summary>
   Gets all types with attribute.
   </summary>
      <typeparam name="T">
      </typeparam>
      <returns>List&lt;Type&gt;.</returns>
    </member>
    <member name="T:Nez.Screen">
      <summary>
   Class Screen.
   </summary>
    </member>
    <member name="P:Nez.Screen.Width">
      <summary>
   width of the GraphicsDevice back buffer
   </summary>
      <value>The width.</value>
    </member>
    <member name="P:Nez.Screen.Height">
      <summary>
   height of the GraphicsDevice back buffer
   </summary>
      <value>The height.</value>
    </member>
    <member name="P:Nez.Screen.Size">
      <summary>
   gets the Screen's size as a Vector2
   </summary>
      <value>The screen size.</value>
    </member>
    <member name="P:Nez.Screen.Center">
      <summary>
   gets the Screen's center.null Note that this is the center of the backbuffer! If you are rendering to a smaller RenderTarget
   you will need to scale this value appropriately.
   </summary>
      <value>The center.</value>
    </member>
    <member name="P:Nez.Screen.PreferredBackBufferWidth">
      <summary>
   Gets or sets the width of the preferred back buffer.
   </summary>
      <value>The width of the preferred back buffer.</value>
    </member>
    <member name="P:Nez.Screen.PreferredBackBufferHeight">
      <summary>
   Gets or sets the height of the preferred back buffer.
   </summary>
      <value>The height of the preferred back buffer.</value>
    </member>
    <member name="P:Nez.Screen.MonitorWidth">
      <summary>
   Gets the width of the monitor.
   </summary>
      <value>The width of the monitor.</value>
    </member>
    <member name="P:Nez.Screen.MonitorHeight">
      <summary>
   Gets the height of the monitor.
   </summary>
      <value>The height of the monitor.</value>
    </member>
    <member name="P:Nez.Screen.BackBufferFormat">
      <summary>
   Gets the back buffer format.
   </summary>
      <value>The back buffer format.</value>
    </member>
    <member name="P:Nez.Screen.PreferredBackBufferFormat">
      <summary>
   Gets or sets the preferred back buffer format.
   </summary>
      <value>The preferred back buffer format.</value>
    </member>
    <member name="P:Nez.Screen.SynchronizeWithVerticalRetrace">
      <summary>
   Gets or sets a value indicating whether [synchronize with vertical retrace].
   </summary>
      <value>
        <c>true</c> if [synchronize with vertical retrace]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Screen.PreferredDepthStencilFormat">
      <summary>
   Gets or sets the preferred depth stencil format.
   </summary>
      <value>The preferred depth stencil format.</value>
    </member>
    <member name="P:Nez.Screen.IsFullscreen">
      <summary>
   Gets or sets a value indicating whether this instance is fullscreen.
   </summary>
      <value>
        <c>true</c> if this instance is fullscreen; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Nez.Screen.SupportedOrientations">
      <summary>
   Gets or sets the supported orientations.
   </summary>
      <value>The supported orientations.</value>
    </member>
    <member name="M:Nez.Screen.ApplyChanges">
      <summary>
   Applies the changes.
   </summary>
    </member>
    <member name="M:Nez.Screen.SetSize(System.Int32,System.Int32)">
      <summary>
   sets the preferredBackBuffer then applies the changes
   </summary>
      <param name="width">Width.</param>
      <param name="height">Height.</param>
    </member>
    <member name="T:Nez.Storage">
      <summary>
   Class Storage.
   </summary>
    </member>
    <member name="M:Nez.Storage.GetStorageRoot">
      <summary>
   attempts to come up with a root folder you can use to save your data accross all (non-console) platforms
   </summary>
      <returns>The storage root.</returns>
    </member>
    <member name="T:Nez.Time">
      <summary>
   provides frame timing information
   </summary>
    </member>
    <member name="F:Nez.Time.TotalTime">
      <summary>
   total time the game has been running
   </summary>
    </member>
    <member name="F:Nez.Time.DeltaTime">
      <summary>
   delta time from the previous frame to the current, scaled by timeScale
   </summary>
    </member>
    <member name="F:Nez.Time.UnscaledDeltaTime">
      <summary>
   unscaled version of deltaTime. Not affected by timeScale
   </summary>
    </member>
    <member name="F:Nez.Time.AltDeltaTime">
      <summary>
   secondary deltaTime for use when you need to scale two different deltas simultaneously
   </summary>
    </member>
    <member name="F:Nez.Time.TimeSinceSceneLoad">
      <summary>
   total time since the Scene was loaded
   </summary>
    </member>
    <member name="F:Nez.Time.TimeScale">
      <summary>
   time scale of deltaTime
   </summary>
    </member>
    <member name="F:Nez.Time.AltTimeScale">
      <summary>
   time scale of altDeltaTime
   </summary>
    </member>
    <member name="F:Nez.Time.FrameCount">
      <summary>
   total number of frames that have passed
   </summary>
    </member>
    <member name="F:Nez.Time.MaxDeltaTime">
      <summary>
   Maximum value that DeltaTime can be. This can be useful to prevent physics from breaking when dragging
   the game window or if your game hitches.
   </summary>
    </member>
    <member name="M:Nez.Time.CheckEvery(System.Single)">
      <summary>
   Allows to check in intervals. Should only be used with interval values above deltaTime,
   otherwise it will always return true.
   </summary>
      <param name="interval">The interval.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="T:Nez.Triangulator">
      <summary>
   simple ear clipping triangulator. the final triangles will be present in the triangleIndices list
   </summary>
    </member>
    <member name="F:Nez.Triangulator.TriangleIndices">
      <summary>
   The indexes of triangle list entries for the list of points used in the last triangulate call.
   </summary>
    </member>
    <member name="M:Nez.Triangulator.Triangulate(Vector2[],System.Boolean)">
      <summary>
   Computes a triangle list that fully covers the area enclosed by the given set of points. If points are not CCW, pass false for
   the arePointsCCW parameter
   </summary>
      <param name="points">A list of points that defines an enclosing path.</param>
      <param name="arePointsCCW">if set to <c>true</c> [are points CCW].</param>
    </member>
    <member name="M:Nez.Triangulator.TestPointTriangle(Vector2,Vector2,Vector2,Vector2)">
      <summary>
   Tests the point triangle.
   </summary>
      <param name="point">The point.</param>
      <param name="a">a.</param>
      <param name="b">The b.</param>
      <param name="c">The c.</param>
      <returns>
        <c>true</c> if XXXX, <c>false</c> otherwise.</returns>
    </member>
    <member name="T:Nez.Utils">
      <summary>
   utility methods that don't yet have a proper home that makes sense
   </summary>
    </member>
    <member name="M:Nez.Utils.RandomString(System.Int32)">
      <summary>
   Randoms the string.
   </summary>
      <param name="size">The size.</param>
      <returns>System.String.</returns>
    </member>
    <member name="M:Nez.Utils.Swap``1(``0@,``0@)">
      <summary>
   swaps the two object types
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <param name="first">First.</param>
      <param name="second">Second.</param>
    </member>
    <member name="T:Nez.Core">
      <summary>
   Class Core.
   Implements the <see cref="T:Microsoft.Xna.Framework.Game" /></summary>
      <seealso cref="T:Microsoft.Xna.Framework.Game" />
    </member>
    <member name="F:Nez.Core.Emitter">
      <summary>
   core emitter. emits only Core level events.
   </summary>
    </member>
    <member name="F:Nez.Core.ExitOnEscapeKeypress">
      <summary>
   enables/disables if we should quit the app when escape is pressed
   </summary>
    </member>
    <member name="F:Nez.Core.PauseOnFocusLost">
      <summary>
   enables/disables pausing when focus is lost. No update or render methods will be called if true when not in focus.
   </summary>
    </member>
    <member name="F:Nez.Core.DebugRenderEnabled">
      <summary>
   enables/disables debug rendering
   </summary>
    </member>
    <member name="F:Nez.Core.GraphicsDevice">
      <summary>
   global access to the graphicsDevice
   </summary>
    </member>
    <member name="F:Nez.Core.Content">
      <summary>
   global content manager for loading any assets that should stick around between scenes
   </summary>
    </member>
    <member name="F:Nez.Core.DefaultSamplerState">
      <summary>
   default SamplerState used by Materials. Note that this must be set at launch! Changing it after that time will result in only
   Materials created after it was set having the new SamplerState
   </summary>
    </member>
    <member name="P:Nez.Core.DefaultWrappedSamplerState">
      <summary>
   default wrapped SamplerState. Determined by the Filter of the defaultSamplerState.
   </summary>
      <value>The default state of the wraped sampler.</value>
    </member>
    <member name="P:Nez.Core.Services">
      <summary>
   default GameServiceContainer access
   </summary>
      <value>The services.</value>
    </member>
    <member name="P:Nez.Core.Instance">
      <summary>
   provides access to the single Core/Game instance
   </summary>
      <value>The instance.</value>
    </member>
    <member name="P:Nez.Core.Scene">
      <summary>
   The currently active Scene. Note that if set, the Scene will not actually change until the end of the Update
   </summary>
      <value>The scene.</value>
    </member>
    <member name="M:Nez.Core.#ctor(System.Int32,System.Int32,System.Boolean,System.String,System.String,System.Boolean)">
      <summary>
   Initializes a new instance of the <see cref="T:Nez.Core" /> class.
   </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="isFullScreen">if set to <c>true</c> [is full screen].</param>
      <param name="windowTitle">The window title.</param>
      <param name="contentDirectory">The content directory.</param>
      <param name="hardwareModeSwitch">if set to <c>true</c> [hardware mode switch].</param>
    </member>
    <member name="M:Nez.Core.Exit">
      <summary>
   Exits this instance.
   </summary>
    </member>
    <member name="M:Nez.Core.StartSceneTransition``1(``0)">
      <summary>
   temporarily runs SceneTransition allowing one Scene to transition to another smoothly with custom effects.
   </summary>
      <typeparam name="T">
      </typeparam>
      <param name="sceneTransition">Scene transition.</param>
      <returns>T.</returns>
    </member>
    <member name="M:Nez.Core.RegisterGlobalManager(GlobalManager)">
      <summary>
   adds a global manager object that will have its update method called each frame before Scene.update is called
   </summary>
      <param name="manager">Manager.</param>
      <returns>The global manager.</returns>
    </member>
    <member name="M:Nez.Core.UnregisterGlobalManager(GlobalManager)">
      <summary>
   removes the global manager object
   </summary>
      <param name="manager">Manager.</param>
      <returns>The global manager.</returns>
    </member>
    <member name="M:Nez.Core.GetGlobalManager``1">
      <summary>
   gets the global manager of type T
   </summary>
      <typeparam name="T">The 1st type parameter.</typeparam>
      <returns>The global manager.</returns>
    </member>
    <member name="M:Nez.Core.StartCoroutine(IEnumerator)">
      <summary>
   starts a coroutine. Coroutines can yeild ints/floats to delay for seconds or yeild to other calls to startCoroutine.
   Yielding null will make the coroutine get ticked the next frame.
   </summary>
      <param name="enumerator">Enumerator.</param>
      <returns>The coroutine.</returns>
    </member>
    <member name="M:Nez.Core.Schedule(System.Single,System.Boolean,System.Object,Action{ITimer})">
      <summary>
   schedules a one-time or repeating timer that will call the passed in Action
   </summary>
      <param name="timeInSeconds">Time in seconds.</param>
      <param name="repeats">If set to <c>true</c> repeats.</param>
      <param name="context">Context.</param>
      <param name="onTime">On time.</param>
      <returns>ITimer.</returns>
    </member>
    <member name="M:Nez.Core.Schedule(System.Single,System.Object,Action{ITimer})">
      <summary>
   schedules a one-time timer that will call the passed in Action after timeInSeconds
   </summary>
      <param name="timeInSeconds">Time in seconds.</param>
      <param name="context">Context.</param>
      <param name="onTime">On time.</param>
      <returns>ITimer.</returns>
    </member>
    <member name="M:Nez.Core.Schedule(System.Single,System.Boolean,Action{ITimer})">
      <summary>
   schedules a one-time or repeating timer that will call the passed in Action
   </summary>
      <param name="timeInSeconds">Time in seconds.</param>
      <param name="repeats">If set to <c>true</c> repeats.</param>
      <param name="onTime">On time.</param>
      <returns>ITimer.</returns>
    </member>
    <member name="M:Nez.Core.Schedule(System.Single,Action{ITimer})">
      <summary>
   schedules a one-time timer that will call the passed in Action after timeInSeconds
   </summary>
      <param name="timeInSeconds">Time in seconds.</param>
      <param name="onTime">On time.</param>
      <returns>ITimer.</returns>
    </member>
    <member name="T:Nez.CoreEvents">
      <summary>
   Enum CoreEvents
   </summary>
    </member>
    <member name="T:Nez.CoreEventsComparer">
      <summary>
   comparer that should be passed to a dictionary constructor to avoid boxing/unboxing when using an enum as a key
   on Mono
   </summary>
    </member>
    <member name="F:Nez.CoreEvents.GraphicsDeviceReset">
      <summary>
   fired when the graphics device resets. When this happens, any RenderTargets or other contents of VRAM will be wiped and need
   to be regenerated
   </summary>
    </member>
    <member name="F:Nez.CoreEvents.SceneChanged">
      <summary>
   fired when the scene changes
   </summary>
    </member>
    <member name="F:Nez.CoreEvents.OrientationChanged">
      <summary>
   fired when the device orientation changes
   </summary>
    </member>
    <member name="F:Nez.CoreEvents.Exiting">
      <summary>
   fired when the game is exiting
   </summary>
    </member>
    <member name="M:Nez.CoreEventsComparer.Equals(CoreEvents,CoreEvents)">
      <summary>
   Determines whether the specified objects are equal.
   </summary>
      <param name="x">The first object of type <paramref name="T" /> to compare.</param>
      <param name="y">The second object of type <paramref name="T" /> to compare.</param>
      <returns>
        <see langword="true" /> if the specified objects are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Nez.CoreEventsComparer.GetHashCode(CoreEvents)">
      <summary>
   Returns a hash code for this instance.
   </summary>
      <param name="obj">The object.</param>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
  </members>
</doc>